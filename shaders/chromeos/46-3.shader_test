[require]
GLSL ES >= 3.00

[fragment shader]
#version 300 es

precision mediump float;
precision mediump sampler2D;
out mediump vec4 sk_FragColor;
uniform mediump vec4 urectH_Stage1;
uniform mediump float uinvSixSigma_Stage1;
uniform sampler2D uTextureSampler_0_Stage1;
flat in mediump vec4 vcolor_Stage0;
void main() {
    mediump vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
    }
    mediump vec4 output_Stage1;
    {
        mediump float xCoverage, yCoverage;
        {
            mediump float x, y;
            {
                x = max(urectH_Stage1.x - gl_FragCoord.x, gl_FragCoord.x - urectH_Stage1.z);
                y = max(urectH_Stage1.y - gl_FragCoord.y, gl_FragCoord.y - urectH_Stage1.w);
            }
            xCoverage = texture(uTextureSampler_0_Stage1, vec2(x * uinvSixSigma_Stage1, 0.5)).w;
            yCoverage = texture(uTextureSampler_0_Stage1, vec2(y * uinvSixSigma_Stage1, 0.5)).w;
            output_Stage1 = vec4(xCoverage) * yCoverage;
        }
        output_Stage1 = vec4(xCoverage) * yCoverage;
    }
    {
        sk_FragColor = outputColor_Stage0 * output_Stage1;
    }
}

[vertex shader]
#version 300 es

precision mediump float;
precision mediump sampler2D;
uniform highp vec4 sk_RTAdjust;
in highp vec2 position;
in mediump vec4 color;
flat out mediump vec4 vcolor_Stage0;
void main() {
    vcolor_Stage0 = color;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

