[require]
GLSL ES >= 1.00

[vertex shader]
attribute highp float _ua_index;
attribute highp vec4 _ua_position;
uniform highp vec2 _uquad[4];
uniform highp mat4 _umatrix;
void main(){
highp int _uvertex_index = int(_ua_index);
highp vec4 _upos = vec4(_uquad[int(clamp(float(_uvertex_index), 0.0, float(3)))], _ua_position.z, _ua_position.w);
(gl_Position = (_umatrix * _upos));
}

[fragment shader]
uniform mediump vec4 _uroundedCornerRect;
uniform mediump vec4 _uroundedCornerRadius;
mediump vec4 _uIsCorner(in mediump vec2 _urcCoord){
if (((_urcCoord.x < _uroundedCornerRadius.x) && (_urcCoord.y < _uroundedCornerRadius.x)))
{
return vec4(1.0, 0.0, 0.0, 0.0);
}
if (((_urcCoord.x > (_uroundedCornerRect.z - _uroundedCornerRadius.y)) && (_urcCoord.y < _uroundedCornerRadius.y)))
{
return vec4(0.0, 1.0, 0.0, 0.0);
}
if (((_urcCoord.x > (_uroundedCornerRect.z - _uroundedCornerRadius.z)) && (_urcCoord.y > (_uroundedCornerRect.w - _uroundedCornerRadius.z))))
{
return vec4(0.0, 0.0, 1.0, 0.0);
}
if (((_urcCoord.x < _uroundedCornerRadius.w) && (_urcCoord.y > (_uroundedCornerRect.w - _uroundedCornerRadius.w))))
{
return vec4(0.0, 0.0, 0.0, 1.0);
}
return vec4(0.0, 0.0, 0.0, 0.0);
}
mediump vec2 _uGetCenter(in mediump vec4 _ucorner, in mediump float _uradius){
if ((_ucorner.x == 1.0))
{
return vec2(_uradius, _uradius);
}
else
{
if ((_ucorner.y == 1.0))
{
return vec2((_uroundedCornerRect.z - _uradius), _uradius);
}
else
{
if ((_ucorner.z == 1.0))
{
return vec2((_uroundedCornerRect.z - _uradius), (_uroundedCornerRect.w - _uradius));
}
else
{
return vec2(_uradius, (_uroundedCornerRect.w - _uradius));
}
}
}
}
mediump vec4 _uApplyRoundedCorner(in mediump vec4 _usrc){
mediump vec2 _urcCoord = (gl_FragCoord.xy - _uroundedCornerRect.xy);
mediump vec4 _uisCorner = _uIsCorner(_urcCoord);
mediump float _ur = dot(_uisCorner, _uroundedCornerRadius);
if ((_ur == 0.0))
{
return _usrc;
}
highp vec2 _ucornerCenter = _uGetCenter(_uisCorner, _ur);
highp vec2 _ucxy = (_urcCoord - _ucornerCenter);
mediump float _ufragDst = length(_ucxy);
mediump float _ualpha = smoothstep((_ur - 1.0), (_ur + 1.0), _ufragDst);
return ((vec4(0.0, 0.0, 0.0, 0.0) * _ualpha) + (_usrc * (1.0 - _ualpha)));
}
uniform mediump vec4 _ucolor;
void main(){
mediump vec4 _utexColor = _ucolor;
(gl_FragColor = _utexColor);
(gl_FragColor = _uApplyRoundedCorner(gl_FragColor));
}

