[require]
GLSL ES >= 3.00

[fragment shader]
#version 300 es

precision mediump float;
precision mediump sampler2D;
out mediump vec4 sk_FragColor;
flat in mediump vec4 vcolor_Stage0;
in highp vec2 varccoord_Stage0;
void main() {
    mediump vec4 outputColor_Stage0;
    mediump vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
        highp float x_plus_1 = varccoord_Stage0.x, y = varccoord_Stage0.y;
        mediump float coverage;
        if (0.0 == x_plus_1) {
            coverage = y;
        } else {
            highp float fn = x_plus_1 * (x_plus_1 - 2.0);
            fn = ((y) * (y) + (fn));
            highp float fnwidth = fwidth(fn);
            mediump float d = fn / fnwidth;
            coverage = clamp(0.5 - d, 0.0, 1.0);
        }
        outputCoverage_Stage0 = vec4(coverage);
    }
    {
        sk_FragColor = outputColor_Stage0 * outputCoverage_Stage0;
    }
}

[vertex shader]
#version 300 es

precision mediump float;
precision mediump sampler2D;
uniform highp vec4 sk_RTAdjust;
in highp vec4 radii_selector;
in highp vec4 corner_and_radius_outsets;
in highp vec4 aa_bloat_and_coverage;
in highp vec4 skew;
in highp vec2 translate;
in highp vec4 radii_x;
in highp vec4 radii_y;
in mediump vec4 color;
flat out mediump vec4 vcolor_Stage0;
out highp vec2 varccoord_Stage0;
void main() {
    vcolor_Stage0 = color;
    highp vec2 corner = corner_and_radius_outsets.xy;
    highp vec2 radius_outset = corner_and_radius_outsets.zw;
    highp vec2 aa_bloat_direction = aa_bloat_and_coverage.xy;
    highp float coverage = aa_bloat_and_coverage.z;
    highp float is_linear_coverage = aa_bloat_and_coverage.w;
    highp vec2 pixellength = inversesqrt(vec2(dot(skew.xz, skew.xz), dot(skew.yw, skew.yw)));
    highp vec4 normalized_axis_dirs = skew * pixellength.xyxy;
    highp vec2 axiswidths = abs(normalized_axis_dirs.xy) + abs(normalized_axis_dirs.zw);
    highp vec2 aa_bloatradius = (axiswidths * pixellength) * 0.5;
    highp vec4 radii_and_neighbors = radii_selector * mat4(radii_x, radii_y, radii_x.yxwz, radii_y.wzyx);
    highp vec2 radii = radii_and_neighbors.xy;
    highp vec2 neighbor_radii = radii_and_neighbors.zw;
    if (any(greaterThan(aa_bloatradius, vec2(1.0)))) {
        corner = max(abs(corner), aa_bloatradius) * sign(corner);
        coverage /= max(aa_bloatradius.x, 1.0) * max(aa_bloatradius.y, 1.0);
        radii = vec2(0.0);
    }
    if (any(lessThan(radii, aa_bloatradius * 1.25))) {
        radii = aa_bloatradius;
        radius_outset = floor(abs(radius_outset)) * radius_outset;
        is_linear_coverage = 1.0;
    } else {
        radii = clamp(radii, pixellength, 2.0 - pixellength);
        neighbor_radii = clamp(neighbor_radii, pixellength, 2.0 - pixellength);
        highp vec2 spacing = (2.0 - radii) - neighbor_radii;
        highp vec2 extra_pad = max(pixellength * 0.0625 - spacing, vec2(0.0));
        radii -= extra_pad * 0.5;
    }
    highp vec2 aa_outset = aa_bloat_direction * aa_bloatradius;
    highp vec2 vertexpos = (corner + radius_outset * radii) + aa_outset;
    highp mat2 skewmatrix = mat2(skew.xy, skew.zw);
    highp vec2 devcoord = vertexpos * skewmatrix + translate;
    if (0.0 != is_linear_coverage) {
        varccoord_Stage0.xy = vec2(0.0, coverage);
    } else {
        highp vec2 arccoord = (1.0 - abs(radius_outset)) + (aa_outset / radii) * corner;
        varccoord_Stage0.xy = vec2(arccoord.x + 1.0, arccoord.y);
    }
    gl_Position = vec4(devcoord.x, devcoord.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

