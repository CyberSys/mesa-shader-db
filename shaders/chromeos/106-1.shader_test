[require]
GLSL ES >= 3.00

[fragment shader]
#version 300 es

precision mediump float;
precision mediump sampler2D;
out mediump vec4 sk_FragColor;
uniform mediump vec4 uleftBorderColor_Stage1_c0_c0;
uniform mediump vec4 urightBorderColor_Stage1_c0_c0;
uniform highp vec4 uscale01_Stage1_c0_c0_c1_c0;
uniform highp vec4 ubias01_Stage1_c0_c0_c1_c0;
uniform highp vec4 uscale23_Stage1_c0_c0_c1_c0;
uniform highp vec4 ubias23_Stage1_c0_c0_c1_c0;
uniform mediump float uthreshold_Stage1_c0_c0_c1_c0;
in highp vec4 vinCircleEdge_Stage0;
in mediump vec4 vinColor_Stage0;
in highp vec2 vTransformedCoords_0_Stage0;
in highp vec2 vTransformedCoords_1_Stage0;
mediump vec4 stage_Stage1_c0_c0_c0_c0(mediump vec4 _input) {
    mediump vec4 _output;
    mediump float t = vTransformedCoords_0_Stage0.x + 9.9999997473787516e-06;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
mediump vec4 stage_Stage1_c0_c0_c1_c0(mediump vec4 _input) {
    mediump vec4 _output;
    mediump float t = _input.x;
    highp vec4 scale, bias;
    if (t < uthreshold_Stage1_c0_c0_c1_c0) {
        scale = uscale01_Stage1_c0_c0_c1_c0;
        bias = ubias01_Stage1_c0_c0_c1_c0;
    } else {
        scale = uscale23_Stage1_c0_c0_c1_c0;
        bias = ubias23_Stage1_c0_c0_c1_c0;
    }
    _output = t * scale + bias;
    return _output;
}
mediump vec4 stage_Stage1_c0_c0(mediump vec4 _input) {
    mediump vec4 _output;
    mediump vec4 t = stage_Stage1_c0_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage1_c0_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage1_c0_c0;
    } else {
        _output = stage_Stage1_c0_c0_c1_c0(t);
    }
    return _output;
}
void main() {
    mediump vec4 outputCoverage_Stage0;
    {
        highp vec4 circleEdge;
        circleEdge = vinCircleEdge_Stage0;
        highp float d = length(circleEdge.xy);
        mediump float distanceToOuterEdge = circleEdge.z * (1.0 - d);
        mediump float edgeAlpha = clamp(distanceToOuterEdge, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    mediump vec4 output_Stage1;
    {
        output_Stage1 = stage_Stage1_c0_c0(vec4(1.0, 1.0, 1.0, 1.0));
    }
    mediump vec4 output_Stage2;
    {
        output_Stage2 = output_Stage1;
        mediump float value;
        {
            highp uint x = uint(vTransformedCoords_1_Stage0.x);
            highp uint y = uint(vTransformedCoords_1_Stage0.y);
            highp uint m = (((((y & 1u) << 5u | (x & 1u) << 4u) | (y & 2u) << 2u) | (x & 2u) << 1u) | (y & 4u) >> 1u) | (x & 4u) >> 2u;
            value = float(m) / 64.0 - 0.4921875;
        }
        output_Stage2 = vec4(clamp(output_Stage2.xyz + value * 0.0039215688593685627, 0.0, output_Stage2.w), output_Stage2.w);
    }
    {
        sk_FragColor = output_Stage2 * outputCoverage_Stage0;
    }
}

[vertex shader]
#version 300 es

precision mediump float;
precision mediump sampler2D;
uniform highp vec4 sk_RTAdjust;
uniform highp mat3 uCoordTransformMatrix_0_Stage0;
uniform highp mat3 uCoordTransformMatrix_1_Stage0;
in highp vec2 inPosition;
in mediump vec4 inColor;
in highp vec4 inCircleEdge;
out highp vec4 vinCircleEdge_Stage0;
out mediump vec4 vinColor_Stage0;
out highp vec2 vTransformedCoords_0_Stage0;
out highp vec2 vTransformedCoords_1_Stage0;
void main() {
    vinCircleEdge_Stage0 = inCircleEdge;
    vinColor_Stage0 = inColor;
    highp vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

