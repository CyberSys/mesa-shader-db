[require]
GLSL >= 1.20

[vertex shader]
#version 120
#extension GL_ARB_texture_rectangle : enable
#define flat
#define texture2DRectOffset(sampler, coords, offset) texture2DRect(sampler, coords + vec2(offset))
#define shadow2DRectOffset(sampler, coords, offset) shadow2DRect(sampler, coords + vec2(offset))
attribute vec4 vvertex;
    uniform mat4 camprojmatrix;
    void main(void)
    {
        gl_Position = camprojmatrix * vvertex;
    }

[fragment shader]
#version 120
#extension GL_ARB_texture_rectangle : enable
#define flat
#define texture2DRectOffset(sampler, coords, offset) texture2DRect(sampler, coords + vec2(offset))
#define shadow2DRectOffset(sampler, coords, offset) shadow2DRect(sampler, coords + vec2(offset))
#define fragdata(loc, name, type)
#define fragcolor gl_FragData[0]
uniform sampler2DRect tex0;
        #define gfetch(sampler, coords) texture2DRect(sampler, coords)
        #define gfetchoffset(sampler, coords, offset) texture2DRectOffset(sampler, coords, offset)
        #define gfetchproj(sampler, coords) texture2DRectProj(sampler, coords)
        #define gfetchclamp(sampler, coords) texture2DRect(sampler, coords)
        
        uniform vec3 gdepthscale;
        uniform vec3 gdepthunpackparams;
    
    
    uniform vec3 gdepthpackparams;
    fragdata(0, fragcolor, vec4)
    void main(void)
    {
        
            
        float depth = gdepthscale.x / (gfetch(tex0, gl_FragCoord.xy).r*gdepthscale.y + gdepthscale.z);
    
            
        vec3 packdepth = depth * gdepthpackparams;
        packdepth = vec3(packdepth.x, fract(packdepth.yz));
        packdepth.xy -= packdepth.yz * (1.0/255.0);
    
        
        fragcolor = vec4(packdepth, 0.0);
    }

