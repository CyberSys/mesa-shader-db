[require]
GLSL >= 1.10

[vertex shader]
#version 120
#extension GL_ARB_texture_rectangle : enable
#define flat
#define texture2DRectOffset(sampler, coords, offset) texture2DRect(sampler, coords + vec2(offset))
#define shadow2DRectOffset(sampler, coords, offset) shadow2DRect(sampler, coords + vec2(offset))
attribute vec4 vvertex;
        
            attribute vec4 vtangent;
            varying mat3 world;
        
        attribute vec3 vnormal, vtexcoord0;
        uniform mat4 camprojmatrix;
        varying vec3 texcoord0;
        
        

uniform vec4 specscale;
        void main(void)
        {
            gl_Position = camprojmatrix * vvertex;
            texcoord0 = vtexcoord0;

            
                vec3 bitangent = cross(vnormal, vtangent.xyz) * vtangent.w;
                
                world = mat3(vtangent.xyz, bitangent, vnormal);
            

            

            
        }
    
[fragment shader]
#version 120
#extension GL_ARB_texture_rectangle : enable
#define flat
#define texture2DRectOffset(sampler, coords, offset) texture2DRect(sampler, coords + vec2(offset))
#define shadow2DRectOffset(sampler, coords, offset) shadow2DRect(sampler, coords + vec2(offset))
#define fragdata(loc, name, type)
#define gcolor gl_FragData[0]
#define gnormal gl_FragData[1]
fragdata(0, gcolor, vec4)
            fragdata(1, gnormal, vec4)
        
        uniform sampler2D diffusemap;
        uniform vec4 colorparams;
        varying vec3 texcoord0;
        
            uniform sampler2D normalmap;
            varying mat3 world;
        
        
        uniform sampler2D glowmap;
        
        

uniform vec4 specscale;
        void main(void)
        {
            
                

                
                    #define dtc texcoord0.xy
                

                vec4 diffuse = texture2D(diffusemap, dtc);

                
                    vec3 bump = texture2D(normalmap, dtc).rgb*2.0 - 1.0;
                    vec3 bumpw = world * bump;
                

                
                    gcolor.rgb = diffuse.rgb*colorparams.rgb;

                    
                

                

                

                
                    bumpw = normalize(bumpw);
                    
                    
        gnormal.rgb = bumpw*0.5 + 0.5;
        #ifdef packnorm
            gnormal.a = (packnorm);
        #else
            gnormal.a = 1.0;
        #endif
    
                

                
            

            float alpha = clamp(texcoord0.z, 0.0, 1.0) * diffuse.a;
            
                gcolor.a = alpha;
                gnormal.a = alpha;
            
        }
    
