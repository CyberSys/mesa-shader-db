[require]
GLSL >= 1.10

[vertex shader]
#version 120
#extension GL_ARB_texture_rectangle : enable
#define flat
#define texture2DRectOffset(sampler, coords, offset) texture2DRect(sampler, coords + vec2(offset))
#define shadow2DRectOffset(sampler, coords, offset) shadow2DRect(sampler, coords + vec2(offset))
attribute vec4 vvertex;
    attribute vec3 vtexcoord0;
    uniform mat4 rsmtcmatrix;
    varying vec3 rhcenter;
    varying vec2 rsmcenter;
    void main(void)
    {
        gl_Position = vvertex;
        rhcenter = vtexcoord0;
        rsmcenter = (rsmtcmatrix * vec4(vtexcoord0, 1.0)).xy;
    }
  
[fragment shader]
#version 120
#extension GL_ARB_texture_rectangle : enable
#define flat
#define texture2DRectOffset(sampler, coords, offset) texture2DRect(sampler, coords + vec2(offset))
#define shadow2DRectOffset(sampler, coords, offset) shadow2DRect(sampler, coords + vec2(offset))
#define fragdata(loc, name, type)
#define rhr gl_FragData[0]
#define rhg gl_FragData[1]
#define rhb gl_FragData[2]
#define rha gl_FragData[3]
uniform sampler2DRect tex0, tex1, tex2; 
    uniform mat4 rsmworldmatrix;
    uniform vec2 rsmspread;
    uniform float rhatten, rhspread, rhaothreshold, rhaoatten, rhaoheight;
    uniform vec3 rsmdir;
    varying vec3 rhcenter;
    varying vec2 rsmcenter;
    fragdata(0, rhr, vec4)
    fragdata(1, rhg, vec4)
    fragdata(2, rhb, vec4)
    fragdata(3, rha, vec4)

    void calcrhsample(vec3 rhtap, vec2 rsmtap, inout vec4 shr, inout vec4 shg, inout vec4 shb, inout vec4 sha)
    {
        vec3 rhpos = rhcenter + rhtap*rhspread;
        vec2 rsmtc = rsmcenter + rsmtap*rsmspread;
        float rsmdepth = texture2DRect(tex0, rsmtc).x;
        vec3 rsmcolor = texture2DRect(tex1, rsmtc).rgb;
        vec3 rsmnormal = texture2DRect(tex2, rsmtc).xyz*2.0 - 1.0;
        vec3 rsmpos = (rsmworldmatrix * vec4(rsmtc, rsmdepth, 1.0)).xyz;

        vec3 dir = rhpos - rsmpos;

        sha += step(rhaothreshold, dir.z) * vec4(normalize(vec3(dir.xy, min(dot(dir.xy, dir.xy) * rhaoatten - rhaoheight, 0.0))), 1.0);

        float dist = dot(dir, dir);
        if(dist > 0.000049) dir = normalize(dir);
        float atten = clamp(dot(dir, rsmnormal), 0.0, 1.0) / (0.1 + dist*rhatten);
        rsmcolor *= atten;

        shr += vec4(rsmcolor.r*dir, rsmcolor.r);
        shg += vec4(rsmcolor.g*dir, rsmcolor.g);
        shb += vec4(rsmcolor.b*dir, rsmcolor.b);
    }

    void main(void)
    {
        vec4 shr = vec4(0.0), shg = vec4(0.0), shb = vec4(0.0), sha = vec4(0.0);

        
            calcrhsample(vec3(0.0540788, 0.411725, 0.134068)*2.0 - 1.0, vec2(0.00240055, 0.643992)*2.0 - 1.0, shr, shg, shb, sha);
         
            calcrhsample(vec3(0.0163579, 0.416211, 0.992035)*2.0 - 1.0, vec2(0.0356464, 0.851616)*2.0 - 1.0, shr, shg, shb, sha);
         
            calcrhsample(vec3(0.692068, 0.549272, 0.886502)*2.0 - 1.0, vec2(0.101733, 0.21876)*2.0 - 1.0, shr, shg, shb, sha);
         
            calcrhsample(vec3(0.305795, 0.781854, 0.571337)*2.0 - 1.0, vec2(0.166119, 0.0278085)*2.0 - 1.0, shr, shg, shb, sha);
         
            calcrhsample(vec3(0.791681, 0.139042, 0.247047)*2.0 - 1.0, vec2(0.166438, 0.474999)*2.0 - 1.0, shr, shg, shb, sha);
         
            calcrhsample(vec3(0.83929, 0.973663, 0.460982)*2.0 - 1.0, vec2(0.24991, 0.766405)*2.0 - 1.0, shr, shg, shb, sha);
         
            calcrhsample(vec3(0.0336314, 0.0867641, 0.582324)*2.0 - 1.0, vec2(0.333714, 0.130407)*2.0 - 1.0, shr, shg, shb, sha);
         
            calcrhsample(vec3(0.148198, 0.961974, 0.0378124)*2.0 - 1.0, vec2(0.400681, 0.374781)*2.0 - 1.0, shr, shg, shb, sha);
         
            calcrhsample(vec3(0.948729, 0.0713828, 0.916379)*2.0 - 1.0, vec2(0.424067, 0.888211)*2.0 - 1.0, shr, shg, shb, sha);
         
            calcrhsample(vec3(0.586413, 0.591845, 0.031251)*2.0 - 1.0, vec2(0.448511, 0.678962)*2.0 - 1.0, shr, shg, shb, sha);
         
            calcrhsample(vec3(0.00189215, 0.973968, 0.932981)*2.0 - 1.0, vec2(0.529383, 0.213568)*2.0 - 1.0, shr, shg, shb, sha);
         
            calcrhsample(vec3(0.435865, 0.0853603, 0.995148)*2.0 - 1.0, vec2(0.608569, 0.47715)*2.0 - 1.0, shr, shg, shb, sha);
         
            calcrhsample(vec3(0.36848, 0.820612, 0.942717)*2.0 - 1.0, vec2(0.617996, 0.862528)*2.0 - 1.0, shr, shg, shb, sha);
         
            calcrhsample(vec3(0.500107, 0.0658284, 0.623005)*2.0 - 1.0, vec2(0.631784, 0.0515881)*2.0 - 1.0, shr, shg, shb, sha);
         
            calcrhsample(vec3(0.580187, 0.4485, 0.379223)*2.0 - 1.0, vec2(0.740969, 0.20753)*2.0 - 1.0, shr, shg, shb, sha);
         
            calcrhsample(vec3(0.258614, 0.0201422, 0.241005)*2.0 - 1.0, vec2(0.788203, 0.41923)*2.0 - 1.0, shr, shg, shb, sha);
         
            calcrhsample(vec3(0.987152, 0.441664, 0.43318)*2.0 - 1.0, vec2(0.794066, 0.615141)*2.0 - 1.0, shr, shg, shb, sha);
         
            calcrhsample(vec3(0.925108, 0.917203, 0.921506)*2.0 - 1.0, vec2(0.834504, 0.836612)*2.0 - 1.0, shr, shg, shb, sha);
         
            calcrhsample(vec3(0.988372, 0.822047, 0.12479)*2.0 - 1.0, vec2(0.89446, 0.0677863)*2.0 - 1.0, shr, shg, shb, sha);
         
            calcrhsample(vec3(0.330393, 0.43611, 0.762566)*2.0 - 1.0, vec2(0.975609, 0.446056)*2.0 - 1.0, shr, shg, shb, sha);
        

        rhr = shr * (vec4(0.5, 0.5, 0.5, 1.0)/20.0) + vec4(0.5, 0.5, 0.5, 0.0);
        rhg = shg * (vec4(0.5, 0.5, 0.5, 1.0)/20.0) + vec4(0.5, 0.5, 0.5, 0.0);
        rhb = shb * (vec4(0.5, 0.5, 0.5, 1.0)/20.0) + vec4(0.5, 0.5, 0.5, 0.0);
        rha = sha * (vec4(0.5, 0.5, 0.5, 1.0)/20.0) + vec4(0.5, 0.5, 0.5, 0.0);
    }
  
