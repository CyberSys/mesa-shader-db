[require]
GLSL >= 1.20

[vertex shader]
#version 120
#extension GL_ARB_texture_rectangle : enable
#define flat
#define texture2DRectOffset(sampler, coords, offset) texture2DRect(sampler, coords + vec2(offset))
#define shadow2DRectOffset(sampler, coords, offset) shadow2DRect(sampler, coords + vec2(offset))
attribute vec4 vvertex;
    attribute vec2 vtexcoord0;
    varying vec2 texcoord0;
    void main(void)
    {
        gl_Position = vvertex;
        texcoord0 = vtexcoord0;
    }

[fragment shader]
#version 120
#extension GL_ARB_texture_rectangle : enable
#define flat
#define texture2DRectOffset(sampler, coords, offset) texture2DRect(sampler, coords + vec2(offset))
#define shadow2DRectOffset(sampler, coords, offset) shadow2DRect(sampler, coords + vec2(offset))
#define fragdata(loc, name, type)
#define fragcolor gl_FragData[0]
uniform sampler2DRect tex0; 
    uniform vec2 hdrgamma;
    varying vec2 texcoord0;
    fragdata(0, fragcolor, vec4)
    void main(void)
    {
        
            vec3 color0 = texture2DRectOffset(tex0, texcoord0, ivec2(-1, 0)).rgb*2.0;
            
        color0 *= color0;
    
            float lum0 = dot(color0, vec3(0.2126, 0.7152, 0.0722));
            float loglum0 = sqrt(clamp(lum0, 0.015625, 4.0)) * (1.0/2.0);
         
            vec3 color1 = texture2DRectOffset(tex0, texcoord0, ivec2(1, 0)).rgb*2.0;
            
        color1 *= color1;
    
            float lum1 = dot(color1, vec3(0.2126, 0.7152, 0.0722));
            float loglum1 = sqrt(clamp(lum1, 0.015625, 4.0)) * (1.0/2.0);
        
        fragcolor.rgb = vec3(0.5*(loglum0 + loglum1));
    }

