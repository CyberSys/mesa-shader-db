[require]
GLSL >= 1.30

[vertex shader]
#version 130
#extension GL_ARB_draw_instanced : enable
#define QF_GLSL_VERSION 130
#define VERTEX_SHADER
#if !defined(myhalf)
//#if !defined(__GLSL_CG_DATA_TYPES)
#define myhalf float
#define myhalf2 vec2
#define myhalf3 vec3
#define myhalf4 vec4
//#else
//#define myhalf half
//#define myhalf2 half2
//#define myhalf3 half3
//#define myhalf4 half4
//#endif
#endif

#if QF_GLSL_VERSION >= 130
  precision highp float;

# ifdef VERTEX_SHADER
   out myhalf4 qf_FrontColor;
#  define qf_varying out
#  define qf_attribute in
# endif
# ifdef FRAGMENT_SHADER
   in myhalf4 qf_FrontColor;
   out myhalf4	qf_FragColor;
#  define qf_varying in
#  define qf_attribute in
# endif

# define qf_texture texture
# define qf_textureCube texture
# define qf_textureLod textureLod
# define qf_textureOffset(a,b,c,d) textureOffset(a,b,ivec2(c,d))
# define qf_shadow texture
#else
# ifdef VERTEX_SHADER
#  define qf_FrontColor gl_FrontColor
#  define qf_varying varying
#  define qf_attribute attribute
# endif

# ifdef FRAGMENT_SHADER
#  define qf_FrontColor gl_Color
#  define qf_FragColor gl_FragColor
#  define qf_varying varying
#  define qf_attribute attribute
# endif
# define qf_texture texture2D
# define qf_textureLod texture2DLod
# define qf_textureCube textureCube
# define qf_textureOffset(a,b,c,d) texture2DOffset(a,b,ivec2(c,d))
# define qf_shadow shadow2D
#endif

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif
#ifndef M_TWOPI
#define M_TWOPI 6.28318530717958647692
#endif

#ifndef MAX_UNIFORM_BONES
#define MAX_UNIFORM_BONES 100
#endif

#ifndef MAX_UNIFORM_INSTANCES
#define MAX_UNIFORM_INSTANCES 40
#endif
uniform vec3 u_QF_ViewOrigin;
uniform mat3 u_QF_ViewAxis;
uniform float u_QF_MirrorSide;
uniform vec3 u_QF_EntityOrigin;
uniform float u_QF_ShaderTime;

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif
#ifndef M_TWOPI
#define M_TWOPI 6.28318530717958647692
#endif

#ifndef WAVE_SIN
float QF_WaveFunc_Sin(float x)
{
x -= floor(x);
return sin(x * M_TWOPI);
}
float QF_WaveFunc_Triangle(float x)
{
x -= floor(x);
return step(x, 0.25) * x * 4.0 + (2.0 - 4.0 * step(0.25, x) * step(x, 0.75) * x) + ((step(0.75, x) * x - 0.75) * 4.0 - 1.0);
}
float QF_WaveFunc_Square(float x)
{
x -= floor(x);
return step(x, 0.5) * 2.0 - 1.0;
}
float QF_WaveFunc_Sawtooth(float x)
{
x -= floor(x);
return x;
}
float QF_QF_WaveFunc_InverseSawtooth(float x)
{
x -= floor(x);
return 1.0 - x;
}

#define WAVE_SIN(time,base,amplitude,phase,freq) (((base)+(amplitude)*QF_WaveFunc_Sin((phase)+(time)*(freq))))
#define WAVE_TRIANGLE(time,base,amplitude,phase,freq) (((base)+(amplitude)*QF_WaveFunc_Triangle((phase)+(time)*(freq))))
#define WAVE_SQUARE(time,base,amplitude,phase,freq) (((base)+(amplitude)*QF_WaveFunc_Square((phase)+(time)*(freq))))
#define WAVE_SAWTOOTH(time,base,amplitude,phase,freq) (((base)+(amplitude)*QF_WaveFunc_Sawtooth((phase)+(time)*(freq))))
#define WAVE_INVERSESAWTOOTH(time,base,amplitude,phase,freq) (((base)+(amplitude)*QF_QF_WaveFunc_InverseSawtooth((phase)+(time)*(freq))))
#endif

#ifdef VERTEX_SHADER
attribute vec4 a_BonesIndices;
attribute vec4 a_BonesWeights;

uniform vec4 u_QF_DualQuats[MAX_UNIFORM_BONES*2];

#if defined(DUAL_QUAT_TRANSFORM_NORMALS)
#if defined(DUAL_QUAT_TRANSFORM_TANGENT)
void QF_VertexDualQuatsTransform(const int numWeights, inout vec4 Position, inout vec3 Normal, inout vec3 Tangent)
#else
void QF_VertexDualQuatsTransform(const int numWeights, inout vec4 Position, inout vec3 Normal)
#endif
#else
void QF_VertexDualQuatsTransform(const int numWeights, inout vec4 Position)
#endif
{
int index;
vec4 Indices = a_BonesIndices;
vec4 Weights = a_BonesWeights;
vec4 Indices_2 = Indices * 2.0;
vec4 DQReal, DQDual;

index = int(Indices_2.x);
DQReal = u_QF_DualQuats[index+0];
DQDual = u_QF_DualQuats[index+1];

if (numWeights > 1)
{
DQReal *= Weights.x;
DQDual *= Weights.x;

vec4 DQReal1, DQDual1;
float scale;

index = int(Indices_2.y);
DQReal1 = u_QF_DualQuats[index+0];
DQDual1 = u_QF_DualQuats[index+1];
// antipodality handling
scale = (dot(DQReal1, DQReal) < 0.0 ? -1.0 : 1.0) * Weights.y;
DQReal += DQReal1 * scale;
DQDual += DQDual1 * scale;

if (numWeights > 2)
{
index = int(Indices_2.z);
DQReal1 = u_QF_DualQuats[index+0];
DQDual1 = u_QF_DualQuats[index+1];
// antipodality handling
scale = (dot(DQReal1, DQReal) < 0.0 ? -1.0 : 1.0) * Weights.z;
DQReal += DQReal1 * scale;
DQDual += DQDual1 * scale;

if (numWeights > 3)
{
index = int(Indices_2.w);
DQReal1 = u_QF_DualQuats[index+0];
DQDual1 = u_QF_DualQuats[index+1];
// antipodality handling
scale = (dot(DQReal1, DQReal) < 0.0 ? -1.0 : 1.0) * Weights.w;
DQReal += DQReal1 * scale;
DQDual += DQDual1 * scale;
}
}
}

float len = length(DQReal);
DQReal /= len;
DQDual /= len;

Position.xyz = (cross(DQReal.xyz, cross(DQReal.xyz, Position.xyz) + Position.xyz*DQReal.w + DQDual.xyz) + DQDual.xyz*DQReal.w - DQReal.xyz*DQDual.w)*2.0 + Position.xyz;

#ifdef DUAL_QUAT_TRANSFORM_NORMALS
Normal = cross(DQReal.xyz, cross(DQReal.xyz, Normal) + Normal*DQReal.w)*2.0 + Normal;
#endif

#ifdef DUAL_QUAT_TRANSFORM_TANGENT
Tangent = cross(DQReal.xyz, cross(DQReal.xyz, Tangent) + Tangent*DQReal.w)*2.0 + Tangent;
#endif
}

// use defines to overload the transform function

#define DUAL_QUAT_TRANSFORM_NORMALS
#if defined(DUAL_QUAT_TRANSFORM_NORMALS)
#if defined(DUAL_QUAT_TRANSFORM_TANGENT)
void QF_VertexDualQuatsTransform(const int numWeights, inout vec4 Position, inout vec3 Normal, inout vec3 Tangent)
#else
void QF_VertexDualQuatsTransform(const int numWeights, inout vec4 Position, inout vec3 Normal)
#endif
#else
void QF_VertexDualQuatsTransform(const int numWeights, inout vec4 Position)
#endif
{
int index;
vec4 Indices = a_BonesIndices;
vec4 Weights = a_BonesWeights;
vec4 Indices_2 = Indices * 2.0;
vec4 DQReal, DQDual;

index = int(Indices_2.x);
DQReal = u_QF_DualQuats[index+0];
DQDual = u_QF_DualQuats[index+1];

if (numWeights > 1)
{
DQReal *= Weights.x;
DQDual *= Weights.x;

vec4 DQReal1, DQDual1;
float scale;

index = int(Indices_2.y);
DQReal1 = u_QF_DualQuats[index+0];
DQDual1 = u_QF_DualQuats[index+1];
// antipodality handling
scale = (dot(DQReal1, DQReal) < 0.0 ? -1.0 : 1.0) * Weights.y;
DQReal += DQReal1 * scale;
DQDual += DQDual1 * scale;

if (numWeights > 2)
{
index = int(Indices_2.z);
DQReal1 = u_QF_DualQuats[index+0];
DQDual1 = u_QF_DualQuats[index+1];
// antipodality handling
scale = (dot(DQReal1, DQReal) < 0.0 ? -1.0 : 1.0) * Weights.z;
DQReal += DQReal1 * scale;
DQDual += DQDual1 * scale;

if (numWeights > 3)
{
index = int(Indices_2.w);
DQReal1 = u_QF_DualQuats[index+0];
DQDual1 = u_QF_DualQuats[index+1];
// antipodality handling
scale = (dot(DQReal1, DQReal) < 0.0 ? -1.0 : 1.0) * Weights.w;
DQReal += DQReal1 * scale;
DQDual += DQDual1 * scale;
}
}
}

float len = length(DQReal);
DQReal /= len;
DQDual /= len;

Position.xyz = (cross(DQReal.xyz, cross(DQReal.xyz, Position.xyz) + Position.xyz*DQReal.w + DQDual.xyz) + DQDual.xyz*DQReal.w - DQReal.xyz*DQDual.w)*2.0 + Position.xyz;

#ifdef DUAL_QUAT_TRANSFORM_NORMALS
Normal = cross(DQReal.xyz, cross(DQReal.xyz, Normal) + Normal*DQReal.w)*2.0 + Normal;
#endif

#ifdef DUAL_QUAT_TRANSFORM_TANGENT
Tangent = cross(DQReal.xyz, cross(DQReal.xyz, Tangent) + Tangent*DQReal.w)*2.0 + Tangent;
#endif
}

#define DUAL_QUAT_TRANSFORM_TANGENT
#if defined(DUAL_QUAT_TRANSFORM_NORMALS)
#if defined(DUAL_QUAT_TRANSFORM_TANGENT)
void QF_VertexDualQuatsTransform(const int numWeights, inout vec4 Position, inout vec3 Normal, inout vec3 Tangent)
#else
void QF_VertexDualQuatsTransform(const int numWeights, inout vec4 Position, inout vec3 Normal)
#endif
#else
void QF_VertexDualQuatsTransform(const int numWeights, inout vec4 Position)
#endif
{
int index;
vec4 Indices = a_BonesIndices;
vec4 Weights = a_BonesWeights;
vec4 Indices_2 = Indices * 2.0;
vec4 DQReal, DQDual;

index = int(Indices_2.x);
DQReal = u_QF_DualQuats[index+0];
DQDual = u_QF_DualQuats[index+1];

if (numWeights > 1)
{
DQReal *= Weights.x;
DQDual *= Weights.x;

vec4 DQReal1, DQDual1;
float scale;

index = int(Indices_2.y);
DQReal1 = u_QF_DualQuats[index+0];
DQDual1 = u_QF_DualQuats[index+1];
// antipodality handling
scale = (dot(DQReal1, DQReal) < 0.0 ? -1.0 : 1.0) * Weights.y;
DQReal += DQReal1 * scale;
DQDual += DQDual1 * scale;

if (numWeights > 2)
{
index = int(Indices_2.z);
DQReal1 = u_QF_DualQuats[index+0];
DQDual1 = u_QF_DualQuats[index+1];
// antipodality handling
scale = (dot(DQReal1, DQReal) < 0.0 ? -1.0 : 1.0) * Weights.z;
DQReal += DQReal1 * scale;
DQDual += DQDual1 * scale;

if (numWeights > 3)
{
index = int(Indices_2.w);
DQReal1 = u_QF_DualQuats[index+0];
DQDual1 = u_QF_DualQuats[index+1];
// antipodality handling
scale = (dot(DQReal1, DQReal) < 0.0 ? -1.0 : 1.0) * Weights.w;
DQReal += DQReal1 * scale;
DQDual += DQDual1 * scale;
}
}
}

float len = length(DQReal);
DQReal /= len;
DQDual /= len;

Position.xyz = (cross(DQReal.xyz, cross(DQReal.xyz, Position.xyz) + Position.xyz*DQReal.w + DQDual.xyz) + DQDual.xyz*DQReal.w - DQReal.xyz*DQDual.w)*2.0 + Position.xyz;

#ifdef DUAL_QUAT_TRANSFORM_NORMALS
Normal = cross(DQReal.xyz, cross(DQReal.xyz, Normal) + Normal*DQReal.w)*2.0 + Normal;
#endif

#ifdef DUAL_QUAT_TRANSFORM_TANGENT
Tangent = cross(DQReal.xyz, cross(DQReal.xyz, Tangent) + Tangent*DQReal.w)*2.0 + Tangent;
#endif
}

#endif
#ifdef VERTEX_SHADER
#ifdef APPLY_INSTANCED_ATTRIB_TRASNFORMS
attribute vec4 a_InstanceQuat;
attribute vec4 a_InstancePosAndScale;
#elif defined(GL_ARB_draw_instanced)

uniform vec4 u_QF_InstancePoints[MAX_UNIFORM_INSTANCES*2];

#define a_InstanceQuat u_QF_InstancePoints[gl_InstanceID*2]
#define a_InstancePosAndScale u_QF_InstancePoints[gl_InstanceID*2+1]
#else
uniform vec4 u_QF_InstancePoints[2];
#define a_InstanceQuat u_QF_InstancePoints[0]
#define a_InstancePosAndScale u_QF_InstancePoints[1]
#endif

void QF_InstancedTransform(inout vec4 Position, inout vec3 Normal)
{
Position.xyz = (cross(a_InstanceQuat.xyz, cross(a_InstanceQuat.xyz, Position.xyz) + Position.xyz*a_InstanceQuat.w)*2.0 + Position.xyz) *
 a_InstancePosAndScale.w + a_InstancePosAndScale.xyz;
Normal = cross(a_InstanceQuat.xyz, cross(a_InstanceQuat.xyz, Normal) + Normal*a_InstanceQuat.w)*2.0 + Normal;
}

#endif
#define QF_LatLong2Norm(ll) vec3(cos((ll).y) * sin((ll).x), sin((ll).y) * sin((ll).x), cos((ll).x))


#define DRAWFLAT_NORMAL_STEP	0.5		// floor or ceiling if < abs(normal.z)
uniform mat4 u_ModelViewMatrix;
uniform mat4 u_ModelViewProjectionMatrix;

uniform float u_ShaderTime;

uniform vec3 u_ViewOrigin;
uniform mat3 u_ViewAxis;

uniform vec3 u_EntityDist;
uniform vec3 u_EntityOrigin;
uniform myhalf4 u_EntityColor;

uniform myhalf4 u_ConstColor;
uniform myhalf4 u_RGBGenFuncArgs, u_AlphaGenFuncArgs;
uniform myhalf3 u_LightstyleColor[4]; // lightstyle colors

uniform myhalf3 u_LightAmbient;
uniform myhalf3 u_LightDiffuse;
uniform vec3 u_LightDir;

uniform myhalf2 u_BlendMix;

uniform vec2 u_TextureMatrix[3];
#define TextureMatrix2x3Mul(m2x3,tc) vec2(dot((m2x3)[0],(tc)) + (m2x3)[2][0], dot((m2x3)[1],(tc)) + (m2x3)[2][1])

uniform float u_MirrorSide;

uniform float u_ZNear, u_ZFar;

uniform ivec4 u_Viewport; // x, y, width, height

uniform vec4 u_TextureParams;

uniform myhalf u_SoftParticlesScale;
myhalf3 Greyscale(myhalf3 color)
{
	return myhalf3(dot(color, myhalf3(0.299, 0.587, 0.114)));
}


qf_varying vec4 v_TexCoord;
qf_varying vec4 v_ProjVector;
#ifdef APPLY_EYEDOT
qf_varying vec3 v_EyeVector;
#endif

#ifdef VERTEX_SHADER
#ifdef VERTEX_SHADER
qf_attribute vec4 a_Position;
qf_attribute vec4 a_SVector;
qf_attribute vec4 a_Normal;
qf_attribute vec4 a_Color;
qf_attribute vec2 a_TexCoord;
qf_attribute vec2 a_LightmapCoord0, a_LightmapCoord1, a_LightmapCoord2, a_LightmapCoord3;
#endif
void TransformVerts(inout vec4 Position, inout vec3 Normal, inout vec2 TexCoord)
{
#ifdef NUM_BONE_INFLUENCES
	QF_VertexDualQuatsTransform(NUM_BONE_INFLUENCES, Position, Normal);
#endif

#ifdef APPLY_DEFORMVERTS
	QF_DeformVerts(Position, Normal, TexCoord);
#endif

#ifdef APPLY_INSTANCED_TRANSFORMS
	QF_InstancedTransform(Position, Normal);
#endif
}

void TransformVerts(inout vec4 Position, inout vec3 Normal, inout vec3 Tangent, inout vec2 TexCoord)
{
#ifdef NUM_BONE_INFLUENCES
	QF_VertexDualQuatsTransform(NUM_BONE_INFLUENCES, Position, Normal, Tangent);
#endif

#ifdef APPLY_DEFORMVERTS
	QF_DeformVerts(Position, Normal, TexCoord);
#endif

#ifdef APPLY_INSTANCED_TRANSFORMS
	QF_InstancedTransform(Position, Normal);
#endif
}
myhalf4 VertexRGBGen(in vec4 Position, in vec3 Normal, in myhalf4 VertexColor)
{
#if defined(APPLY_RGB_DISTANCERAMP) || defined(APPLY_ALPHA_DISTANCERAMP)
#define DISTANCERAMP(x1,x2,y1,y2) ((y2 - y1) / (x2 - x1) * (clamp(myhalf(dot(u_EntityDist - Position.xyz, Normal)),0.0,x2) - x1) + y1)
#endif

#if defined(APPLY_RGB_CONST) && defined(APPLY_ALPHA_CONST)
	myhalf4 Color = u_ConstColor;
#else
	myhalf4 Color = myhalf4(1.0);

#if defined(APPLY_RGB_CONST)
	Color.rgb = u_ConstColor.rgb;
#elif defined(APPLY_RGB_VERTEX)
	Color.rgb = VertexColor.rgb;
#elif defined(APPLY_RGB_ONE_MINUS_VERTEX)
	Color.rgb = myhalf3(1.0) - VertexColor.rgb;
#elif defined(APPLY_RGB_GEN_DIFFUSELIGHT)
	Color.rgb = myhalf3(u_LightAmbient + max(dot(u_LightDir, Normal), 0.0) * u_LightDiffuse);
#endif

#if defined(APPLY_ALPHA_CONST)
	Color.a = u_ConstColor.a;
#elif defined(APPLY_ALPHA_VERTEX)
	Color.a = VertexColor.a;
#elif defined(APPLY_ALPHA_ONE_MINUS_VERTEX)
	Color.a = 1.0 - VertexColor.a;
#endif

#endif

#ifdef APPLY_RGB_DISTANCERAMP
	Color.rgb *= DISTANCERAMP(u_RGBGenFuncArgs[2], u_RGBGenFuncArgs[3], u_RGBGenFuncArgs[0], u_RGBGenFuncArgs[1]);
#endif

#ifdef APPLY_ALPHA_DISTANCERAMP
	Color.a *= DISTANCERAMP(u_AlphaGenFuncArgs[2], u_AlphaGenFuncArgs[3], u_AlphaGenFuncArgs[0], u_AlphaGenFuncArgs[1]);
#endif

	return Color;
#if defined(APPLY_RGB_DISTANCERAMP) || defined(APPLY_ALPHA_DISTANCERAMP)
#undef DISTANCERAMP
#endif
}


#ifdef APPLY_EYEDOT
uniform float u_FrontPlane;
#endif

void main(void)
{
	vec4 Position = a_Position;
	vec3 Normal = a_Normal.xyz;
	vec2 TexCoord = a_TexCoord;
	vec3 Tangent = a_SVector.xyz;
	float TangentDir = a_SVector.w;
	myhalf4 inColor = myhalf4(a_Color);

	TransformVerts(Position, Normal, TexCoord);

	qf_FrontColor = vec4(VertexRGBGen(Position, Normal, inColor));

	v_TexCoord.st = TextureMatrix2x3Mul(u_TextureMatrix, TexCoord);

	vec2 textureMatrix3_[3];
	textureMatrix3_[0] =  u_TextureMatrix[0];
	textureMatrix3_[1] =  u_TextureMatrix[1];
	textureMatrix3_[2] = -u_TextureMatrix[2];
	v_TexCoord.pq = TextureMatrix2x3Mul(textureMatrix3_, TexCoord);

#ifdef APPLY_EYEDOT
	mat3 v_StrMatrix;
	v_StrMatrix[0] = Tangent;
	v_StrMatrix[2] = Normal;
	v_StrMatrix[1] = TangentDir * cross(Normal, Tangent);

	vec3 EyeVectorWorld = (u_ViewOrigin - Position.xyz) * u_FrontPlane;
	v_EyeVector = EyeVectorWorld * v_StrMatrix;
#endif

	gl_Position = u_ModelViewProjectionMatrix * Position;
	v_ProjVector = gl_Position;
}

#endif // VERTEX_SHADER

#ifdef FRAGMENT_SHADER
// Fragment shader

#ifdef APPLY_DUDV
uniform sampler2D u_DuDvMapTexture;
#endif

#ifdef APPLY_EYEDOT
uniform sampler2D u_NormalmapTexture;
#endif
uniform sampler2D u_ReflectionTexture;
uniform sampler2D u_RefractionTexture;

void main(void)
{
	myhalf3 color;

#ifdef APPLY_DUDV
	vec3 displacement = vec3(qf_texture(u_DuDvMapTexture, vec2(v_TexCoord.pq) * vec2(0.25)));
	vec2 coord = vec2(v_TexCoord.st) + vec2(displacement) * vec2 (0.2);

	vec3 fdist = vec3 (normalize(vec3(qf_texture(u_DuDvMapTexture, coord)) - vec3 (0.5))) * vec3(0.005);
#else
	vec3 fdist = vec3(0.0);
#endif

	// get projective texcoords
	float scale = float(1.0 / float(v_ProjVector.w));
	float inv2NW = u_TextureParams.z * 0.5; // .z - inverse width
	float inv2NH = u_TextureParams.w * 0.5; // .w - inverse height
	vec2 projCoord = (vec2(v_ProjVector.xy) * scale + vec2 (1.0)) * vec2 (0.5) + vec2(fdist.xy);
	projCoord.s = float (clamp (float(projCoord.s), inv2NW, 1.0 - inv2NW));
	projCoord.t = float (clamp (float(projCoord.t), inv2NH, 1.0 - inv2NH));

	myhalf3 refr = myhalf3(0.0);
	myhalf3 refl = myhalf3(0.0);

#ifdef APPLY_EYEDOT
	// calculate dot product between the surface normal and eye vector
	// great for simulating qf_varying water translucency based on the view angle
	myhalf3 surfaceNormal = normalize(myhalf3(qf_texture(u_NormalmapTexture, coord)) - myhalf3 (0.5));
	vec3 eyeNormal = normalize(myhalf3(v_EyeVector));

	float refrdot = float(dot(surfaceNormal, eyeNormal));
	//refrdot = float (clamp (refrdot, 0.0, 1.0));
	float refldot = 1.0 - refrdot;
	// get refraction and reflection

#ifdef APPLY_REFRACTION
	refr = (myhalf3(qf_texture(u_RefractionTexture, projCoord))) * refrdot;
#endif
#ifdef APPLY_REFLECTION
	refl = (myhalf3(qf_texture(u_ReflectionTexture, projCoord))) * refldot;
#endif

#else

#ifdef APPLY_REFRACTION
	refr = (myhalf3(qf_texture(u_RefractionTexture, projCoord)));
#endif
#ifdef APPLY_REFLECTION
	refl = (myhalf3(qf_texture(u_ReflectionTexture, projCoord)));
#endif

#endif // APPLY_EYEDOT

	// add reflection and refraction
#ifdef APPLY_DISTORTION_ALPHA
	color = myhalf3(qf_FrontColor.rgb) + myhalf3(mix (refr, refl, myhalf(qf_FrontColor.a)));
#else
	color = myhalf3(qf_FrontColor.rgb) + refr + refl;
#endif

#ifdef APPLY_GREYSCALE
	qf_FragColor = vec4(vec3(Greyscale(color)),1.0);
#else
	qf_FragColor = vec4(vec3(color),1.0);
#endif
}

#endif // FRAGMENT_SHADER

[fragment shader]
#version 130

#define QF_GLSL_VERSION 130
#define FRAGMENT_SHADER
#if !defined(myhalf)
//#if !defined(__GLSL_CG_DATA_TYPES)
#define myhalf float
#define myhalf2 vec2
#define myhalf3 vec3
#define myhalf4 vec4
//#else
//#define myhalf half
//#define myhalf2 half2
//#define myhalf3 half3
//#define myhalf4 half4
//#endif
#endif

#if QF_GLSL_VERSION >= 130
  precision highp float;

# ifdef VERTEX_SHADER
   out myhalf4 qf_FrontColor;
#  define qf_varying out
#  define qf_attribute in
# endif
# ifdef FRAGMENT_SHADER
   in myhalf4 qf_FrontColor;
   out myhalf4	qf_FragColor;
#  define qf_varying in
#  define qf_attribute in
# endif

# define qf_texture texture
# define qf_textureCube texture
# define qf_textureLod textureLod
# define qf_textureOffset(a,b,c,d) textureOffset(a,b,ivec2(c,d))
# define qf_shadow texture
#else
# ifdef VERTEX_SHADER
#  define qf_FrontColor gl_FrontColor
#  define qf_varying varying
#  define qf_attribute attribute
# endif

# ifdef FRAGMENT_SHADER
#  define qf_FrontColor gl_Color
#  define qf_FragColor gl_FragColor
#  define qf_varying varying
#  define qf_attribute attribute
# endif
# define qf_texture texture2D
# define qf_textureLod texture2DLod
# define qf_textureCube textureCube
# define qf_textureOffset(a,b,c,d) texture2DOffset(a,b,ivec2(c,d))
# define qf_shadow shadow2D
#endif

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif
#ifndef M_TWOPI
#define M_TWOPI 6.28318530717958647692
#endif

#ifndef MAX_UNIFORM_BONES
#define MAX_UNIFORM_BONES 100
#endif

#ifndef MAX_UNIFORM_INSTANCES
#define MAX_UNIFORM_INSTANCES 40
#endif
uniform vec3 u_QF_ViewOrigin;
uniform mat3 u_QF_ViewAxis;
uniform float u_QF_MirrorSide;
uniform vec3 u_QF_EntityOrigin;
uniform float u_QF_ShaderTime;

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif
#ifndef M_TWOPI
#define M_TWOPI 6.28318530717958647692
#endif

#ifndef WAVE_SIN
float QF_WaveFunc_Sin(float x)
{
x -= floor(x);
return sin(x * M_TWOPI);
}
float QF_WaveFunc_Triangle(float x)
{
x -= floor(x);
return step(x, 0.25) * x * 4.0 + (2.0 - 4.0 * step(0.25, x) * step(x, 0.75) * x) + ((step(0.75, x) * x - 0.75) * 4.0 - 1.0);
}
float QF_WaveFunc_Square(float x)
{
x -= floor(x);
return step(x, 0.5) * 2.0 - 1.0;
}
float QF_WaveFunc_Sawtooth(float x)
{
x -= floor(x);
return x;
}
float QF_QF_WaveFunc_InverseSawtooth(float x)
{
x -= floor(x);
return 1.0 - x;
}

#define WAVE_SIN(time,base,amplitude,phase,freq) (((base)+(amplitude)*QF_WaveFunc_Sin((phase)+(time)*(freq))))
#define WAVE_TRIANGLE(time,base,amplitude,phase,freq) (((base)+(amplitude)*QF_WaveFunc_Triangle((phase)+(time)*(freq))))
#define WAVE_SQUARE(time,base,amplitude,phase,freq) (((base)+(amplitude)*QF_WaveFunc_Square((phase)+(time)*(freq))))
#define WAVE_SAWTOOTH(time,base,amplitude,phase,freq) (((base)+(amplitude)*QF_WaveFunc_Sawtooth((phase)+(time)*(freq))))
#define WAVE_INVERSESAWTOOTH(time,base,amplitude,phase,freq) (((base)+(amplitude)*QF_QF_WaveFunc_InverseSawtooth((phase)+(time)*(freq))))
#endif

#ifdef VERTEX_SHADER
attribute vec4 a_BonesIndices;
attribute vec4 a_BonesWeights;

uniform vec4 u_QF_DualQuats[MAX_UNIFORM_BONES*2];

#if defined(DUAL_QUAT_TRANSFORM_NORMALS)
#if defined(DUAL_QUAT_TRANSFORM_TANGENT)
void QF_VertexDualQuatsTransform(const int numWeights, inout vec4 Position, inout vec3 Normal, inout vec3 Tangent)
#else
void QF_VertexDualQuatsTransform(const int numWeights, inout vec4 Position, inout vec3 Normal)
#endif
#else
void QF_VertexDualQuatsTransform(const int numWeights, inout vec4 Position)
#endif
{
int index;
vec4 Indices = a_BonesIndices;
vec4 Weights = a_BonesWeights;
vec4 Indices_2 = Indices * 2.0;
vec4 DQReal, DQDual;

index = int(Indices_2.x);
DQReal = u_QF_DualQuats[index+0];
DQDual = u_QF_DualQuats[index+1];

if (numWeights > 1)
{
DQReal *= Weights.x;
DQDual *= Weights.x;

vec4 DQReal1, DQDual1;
float scale;

index = int(Indices_2.y);
DQReal1 = u_QF_DualQuats[index+0];
DQDual1 = u_QF_DualQuats[index+1];
// antipodality handling
scale = (dot(DQReal1, DQReal) < 0.0 ? -1.0 : 1.0) * Weights.y;
DQReal += DQReal1 * scale;
DQDual += DQDual1 * scale;

if (numWeights > 2)
{
index = int(Indices_2.z);
DQReal1 = u_QF_DualQuats[index+0];
DQDual1 = u_QF_DualQuats[index+1];
// antipodality handling
scale = (dot(DQReal1, DQReal) < 0.0 ? -1.0 : 1.0) * Weights.z;
DQReal += DQReal1 * scale;
DQDual += DQDual1 * scale;

if (numWeights > 3)
{
index = int(Indices_2.w);
DQReal1 = u_QF_DualQuats[index+0];
DQDual1 = u_QF_DualQuats[index+1];
// antipodality handling
scale = (dot(DQReal1, DQReal) < 0.0 ? -1.0 : 1.0) * Weights.w;
DQReal += DQReal1 * scale;
DQDual += DQDual1 * scale;
}
}
}

float len = length(DQReal);
DQReal /= len;
DQDual /= len;

Position.xyz = (cross(DQReal.xyz, cross(DQReal.xyz, Position.xyz) + Position.xyz*DQReal.w + DQDual.xyz) + DQDual.xyz*DQReal.w - DQReal.xyz*DQDual.w)*2.0 + Position.xyz;

#ifdef DUAL_QUAT_TRANSFORM_NORMALS
Normal = cross(DQReal.xyz, cross(DQReal.xyz, Normal) + Normal*DQReal.w)*2.0 + Normal;
#endif

#ifdef DUAL_QUAT_TRANSFORM_TANGENT
Tangent = cross(DQReal.xyz, cross(DQReal.xyz, Tangent) + Tangent*DQReal.w)*2.0 + Tangent;
#endif
}

// use defines to overload the transform function

#define DUAL_QUAT_TRANSFORM_NORMALS
#if defined(DUAL_QUAT_TRANSFORM_NORMALS)
#if defined(DUAL_QUAT_TRANSFORM_TANGENT)
void QF_VertexDualQuatsTransform(const int numWeights, inout vec4 Position, inout vec3 Normal, inout vec3 Tangent)
#else
void QF_VertexDualQuatsTransform(const int numWeights, inout vec4 Position, inout vec3 Normal)
#endif
#else
void QF_VertexDualQuatsTransform(const int numWeights, inout vec4 Position)
#endif
{
int index;
vec4 Indices = a_BonesIndices;
vec4 Weights = a_BonesWeights;
vec4 Indices_2 = Indices * 2.0;
vec4 DQReal, DQDual;

index = int(Indices_2.x);
DQReal = u_QF_DualQuats[index+0];
DQDual = u_QF_DualQuats[index+1];

if (numWeights > 1)
{
DQReal *= Weights.x;
DQDual *= Weights.x;

vec4 DQReal1, DQDual1;
float scale;

index = int(Indices_2.y);
DQReal1 = u_QF_DualQuats[index+0];
DQDual1 = u_QF_DualQuats[index+1];
// antipodality handling
scale = (dot(DQReal1, DQReal) < 0.0 ? -1.0 : 1.0) * Weights.y;
DQReal += DQReal1 * scale;
DQDual += DQDual1 * scale;

if (numWeights > 2)
{
index = int(Indices_2.z);
DQReal1 = u_QF_DualQuats[index+0];
DQDual1 = u_QF_DualQuats[index+1];
// antipodality handling
scale = (dot(DQReal1, DQReal) < 0.0 ? -1.0 : 1.0) * Weights.z;
DQReal += DQReal1 * scale;
DQDual += DQDual1 * scale;

if (numWeights > 3)
{
index = int(Indices_2.w);
DQReal1 = u_QF_DualQuats[index+0];
DQDual1 = u_QF_DualQuats[index+1];
// antipodality handling
scale = (dot(DQReal1, DQReal) < 0.0 ? -1.0 : 1.0) * Weights.w;
DQReal += DQReal1 * scale;
DQDual += DQDual1 * scale;
}
}
}

float len = length(DQReal);
DQReal /= len;
DQDual /= len;

Position.xyz = (cross(DQReal.xyz, cross(DQReal.xyz, Position.xyz) + Position.xyz*DQReal.w + DQDual.xyz) + DQDual.xyz*DQReal.w - DQReal.xyz*DQDual.w)*2.0 + Position.xyz;

#ifdef DUAL_QUAT_TRANSFORM_NORMALS
Normal = cross(DQReal.xyz, cross(DQReal.xyz, Normal) + Normal*DQReal.w)*2.0 + Normal;
#endif

#ifdef DUAL_QUAT_TRANSFORM_TANGENT
Tangent = cross(DQReal.xyz, cross(DQReal.xyz, Tangent) + Tangent*DQReal.w)*2.0 + Tangent;
#endif
}

#define DUAL_QUAT_TRANSFORM_TANGENT
#if defined(DUAL_QUAT_TRANSFORM_NORMALS)
#if defined(DUAL_QUAT_TRANSFORM_TANGENT)
void QF_VertexDualQuatsTransform(const int numWeights, inout vec4 Position, inout vec3 Normal, inout vec3 Tangent)
#else
void QF_VertexDualQuatsTransform(const int numWeights, inout vec4 Position, inout vec3 Normal)
#endif
#else
void QF_VertexDualQuatsTransform(const int numWeights, inout vec4 Position)
#endif
{
int index;
vec4 Indices = a_BonesIndices;
vec4 Weights = a_BonesWeights;
vec4 Indices_2 = Indices * 2.0;
vec4 DQReal, DQDual;

index = int(Indices_2.x);
DQReal = u_QF_DualQuats[index+0];
DQDual = u_QF_DualQuats[index+1];

if (numWeights > 1)
{
DQReal *= Weights.x;
DQDual *= Weights.x;

vec4 DQReal1, DQDual1;
float scale;

index = int(Indices_2.y);
DQReal1 = u_QF_DualQuats[index+0];
DQDual1 = u_QF_DualQuats[index+1];
// antipodality handling
scale = (dot(DQReal1, DQReal) < 0.0 ? -1.0 : 1.0) * Weights.y;
DQReal += DQReal1 * scale;
DQDual += DQDual1 * scale;

if (numWeights > 2)
{
index = int(Indices_2.z);
DQReal1 = u_QF_DualQuats[index+0];
DQDual1 = u_QF_DualQuats[index+1];
// antipodality handling
scale = (dot(DQReal1, DQReal) < 0.0 ? -1.0 : 1.0) * Weights.z;
DQReal += DQReal1 * scale;
DQDual += DQDual1 * scale;

if (numWeights > 3)
{
index = int(Indices_2.w);
DQReal1 = u_QF_DualQuats[index+0];
DQDual1 = u_QF_DualQuats[index+1];
// antipodality handling
scale = (dot(DQReal1, DQReal) < 0.0 ? -1.0 : 1.0) * Weights.w;
DQReal += DQReal1 * scale;
DQDual += DQDual1 * scale;
}
}
}

float len = length(DQReal);
DQReal /= len;
DQDual /= len;

Position.xyz = (cross(DQReal.xyz, cross(DQReal.xyz, Position.xyz) + Position.xyz*DQReal.w + DQDual.xyz) + DQDual.xyz*DQReal.w - DQReal.xyz*DQDual.w)*2.0 + Position.xyz;

#ifdef DUAL_QUAT_TRANSFORM_NORMALS
Normal = cross(DQReal.xyz, cross(DQReal.xyz, Normal) + Normal*DQReal.w)*2.0 + Normal;
#endif

#ifdef DUAL_QUAT_TRANSFORM_TANGENT
Tangent = cross(DQReal.xyz, cross(DQReal.xyz, Tangent) + Tangent*DQReal.w)*2.0 + Tangent;
#endif
}

#endif
#ifdef VERTEX_SHADER
#ifdef APPLY_INSTANCED_ATTRIB_TRASNFORMS
attribute vec4 a_InstanceQuat;
attribute vec4 a_InstancePosAndScale;
#elif defined(GL_ARB_draw_instanced)

uniform vec4 u_QF_InstancePoints[MAX_UNIFORM_INSTANCES*2];

#define a_InstanceQuat u_QF_InstancePoints[gl_InstanceID*2]
#define a_InstancePosAndScale u_QF_InstancePoints[gl_InstanceID*2+1]
#else
uniform vec4 u_QF_InstancePoints[2];
#define a_InstanceQuat u_QF_InstancePoints[0]
#define a_InstancePosAndScale u_QF_InstancePoints[1]
#endif

void QF_InstancedTransform(inout vec4 Position, inout vec3 Normal)
{
Position.xyz = (cross(a_InstanceQuat.xyz, cross(a_InstanceQuat.xyz, Position.xyz) + Position.xyz*a_InstanceQuat.w)*2.0 + Position.xyz) *
 a_InstancePosAndScale.w + a_InstancePosAndScale.xyz;
Normal = cross(a_InstanceQuat.xyz, cross(a_InstanceQuat.xyz, Normal) + Normal*a_InstanceQuat.w)*2.0 + Normal;
}

#endif
#define QF_LatLong2Norm(ll) vec3(cos((ll).y) * sin((ll).x), sin((ll).y) * sin((ll).x), cos((ll).x))


#define DRAWFLAT_NORMAL_STEP	0.5		// floor or ceiling if < abs(normal.z)
uniform mat4 u_ModelViewMatrix;
uniform mat4 u_ModelViewProjectionMatrix;

uniform float u_ShaderTime;

uniform vec3 u_ViewOrigin;
uniform mat3 u_ViewAxis;

uniform vec3 u_EntityDist;
uniform vec3 u_EntityOrigin;
uniform myhalf4 u_EntityColor;

uniform myhalf4 u_ConstColor;
uniform myhalf4 u_RGBGenFuncArgs, u_AlphaGenFuncArgs;
uniform myhalf3 u_LightstyleColor[4]; // lightstyle colors

uniform myhalf3 u_LightAmbient;
uniform myhalf3 u_LightDiffuse;
uniform vec3 u_LightDir;

uniform myhalf2 u_BlendMix;

uniform vec2 u_TextureMatrix[3];
#define TextureMatrix2x3Mul(m2x3,tc) vec2(dot((m2x3)[0],(tc)) + (m2x3)[2][0], dot((m2x3)[1],(tc)) + (m2x3)[2][1])

uniform float u_MirrorSide;

uniform float u_ZNear, u_ZFar;

uniform ivec4 u_Viewport; // x, y, width, height

uniform vec4 u_TextureParams;

uniform myhalf u_SoftParticlesScale;
myhalf3 Greyscale(myhalf3 color)
{
	return myhalf3(dot(color, myhalf3(0.299, 0.587, 0.114)));
}


qf_varying vec4 v_TexCoord;
qf_varying vec4 v_ProjVector;
#ifdef APPLY_EYEDOT
qf_varying vec3 v_EyeVector;
#endif

#ifdef VERTEX_SHADER
#ifdef VERTEX_SHADER
qf_attribute vec4 a_Position;
qf_attribute vec4 a_SVector;
qf_attribute vec4 a_Normal;
qf_attribute vec4 a_Color;
qf_attribute vec2 a_TexCoord;
qf_attribute vec2 a_LightmapCoord0, a_LightmapCoord1, a_LightmapCoord2, a_LightmapCoord3;
#endif
void TransformVerts(inout vec4 Position, inout vec3 Normal, inout vec2 TexCoord)
{
#ifdef NUM_BONE_INFLUENCES
	QF_VertexDualQuatsTransform(NUM_BONE_INFLUENCES, Position, Normal);
#endif

#ifdef APPLY_DEFORMVERTS
	QF_DeformVerts(Position, Normal, TexCoord);
#endif

#ifdef APPLY_INSTANCED_TRANSFORMS
	QF_InstancedTransform(Position, Normal);
#endif
}

void TransformVerts(inout vec4 Position, inout vec3 Normal, inout vec3 Tangent, inout vec2 TexCoord)
{
#ifdef NUM_BONE_INFLUENCES
	QF_VertexDualQuatsTransform(NUM_BONE_INFLUENCES, Position, Normal, Tangent);
#endif

#ifdef APPLY_DEFORMVERTS
	QF_DeformVerts(Position, Normal, TexCoord);
#endif

#ifdef APPLY_INSTANCED_TRANSFORMS
	QF_InstancedTransform(Position, Normal);
#endif
}
myhalf4 VertexRGBGen(in vec4 Position, in vec3 Normal, in myhalf4 VertexColor)
{
#if defined(APPLY_RGB_DISTANCERAMP) || defined(APPLY_ALPHA_DISTANCERAMP)
#define DISTANCERAMP(x1,x2,y1,y2) ((y2 - y1) / (x2 - x1) * (clamp(myhalf(dot(u_EntityDist - Position.xyz, Normal)),0.0,x2) - x1) + y1)
#endif

#if defined(APPLY_RGB_CONST) && defined(APPLY_ALPHA_CONST)
	myhalf4 Color = u_ConstColor;
#else
	myhalf4 Color = myhalf4(1.0);

#if defined(APPLY_RGB_CONST)
	Color.rgb = u_ConstColor.rgb;
#elif defined(APPLY_RGB_VERTEX)
	Color.rgb = VertexColor.rgb;
#elif defined(APPLY_RGB_ONE_MINUS_VERTEX)
	Color.rgb = myhalf3(1.0) - VertexColor.rgb;
#elif defined(APPLY_RGB_GEN_DIFFUSELIGHT)
	Color.rgb = myhalf3(u_LightAmbient + max(dot(u_LightDir, Normal), 0.0) * u_LightDiffuse);
#endif

#if defined(APPLY_ALPHA_CONST)
	Color.a = u_ConstColor.a;
#elif defined(APPLY_ALPHA_VERTEX)
	Color.a = VertexColor.a;
#elif defined(APPLY_ALPHA_ONE_MINUS_VERTEX)
	Color.a = 1.0 - VertexColor.a;
#endif

#endif

#ifdef APPLY_RGB_DISTANCERAMP
	Color.rgb *= DISTANCERAMP(u_RGBGenFuncArgs[2], u_RGBGenFuncArgs[3], u_RGBGenFuncArgs[0], u_RGBGenFuncArgs[1]);
#endif

#ifdef APPLY_ALPHA_DISTANCERAMP
	Color.a *= DISTANCERAMP(u_AlphaGenFuncArgs[2], u_AlphaGenFuncArgs[3], u_AlphaGenFuncArgs[0], u_AlphaGenFuncArgs[1]);
#endif

	return Color;
#if defined(APPLY_RGB_DISTANCERAMP) || defined(APPLY_ALPHA_DISTANCERAMP)
#undef DISTANCERAMP
#endif
}


#ifdef APPLY_EYEDOT
uniform float u_FrontPlane;
#endif

void main(void)
{
	vec4 Position = a_Position;
	vec3 Normal = a_Normal.xyz;
	vec2 TexCoord = a_TexCoord;
	vec3 Tangent = a_SVector.xyz;
	float TangentDir = a_SVector.w;
	myhalf4 inColor = myhalf4(a_Color);

	TransformVerts(Position, Normal, TexCoord);

	qf_FrontColor = vec4(VertexRGBGen(Position, Normal, inColor));

	v_TexCoord.st = TextureMatrix2x3Mul(u_TextureMatrix, TexCoord);

	vec2 textureMatrix3_[3];
	textureMatrix3_[0] =  u_TextureMatrix[0];
	textureMatrix3_[1] =  u_TextureMatrix[1];
	textureMatrix3_[2] = -u_TextureMatrix[2];
	v_TexCoord.pq = TextureMatrix2x3Mul(textureMatrix3_, TexCoord);

#ifdef APPLY_EYEDOT
	mat3 v_StrMatrix;
	v_StrMatrix[0] = Tangent;
	v_StrMatrix[2] = Normal;
	v_StrMatrix[1] = TangentDir * cross(Normal, Tangent);

	vec3 EyeVectorWorld = (u_ViewOrigin - Position.xyz) * u_FrontPlane;
	v_EyeVector = EyeVectorWorld * v_StrMatrix;
#endif

	gl_Position = u_ModelViewProjectionMatrix * Position;
	v_ProjVector = gl_Position;
}

#endif // VERTEX_SHADER

#ifdef FRAGMENT_SHADER
// Fragment shader

#ifdef APPLY_DUDV
uniform sampler2D u_DuDvMapTexture;
#endif

#ifdef APPLY_EYEDOT
uniform sampler2D u_NormalmapTexture;
#endif
uniform sampler2D u_ReflectionTexture;
uniform sampler2D u_RefractionTexture;

void main(void)
{
	myhalf3 color;

#ifdef APPLY_DUDV
	vec3 displacement = vec3(qf_texture(u_DuDvMapTexture, vec2(v_TexCoord.pq) * vec2(0.25)));
	vec2 coord = vec2(v_TexCoord.st) + vec2(displacement) * vec2 (0.2);

	vec3 fdist = vec3 (normalize(vec3(qf_texture(u_DuDvMapTexture, coord)) - vec3 (0.5))) * vec3(0.005);
#else
	vec3 fdist = vec3(0.0);
#endif

	// get projective texcoords
	float scale = float(1.0 / float(v_ProjVector.w));
	float inv2NW = u_TextureParams.z * 0.5; // .z - inverse width
	float inv2NH = u_TextureParams.w * 0.5; // .w - inverse height
	vec2 projCoord = (vec2(v_ProjVector.xy) * scale + vec2 (1.0)) * vec2 (0.5) + vec2(fdist.xy);
	projCoord.s = float (clamp (float(projCoord.s), inv2NW, 1.0 - inv2NW));
	projCoord.t = float (clamp (float(projCoord.t), inv2NH, 1.0 - inv2NH));

	myhalf3 refr = myhalf3(0.0);
	myhalf3 refl = myhalf3(0.0);

#ifdef APPLY_EYEDOT
	// calculate dot product between the surface normal and eye vector
	// great for simulating qf_varying water translucency based on the view angle
	myhalf3 surfaceNormal = normalize(myhalf3(qf_texture(u_NormalmapTexture, coord)) - myhalf3 (0.5));
	vec3 eyeNormal = normalize(myhalf3(v_EyeVector));

	float refrdot = float(dot(surfaceNormal, eyeNormal));
	//refrdot = float (clamp (refrdot, 0.0, 1.0));
	float refldot = 1.0 - refrdot;
	// get refraction and reflection

#ifdef APPLY_REFRACTION
	refr = (myhalf3(qf_texture(u_RefractionTexture, projCoord))) * refrdot;
#endif
#ifdef APPLY_REFLECTION
	refl = (myhalf3(qf_texture(u_ReflectionTexture, projCoord))) * refldot;
#endif

#else

#ifdef APPLY_REFRACTION
	refr = (myhalf3(qf_texture(u_RefractionTexture, projCoord)));
#endif
#ifdef APPLY_REFLECTION
	refl = (myhalf3(qf_texture(u_ReflectionTexture, projCoord)));
#endif

#endif // APPLY_EYEDOT

	// add reflection and refraction
#ifdef APPLY_DISTORTION_ALPHA
	color = myhalf3(qf_FrontColor.rgb) + myhalf3(mix (refr, refl, myhalf(qf_FrontColor.a)));
#else
	color = myhalf3(qf_FrontColor.rgb) + refr + refl;
#endif

#ifdef APPLY_GREYSCALE
	qf_FragColor = vec4(vec3(Greyscale(color)),1.0);
#else
	qf_FragColor = vec4(vec3(color),1.0);
#endif
}

#endif // FRAGMENT_SHADER

