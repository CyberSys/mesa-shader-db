[require]
GLSL >= 1.10

[vertex shader]
#ifdef GL_ES
precision mediump float;
#endif
attribute vec4 v_position;
attribute vec4 v_texcoord;
varying vec2 source_texture;

void main()
{
    gl_Position = v_position;
    source_texture = v_texcoord.xy;
}

[fragment shader]
#ifdef GL_ES
precision mediump float;
#endif
uniform mat3 transform_mat;
uniform int repeat_type;
uniform float A_value;
uniform vec2 c1;
uniform float r1;
uniform vec2 c2;
uniform float r2;
varying vec2 source_texture;

vec4 get_color(float stop_len);

int t_invalid;

float get_stop_len()
{
    float t = 0.0;
    float sqrt_value;
    t_invalid = 0;
    
    vec3 tmp = vec3(source_texture.x, source_texture.y, 1.0);
    vec3 source_texture_trans = transform_mat * tmp;
    source_texture_trans.xy = source_texture_trans.xy/source_texture_trans.z;
    float B_value = (source_texture_trans.x - c1.x) * (c2.x - c1.x)
                     + (source_texture_trans.y - c1.y) * (c2.y - c1.y)
                     + r1 * (r2 - r1);
    float C_value = (source_texture_trans.x - c1.x) * (source_texture_trans.x - c1.x)
                     + (source_texture_trans.y - c1.y) * (source_texture_trans.y - c1.y)
                     - r1*r1;
    if(abs(A_value) < 0.00001) {
        if(B_value == 0.0) {
            t_invalid = 1;
            return t;
        }
        t = 0.5 * C_value / B_value;    } else {
        sqrt_value = B_value * B_value - A_value * C_value;
        if(sqrt_value < 0.0) {
            t_invalid = 1;
            return t;
        }
        sqrt_value = sqrt(sqrt_value);
        t = (B_value + sqrt_value) / A_value;
    }
    if(repeat_type == 0) {
        if((t <= 0.0) || (t > 1.0))
            t = (B_value - sqrt_value) / A_value;
        
        if((t <= 0.0) || (t > 1.0)) {
            t_invalid = 1;
            return t;
        }
    } else {
        if(t * (r2 - r1) <= -1.0 * r1)
            t = (B_value - sqrt_value) / A_value;
        
        if(t * (r2 -r1) <= -1.0 * r1) {
            t_invalid = 1;
            return t;
        }
    }
    
    if(repeat_type == 1){
        t = fract(t);
    }
    
    if(repeat_type == 3) {
        t = abs(fract(t * 0.5 + 0.5) * 2.0 - 1.0);
    }
    
    return t;
}

void main()
{
    float stop_len = get_stop_len();
    if(t_invalid == 1) {
        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
    } else {
        gl_FragColor = get_color(stop_len);
    }
}

#ifdef GL_ES
precision mediump float;
#endif
uniform int n_stop;
uniform float stops[18];
uniform vec4 stop_colors[18];
vec4 get_color(float stop_len)
{
    int i = 0;
    float new_alpha; 
    vec4 gradient_color;
    float percentage; 
    for(i = 0; i < n_stop - 1; i++) {
        if(stop_len < stops[i])
            break; 
    }
    
    if(stops[i] - stops[i-1] > 2.0)
        percentage = 0.0;
    else if(stops[i] - stops[i-1] < 0.000001)
        percentage = 0.0;
    else 
        percentage = (stop_len - stops[i-1])/(stops[i] - stops[i-1]);
    new_alpha = percentage * stop_colors[i].a + 
                       (1.0-percentage) * stop_colors[i-1].a; 
    gradient_color = vec4((percentage * stop_colors[i].rgb 
                          + (1.0-percentage) * stop_colors[i-1].rgb)*new_alpha, 
                          new_alpha);
    
    return gradient_color;
}


