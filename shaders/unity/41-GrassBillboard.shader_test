# Built-in shader from Unity 5.0.0b19:
# Hidden/TerrainEngine/Details/BillboardWavingDoublePass
# internal variant: DIRECTIONAL DIRLIGHTMAP_OFF DYNAMICLIGHTMAP_OFF LIGHTMAP_OFF SHADOWS_SCREEN
# This shader GLSL dump is put under MIT license
[require]
GLSL >= 1.10

[vertex shader]
uniform vec4 _ProjectionParams;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _World2Object;
uniform vec4 _WavingTint;
uniform vec4 _WaveAndDistance;
uniform vec4 _CameraPosition;
uniform vec3 _CameraRight;
uniform vec3 _CameraUp;
uniform vec4 _MainTex_ST;
attribute vec4 TANGENT;
varying vec2 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_COLOR0;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
void main ()
{
  vec4 pos_1;
  pos_1 = gl_Vertex;
  vec2 offset_2;
  offset_2 = TANGENT.xy;
  vec3 tmpvar_3;
  tmpvar_3 = (gl_Vertex.xyz - _CameraPosition.xyz);
  float tmpvar_4;
  tmpvar_4 = dot (tmpvar_3, tmpvar_3);
  if ((tmpvar_4 > _WaveAndDistance.w)) {
    offset_2 = vec2(0.0, 0.0);
  };
  pos_1.xyz = (gl_Vertex.xyz + (offset_2.x * _CameraRight));
  pos_1.xyz = (pos_1.xyz + (offset_2.y * _CameraUp));
  vec4 vertex_5;
  vertex_5.yw = pos_1.yw;
  vec4 color_6;
  color_6.xyz = gl_Color.xyz;
  vec3 waveMove_7;
  vec4 tmpvar_8;
  tmpvar_8 = ((fract(
    (((pos_1.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y)) + (pos_1.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y))) + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)))
  ) * 6.40885) - 3.14159);
  vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_8);
  vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * tmpvar_9);
  vec4 tmpvar_12;
  tmpvar_12 = (((tmpvar_8 + 
    (tmpvar_10 * -0.161616)
  ) + (tmpvar_11 * 0.0083333)) + ((tmpvar_11 * tmpvar_9) * -0.00019841));
  vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_13);
  vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * TANGENT.y);
  waveMove_7.y = 0.0;
  waveMove_7.x = dot (tmpvar_15, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_7.z = dot (tmpvar_15, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_5.xz = (pos_1.xz - (waveMove_7.xz * _WaveAndDistance.z));
  vec3 tmpvar_16;
  tmpvar_16 = (vertex_5.xyz - _CameraPosition.xyz);
  color_6.w = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_16, tmpvar_16))
  ) * _CameraPosition.w), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17.xyz = ((2.0 * mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(
    (dot (tmpvar_14, vec4(0.6742, 0.6742, 0.26968, 0.13484)) * 0.7)
  ))) * gl_Color.xyz);
  tmpvar_17.w = color_6.w;
  vec4 tmpvar_18;
  tmpvar_18 = (gl_ModelViewProjectionMatrix * vertex_5);
  vec4 v_19;
  v_19.x = _World2Object[0].x;
  v_19.y = _World2Object[1].x;
  v_19.z = _World2Object[2].x;
  v_19.w = _World2Object[3].x;
  vec4 v_20;
  v_20.x = _World2Object[0].y;
  v_20.y = _World2Object[1].y;
  v_20.z = _World2Object[2].y;
  v_20.w = _World2Object[3].y;
  vec4 v_21;
  v_21.x = _World2Object[0].z;
  v_21.y = _World2Object[1].z;
  v_21.z = _World2Object[2].z;
  v_21.w = _World2Object[3].z;
  vec3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * gl_Normal.x)
   + 
    (v_20.xyz * gl_Normal.y)
  ) + (v_21.xyz * gl_Normal.z)));
  vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_22;
  vec3 x2_24;
  vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_23);
  x1_25.y = dot (unity_SHAg, tmpvar_23);
  x1_25.z = dot (unity_SHAb, tmpvar_23);
  vec4 tmpvar_26;
  tmpvar_26 = (tmpvar_22.xyzz * tmpvar_22.yzzx);
  x2_24.x = dot (unity_SHBr, tmpvar_26);
  x2_24.y = dot (unity_SHBg, tmpvar_26);
  x2_24.z = dot (unity_SHBb, tmpvar_26);
  vec4 o_27;
  vec4 tmpvar_28;
  tmpvar_28 = (tmpvar_18 * 0.5);
  vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_28.x;
  tmpvar_29.y = (tmpvar_28.y * _ProjectionParams.x);
  o_27.xy = (tmpvar_29 + tmpvar_28.w);
  o_27.zw = tmpvar_18.zw;
  gl_Position = tmpvar_18;
  xlv_TEXCOORD0 = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_22;
  xlv_COLOR0 = tmpvar_17;
  xlv_TEXCOORD2 = ((x1_25 + x2_24) + (unity_SHC.xyz * (
    (tmpvar_22.x * tmpvar_22.x)
   - 
    (tmpvar_22.y * tmpvar_22.y)
  )));
  xlv_TEXCOORD3 = o_27;
}

[fragment shader]
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform float _Cutoff;
varying vec2 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_COLOR0;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
void main ()
{
  vec4 c_1;
  vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  float x_3;
  x_3 = (tmpvar_2.w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  c_1.w = 0.0;
  c_1.xyz = (tmpvar_2.xyz * xlv_TEXCOORD2);
  vec4 c_4;
  c_4.xyz = ((tmpvar_2.xyz * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x) * 2.0));
  c_4.w = (tmpvar_2.w * xlv_COLOR0.w);
  c_1.xyz = (c_1 + c_4).xyz;
  c_1.w = 1.0;
  gl_FragData[0] = c_1;
}

