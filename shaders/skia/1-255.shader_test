[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 ucolor0_Stage2;
uniform vec4 ucolor1_Stage2;
uniform vec4 ucolor2_Stage2;
uniform vec4 ucolor3_Stage2;
uniform vec4 ucolor4_Stage2;
uniform vec4 ucolor5_Stage2;
uniform sampler2D uTextureSampler_0_Stage1;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
flat in vec4 vcolor_Stage0;
vec4 TextureEffect_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    _output = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0) * _input;
    return _output;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
    }
    vec4 output_Stage1;
    {
        output_Stage1 = TextureEffect_Stage1_c0_c0(vec4(1.0));
        output_Stage1.xyz *= outputColor_Stage0.xyz;
        output_Stage1 *= outputColor_Stage0.w;
    }
    vec4 output_Stage2;
    {
        output_Stage2 = output_Stage1;
        float alpha = 255.0 * output_Stage2.w;
        if (alpha < 0.5) {
            output_Stage2 = ucolor0_Stage2;
        } else if (alpha < 1.5) {
            output_Stage2 = ucolor1_Stage2;
        } else if (alpha < 2.5) {
            output_Stage2 = ucolor2_Stage2;
        } else if (alpha < 3.5) {
            output_Stage2 = ucolor3_Stage2;
        } else if (alpha < 4.5) {
            output_Stage2 = ucolor4_Stage2;
        } else {
            output_Stage2 = ucolor5_Stage2;
        }
    }
    {
        sk_FragColor = output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 position;
in vec4 color;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
flat out vec4 vcolor_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(localCoord, 1.0)).xy;
    vcolor_Stage0 = color;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

