[require]
GLSL >= 1.40
GL_KHR_blend_equation_advanced

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 urectUniform_Stage1;
uniform vec4 urectUniform_Stage2;
uniform float uinnerThreshold_Stage3_c0_c0;
uniform float uouterThreshold_Stage3_c0_c0;
uniform vec2 uImageIncrement_Stage3_c1_c0;
uniform vec2 uBounds_Stage3_c1_c0;
uniform vec4 uKernel_Stage3_c1_c0[6];
uniform vec2 uScale_Stage4;
uniform vec4 uTexDom_Stage4;
uniform vec3 uDecalParams_Stage4;
uniform vec2 uImageIncrement_Stage5;
uniform float uSurfaceScale_Stage5;
uniform vec3 uLightColor_Stage5;
uniform float uKS_Stage5;
uniform float uShininess_Stage5;
uniform vec4 uTexDom_Stage5;
uniform vec3 uDecalParams_Stage5;
uniform vec3 uLightLocation_Stage5;
uniform sampler2D uTextureSampler_0_Stage3;
uniform sampler2D uTextureSampler_1_Stage3;
uniform sampler2D uTextureSampler_0_Stage4;
uniform sampler2D uTextureSampler_1_Stage4;
uniform sampler2D uTextureSampler_0_Stage5;
noperspective in vec4 vcolor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vTransformedCoords_3_Stage0;
noperspective in vec2 vTransformedCoords_4_Stage0;
vec4 AlphaThresholdFragmentProcessor_Stage3_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 color = _input;
    vec4 mask_color = texture(uTextureSampler_0_Stage3, vTransformedCoords_0_Stage0);
    if (mask_color.w < 0.5) {
        if (color.w > uouterThreshold_Stage3_c0_c0) {
            float scale = uouterThreshold_Stage3_c0_c0 / color.w;
            color.xyz *= scale;
            color.w = uouterThreshold_Stage3_c0_c0;
        }
    } else if (color.w < uinnerThreshold_Stage3_c0_c0) {
        float scale = uinnerThreshold_Stage3_c0_c0 / max(0.0010000000474974513, color.w);
        color.xyz *= scale;
        color.w = uinnerThreshold_Stage3_c0_c0;
    }
    _output = color;
    return _output;
}
vec4 GaussianConvolution_Stage3_c1_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_1_Stage0 - 11.0 * uImageIncrement_Stage3_c1_c0;
    vec2 coordSampled = vec2(0.0, 0.0);
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[0].x;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[0].y;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[0].z;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[0].w;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[1].x;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[1].y;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[1].z;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[1].w;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[2].x;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[2].y;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[2].z;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[2].w;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[3].x;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[3].y;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[3].z;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[3].w;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[4].x;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[4].y;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[4].z;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[4].w;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[5].x;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[5].y;
    coord += uImageIncrement_Stage3_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage3_c1_c0.x, uBounds_Stage3_c1_c0.y - uBounds_Stage3_c1_c0.x) + uBounds_Stage3_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage3, coordSampled) * uKernel_Stage3_c1_c0[5].z;
    coord += uImageIncrement_Stage3_c1_c0;
    _output *= _input;
    return _output;
}
vec4 light_Stage5(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    vec3 halfDir = normalize(surfaceToLight + vec3(0.0, 0.0, 1.0));
    float colorScale = uKS_Stage5 * pow(dot(normal, halfDir), uShininess_Stage5);
    vec3 color = lightColor * clamp(colorScale, 0.0, 1.0);
    return vec4(color, max(max(color.x, color.y), color.z));
}
float sobel_Stage5(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage5(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage5(float m[9], float surfaceScale) {
    return pointToNormal_Stage5(sobel_Stage5(0.0, 0.0, m[4], m[5], m[7], m[8], 0.66666698455810547), sobel_Stage5(0.0, 0.0, m[4], m[7], m[5], m[8], 0.66666698455810547), surfaceScale);
}
float _blend_overlay_component(float sc, float sa, float dc, float da) {
    if (2.0 * dc <= da) {
        return (2.0 * sc) * dc;
    }
    return sa * da - (2.0 * (da - dc)) * (sa - sc);
}
vec4 blend_overlay(vec4 src, vec4 dst) {
    vec4 result = vec4(_blend_overlay_component(src.x, src.w, dst.x, dst.w), _blend_overlay_component(src.y, src.w, dst.y, dst.w), _blend_overlay_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
    result.xyz += dst.xyz * (1.0 - src.w) + src.xyz * (1.0 - dst.w);
    return result;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
    }
    vec4 output_Stage1;
    {
        float alpha;
        {
            float xSub, ySub;
            xSub = min(gl_FragCoord.x - urectUniform_Stage1.x, 0.0);
            xSub += min(urectUniform_Stage1.z - gl_FragCoord.x, 0.0);
            ySub = min(gl_FragCoord.y - urectUniform_Stage1.y, 0.0);
            ySub += min(urectUniform_Stage1.w - gl_FragCoord.y, 0.0);
            alpha = (1.0 + max(xSub, -1.0)) * (1.0 + max(ySub, -1.0));
        }
        output_Stage1 = vec4(alpha);
    }
    vec4 output_Stage2;
    {
        float alpha;
        {
            float xSub, ySub;
            xSub = min(gl_FragCoord.x - urectUniform_Stage2.x, 0.0);
            xSub += min(urectUniform_Stage2.z - gl_FragCoord.x, 0.0);
            ySub = min(gl_FragCoord.y - urectUniform_Stage2.y, 0.0);
            ySub += min(urectUniform_Stage2.w - gl_FragCoord.y, 0.0);
            alpha = (1.0 + max(xSub, -1.0)) * (1.0 + max(ySub, -1.0));
        }
        output_Stage2 = output_Stage1 * alpha;
    }
    vec4 output_Stage3;
    {
        vec4 inputColor = vec4(output_Stage2.xyz, 1.0);
        output_Stage3 = blend_overlay(AlphaThresholdFragmentProcessor_Stage3_c0_c0(inputColor), GaussianConvolution_Stage3_c1_c0(inputColor));
        output_Stage3 *= output_Stage2.w;
    }
    vec4 output_Stage4;
    {
        vec4 dColor = texture(uTextureSampler_0_Stage4, vTransformedCoords_2_Stage0);
        dColor.xyz = dColor.w < 9.9999999747524271e-07 ? vec3(0.0) : clamp(dColor.xyz / dColor.w, 0.0, 1.0);
        vec2 cCoords = vTransformedCoords_3_Stage0 + uScale_Stage4 * (dColor.zy - vec2(0.5));
        {
            vec2 origCoord = cCoords;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
            if (err > uDecalParams_Stage4.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4.z < 1.0) {
                err = 0.0;
            }
            output_Stage4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
    }
    vec4 output_Stage5;
    {
        vec2 coord = vTransformedCoords_4_Stage0;
        float m[9];
        vec4 temp0;
        {
            vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[0] = temp0.w;
        vec4 temp1;
        {
            vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[1] = temp1.w;
        vec4 temp2;
        {
            vec2 origCoord = coord + uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[2] = temp2.w;
        vec4 temp3;
        {
            vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[3] = temp3.w;
        vec4 temp4;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[4] = temp4.w;
        vec4 temp5;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[5] = temp5.w;
        vec4 temp6;
        {
            vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[6] = temp6.w;
        vec4 temp7;
        {
            vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[7] = temp7.w;
        vec4 temp8;
        {
            vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[8] = temp8.w;
        vec3 surfaceToLight = normalize(uLightLocation_Stage5 - vec3(gl_FragCoord.xy, uSurfaceScale_Stage5 * m[4]));
        output_Stage5 = light_Stage5(normal_Stage5(m, uSurfaceScale_Stage5), surfaceToLight, uLightColor_Stage5);
        output_Stage5 *= output_Stage4;
    }
    {
        sk_FragColor = output_Stage5 * outputColor_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
uniform mat3 uCoordTransformMatrix_4_Stage0;
in vec2 inPosition;
in vec4 inColor;
noperspective out vec4 vcolor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vTransformedCoords_3_Stage0;
noperspective out vec2 vTransformedCoords_4_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_4_Stage0 = (uCoordTransformMatrix_4_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

