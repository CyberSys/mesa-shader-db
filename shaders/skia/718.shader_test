[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec2 uImageIncrement_Stage1;
uniform vec4 uKernel_Stage1[6];
uniform vec2 uKernelOffset_Stage1;
uniform float uGain_Stage1;
uniform float uBias_Stage1;
uniform vec2 ufocalParams_Stage3_c1_c0_c0_c0;
uniform vec4 uscale0_1_Stage3_c1_c0_c1_c0;
uniform vec4 uscale2_3_Stage3_c1_c0_c1_c0;
uniform vec4 uscale4_5_Stage3_c1_c0_c1_c0;
uniform vec4 uscale6_7_Stage3_c1_c0_c1_c0;
uniform vec4 ubias0_1_Stage3_c1_c0_c1_c0;
uniform vec4 ubias2_3_Stage3_c1_c0_c1_c0;
uniform vec4 ubias4_5_Stage3_c1_c0_c1_c0;
uniform vec4 ubias6_7_Stage3_c1_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage3_c1_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage3_c1_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
noperspective in vec2 vEllipseOffsets_Stage0;
noperspective in vec4 vEllipseRadii_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_3_Stage0;
vec4 Dither_Stage2_c0_c0(vec4 _input, vec2 _coords) {
    vec4 _output;
    _output = _input;
    float value;
    {
        uint x = uint(_coords.x);
        uint y = uint(_coords.y);
        uint m = (((((y & 1u) << 5u | (x & 1u) << 4u) | (y & 2u) << 2u) | (x & 2u) << 1u) | (y & 4u) >> 1u) | (x & 4u) >> 2u;
        value = float(m) / 64.0 - 0.4921875;
    }
    _output = vec4(clamp(_output.xyz + value * 0.01587301678955555, 0.0, _output.w), _output.w);
    return _output;
}
vec4 TwoPointConicalGradientLayout_Stage3_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 p = vTransformedCoords_3_Stage0;
    float t = -1.0;
    float v = 1.0;
    {
        {
            float invR1 = ufocalParams_Stage3_c1_c0_c0_c0.x;
            float fx = ufocalParams_Stage3_c1_c0_c0_c0.y;
            float x_t = -1.0;
            {
                float temp = p.x * p.x - p.y * p.y;
                if (temp >= 0.0) {
                    {
                        x_t = sqrt(temp) - p.x * invR1;
                    }
                }
            }
            {
                if (x_t <= 0.0) {
                    v = -1.0;
                }
            }
            {
                {
                    t = x_t + fx;
                }
            }
        }
    }
    _output = vec4(t, v, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage3_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage3_c1_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage3_c1_c0_c1_c0.x) {
                scale = uscale0_1_Stage3_c1_c0_c1_c0;
                bias = ubias0_1_Stage3_c1_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage3_c1_c0_c1_c0;
                bias = ubias2_3_Stage3_c1_c0_c1_c0;
            }
        } else {
            if (t < uthresholds1_7_Stage3_c1_c0_c1_c0.z) {
                scale = uscale4_5_Stage3_c1_c0_c1_c0;
                bias = ubias4_5_Stage3_c1_c0_c1_c0;
            } else {
                scale = uscale6_7_Stage3_c1_c0_c1_c0;
                bias = ubias6_7_Stage3_c1_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 TiledGradientEffect_Stage3_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 t = TwoPointConicalGradientLayout_Stage3_c1_c0_c0_c0(vec4(1.0));
    if (t.y < 0.0) {
        _output = vec4(0.0);
    } else {
        {
            float t_1 = t.x - 1.0;
            float tiled_t = (t_1 - 2.0 * floor(t_1 * 0.5)) - 1.0;
            t.x = abs(tiled_t);
        }
        _output = UnrolledBinaryGradientColorizer_Stage3_c1_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vinColor_Stage0;
        vec2 offset = vEllipseOffsets_Stage0;
        offset *= vEllipseRadii_Stage0.xy;
        float test = dot(offset, offset) - 1.0;
        vec2 grad = (2.0 * offset) * vEllipseRadii_Stage0.xy;
        float grad_dot = dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        offset = vEllipseOffsets_Stage0 * vEllipseRadii_Stage0.zw;
        test = dot(offset, offset) - 1.0;
        grad = (2.0 * offset) * vEllipseRadii_Stage0.zw;
        grad_dot = dot(grad, grad);
        invlen = inversesqrt(grad_dot);
        edgeAlpha *= clamp(0.5 + test * invlen, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_0_Stage0 - uKernelOffset_Stage1 * uImageIncrement_Stage1;
        vec4 c;
        {
            float k = uKernel_Stage1[0].x;
            {
                vec2 origCoord = coord;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[0].y;
            {
                vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[0].z;
            {
                vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[0].w;
            {
                vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[1].x;
            {
                vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[1].y;
            {
                vec2 origCoord = coord + vec2(5.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[1].z;
            {
                vec2 origCoord = coord + vec2(6.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[1].w;
            {
                vec2 origCoord = coord + vec2(7.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[2].x;
            {
                vec2 origCoord = coord + vec2(8.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[2].y;
            {
                vec2 origCoord = coord + vec2(9.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[2].z;
            {
                vec2 origCoord = coord + vec2(10.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[2].w;
            {
                vec2 origCoord = coord + vec2(11.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[3].x;
            {
                vec2 origCoord = coord + vec2(12.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[3].y;
            {
                vec2 origCoord = coord + vec2(13.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[3].z;
            {
                vec2 origCoord = coord + vec2(14.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[3].w;
            {
                vec2 origCoord = coord + vec2(15.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[4].x;
            {
                vec2 origCoord = coord + vec2(16.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[4].y;
            {
                vec2 origCoord = coord + vec2(17.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[4].z;
            {
                vec2 origCoord = coord + vec2(18.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[4].w;
            {
                vec2 origCoord = coord + vec2(19.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[5].x;
            {
                vec2 origCoord = coord + vec2(20.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            vec2 origCoord = vTransformedCoords_0_Stage0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        output_Stage1.w = c.w;
        output_Stage1.xyz = clamp(sum.xyz * uGain_Stage1 + uBias_Stage1, 0.0, 1.0);
        output_Stage1.xyz *= output_Stage1.w;
        output_Stage1 *= outputColor_Stage0;
    }
    vec4 output_Stage2;
    {
        float coord = vTransformedCoords_1_Stage0.x - 0.5;
        float f = fract(coord);
        coord += 0.5 - f;
        float f2 = f * f;
        vec4 w = mat4(0.055555555555555552, 0.88888888888888884, 0.055555555555555552, 0.0, -0.5, 0.0, 0.5, 0.0, 0.83333333333333337, -2.0, 1.5, -0.33333333333333331, -0.3888888888888889, 1.1666666666666667, -1.1666666666666667, 0.3888888888888889) * vec4(1.0, f, f2, f2 * f);
        vec4 c[4];
        c[0] = Dither_Stage2_c0_c0(vec4(1.0), vec2(coord + -1.0, vTransformedCoords_1_Stage0.y));
        c[1] = Dither_Stage2_c0_c0(vec4(1.0), vec2(coord, vTransformedCoords_1_Stage0.y));
        c[2] = Dither_Stage2_c0_c0(vec4(1.0), vec2(coord + 1.0, vTransformedCoords_1_Stage0.y));
        c[3] = Dither_Stage2_c0_c0(vec4(1.0), vec2(coord + 2.0, vTransformedCoords_1_Stage0.y));
        vec4 bicubicColor = ((c[0] * w.x + c[1] * w.y) + c[2] * w.z) + c[3] * w.w;
        bicubicColor = clamp(bicubicColor, 0.0, 1.0);
        output_Stage2 = bicubicColor * output_Stage1;
    }
    vec4 output_Stage3;
    {
        output_Stage3 = blend_dst_in(output_Stage2, TiledGradientEffect_Stage3_c1_c0(vec4(1.0)));
    }
    {
        sk_FragColor = outputCoverage_Stage0 * output_Stage3;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffset;
in vec4 inEllipseRadii;
noperspective out vec2 vEllipseOffsets_Stage0;
noperspective out vec4 vEllipseRadii_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_3_Stage0;
void main() {
    vEllipseOffsets_Stage0 = inEllipseOffset;
    vEllipseRadii_Stage0 = inEllipseRadii;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

