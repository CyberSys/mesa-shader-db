[require]
GLSL >= 1.40
GL_KHR_blend_equation_advanced

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uColor_Stage0;
uniform vec4 uboundsUniform_Stage1_c0_c0;
uniform float uxInvZoom_Stage1_c0_c0;
uniform float uyInvZoom_Stage1_c0_c0;
uniform float uxInvInset_Stage1_c0_c0;
uniform float uyInvInset_Stage1_c0_c0;
uniform vec2 uoffset_Stage1_c0_c0;
uniform vec2 uImageIncrement_Stage1_c1_c0;
uniform vec4 uKernel_Stage1_c1_c0[6];
uniform vec2 uKernelOffset_Stage1_c1_c0;
uniform float uGain_Stage1_c1_c0;
uniform float uBias_Stage1_c1_c0;
uniform vec4 uTexDom_Stage1_c1_c0;
uniform vec3 uDecalParams_Stage1_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
vec4 MagnifierEffect_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_0_Stage0;
    vec2 zoom_coord = uoffset_Stage1_c0_c0 + coord * vec2(uxInvZoom_Stage1_c0_c0, uyInvZoom_Stage1_c0_c0);
    vec2 delta = (coord - uboundsUniform_Stage1_c0_c0.xy) * uboundsUniform_Stage1_c0_c0.zw;
    delta = min(delta, vec2(1.0, 1.0) - delta);
    delta *= vec2(uxInvInset_Stage1_c0_c0, uyInvInset_Stage1_c0_c0);
    float weight = 0.0;
    if (delta.x < 2.0 && delta.y < 2.0) {
        delta = vec2(2.0, 2.0) - delta;
        float dist = length(delta);
        dist = max(2.0 - dist, 0.0);
        weight = min(dist * dist, 1.0);
    } else {
        vec2 delta_squared = delta * delta;
        weight = min(min(delta_squared.x, delta_squared.y), 1.0);
    }
    _output = texture(uTextureSampler_0_Stage1, mix(coord, zoom_coord, weight));
    return _output;
}
vec4 MatrixConvolution_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_1_Stage0 - uKernelOffset_Stage1_c1_c0 * uImageIncrement_Stage1_c1_c0;
    vec4 c;
    {
        float k = uKernel_Stage1_c1_c0[0].x;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[0].y;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[0].z;
        {
            vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[0].w;
        {
            vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[1].x;
        {
            vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[1].y;
        {
            vec2 origCoord = coord + vec2(5.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[1].z;
        {
            vec2 origCoord = coord + vec2(6.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[1].w;
        {
            vec2 origCoord = coord + vec2(7.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[2].x;
        {
            vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[2].y;
        {
            vec2 origCoord = coord + uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[2].z;
        {
            vec2 origCoord = coord + vec2(2.0, 1.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[2].w;
        {
            vec2 origCoord = coord + vec2(3.0, 1.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[3].x;
        {
            vec2 origCoord = coord + vec2(4.0, 1.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[3].y;
        {
            vec2 origCoord = coord + vec2(5.0, 1.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[3].z;
        {
            vec2 origCoord = coord + vec2(6.0, 1.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[3].w;
        {
            vec2 origCoord = coord + vec2(7.0, 1.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[4].x;
        {
            vec2 origCoord = coord + vec2(0.0, 2.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[4].y;
        {
            vec2 origCoord = coord + vec2(1.0, 2.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[4].z;
        {
            vec2 origCoord = coord + vec2(2.0, 2.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[4].w;
        {
            vec2 origCoord = coord + vec2(3.0, 2.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[5].x;
        {
            vec2 origCoord = coord + vec2(4.0, 2.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[5].y;
        {
            vec2 origCoord = coord + vec2(5.0, 2.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[5].z;
        {
            vec2 origCoord = coord + vec2(6.0, 2.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[5].w;
        {
            vec2 origCoord = coord + vec2(7.0, 2.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        vec2 origCoord = vTransformedCoords_1_Stage0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
            err = 0.0;
        }
        c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    _output.w = c.w;
    _output.xyz = clamp(sum.xyz * uGain_Stage1_c1_c0 + uBias_Stage1_c1_c0, 0.0, 1.0);
    _output.xyz *= _output.w;
    _output *= _input;
    return _output;
}
float _blend_color_luminance(vec3 color) {
    return dot(vec3(0.30000001192092896, 0.5899999737739563, 0.10999999940395355), color);
}
vec3 _blend_set_color_luminance(vec3 hueSatColor, float alpha, vec3 lumColor) {
    float lum = _blend_color_luminance(lumColor);
    vec3 result = (lum - _blend_color_luminance(hueSatColor)) + hueSatColor;
    float minComp = min(min(result.x, result.y), result.z);
    float maxComp = max(max(result.x, result.y), result.z);
    if (minComp < 0.0 && lum != minComp) {
        result = lum + ((result - lum) * lum) / (lum - minComp);
    }
    if (maxComp > alpha && maxComp != lum) {
        return lum + ((result - lum) * (alpha - lum)) / (maxComp - lum);
    }
    return result;
}
vec4 blend_color(vec4 src, vec4 dst) {
    float alpha = dst.w * src.w;
    vec3 sda = src.xyz * dst.w;
    vec3 dsa = dst.xyz * src.w;
    return vec4((((_blend_set_color_luminance(sda, alpha, dsa) + dst.xyz) - dsa) + src.xyz) - sda, (src.w + dst.w) - alpha);
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_color(MagnifierEffect_Stage1_c0_c0(inputColor), MatrixConvolution_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 inPosition;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

