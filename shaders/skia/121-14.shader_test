[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform mat4 um_Stage1;
uniform vec4 uv_Stage1;
uniform vec2 ufocalParams_Stage2_c0_c0_c0_c0;
uniform vec4 uscale0_1_Stage2_c0_c0_c1_c0;
uniform vec4 uscale2_3_Stage2_c0_c0_c1_c0;
uniform vec4 uscale4_5_Stage2_c0_c0_c1_c0;
uniform vec4 uscale6_7_Stage2_c0_c0_c1_c0;
uniform vec4 ubias0_1_Stage2_c0_c0_c1_c0;
uniform vec4 ubias2_3_Stage2_c0_c0_c1_c0;
uniform vec4 ubias4_5_Stage2_c0_c0_c1_c0;
uniform vec4 ubias6_7_Stage2_c0_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage2_c0_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage2_c0_c0_c1_c0;
uniform vec2 uImageIncrement_Stage4_c1_c0;
uniform vec2 uBounds_Stage4_c1_c0;
uniform vec4 uKernel_Stage4_c1_c0[2];
uniform sampler2D uTextureSampler_0_Stage4;
noperspective in vec2 vEllipseOffsets0_Stage0;
noperspective in vec2 vEllipseOffsets1_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
vec4 TwoPointConicalGradientLayout_Stage2_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 p = vTransformedCoords_0_Stage0;
    float t = -1.0;
    float v = 1.0;
    {
        {
            float r0_2 = ufocalParams_Stage2_c0_c0_c0_c0.y;
            t = r0_2 - p.y * p.y;
            if (t >= 0.0) {
                t = p.x + sqrt(t);
            } else {
                v = -1.0;
            }
        }
    }
    _output = vec4(t, v, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage2_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.x) {
                scale = uscale0_1_Stage2_c0_c0_c1_c0;
                bias = ubias0_1_Stage2_c0_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage2_c0_c0_c1_c0;
                bias = ubias2_3_Stage2_c0_c0_c1_c0;
            }
        } else {
            if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.z) {
                scale = uscale4_5_Stage2_c0_c0_c1_c0;
                bias = ubias4_5_Stage2_c0_c0_c1_c0;
            } else {
                scale = uscale6_7_Stage2_c0_c0_c1_c0;
                bias = ubias6_7_Stage2_c0_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 TiledGradientEffect_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = TwoPointConicalGradientLayout_Stage2_c0_c0_c0_c0(vec4(1.0));
    if (t.y < 0.0) {
        _output = vec4(0.0);
    } else {
        {
            t.x = fract(t.x);
        }
        _output = UnrolledBinaryGradientColorizer_Stage2_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 GaussianConvolution_Stage4_c1_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_1_Stage0 - 3.0 * uImageIncrement_Stage4_c1_c0;
    vec2 coordSampled = vec2(0.0, 0.0);
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage4_c1_c0.x, uBounds_Stage4_c1_c0.y - uBounds_Stage4_c1_c0.x) + uBounds_Stage4_c1_c0.x;
    _output += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4_c1_c0[0].x;
    coord += uImageIncrement_Stage4_c1_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage4_c1_c0.x, uBounds_Stage4_c1_c0.y - uBounds_Stage4_c1_c0.x) + uBounds_Stage4_c1_c0.x;
    _output += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4_c1_c0[0].y;
    coord += uImageIncrement_Stage4_c1_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage4_c1_c0.x, uBounds_Stage4_c1_c0.y - uBounds_Stage4_c1_c0.x) + uBounds_Stage4_c1_c0.x;
    _output += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4_c1_c0[0].z;
    coord += uImageIncrement_Stage4_c1_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage4_c1_c0.x, uBounds_Stage4_c1_c0.y - uBounds_Stage4_c1_c0.x) + uBounds_Stage4_c1_c0.x;
    _output += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4_c1_c0[0].w;
    coord += uImageIncrement_Stage4_c1_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage4_c1_c0.x, uBounds_Stage4_c1_c0.y - uBounds_Stage4_c1_c0.x) + uBounds_Stage4_c1_c0.x;
    _output += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4_c1_c0[1].x;
    coord += uImageIncrement_Stage4_c1_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage4_c1_c0.x, uBounds_Stage4_c1_c0.y - uBounds_Stage4_c1_c0.x) + uBounds_Stage4_c1_c0.x;
    _output += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4_c1_c0[1].y;
    coord += uImageIncrement_Stage4_c1_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage4_c1_c0.x, uBounds_Stage4_c1_c0.y - uBounds_Stage4_c1_c0.x) + uBounds_Stage4_c1_c0.x;
    _output += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4_c1_c0[1].z;
    coord += uImageIncrement_Stage4_c1_c0;
    _output *= _input;
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
float _blend_overlay_component(float sc, float sa, float dc, float da) {
    if (2.0 * dc <= da) {
        return (2.0 * sc) * dc;
    }
    return sa * da - (2.0 * (da - dc)) * (sa - sc);
}
vec4 blend_overlay(vec4 src, vec4 dst) {
    vec4 result = vec4(_blend_overlay_component(src.x, src.w, dst.x, dst.w), _blend_overlay_component(src.y, src.w, dst.y, dst.w), _blend_overlay_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
    result.xyz += dst.xyz * (1.0 - src.w) + src.xyz * (1.0 - dst.w);
    return result;
}
void main() {
    vec4 outputCoverage_Stage0;
    {
        vec2 scaledOffset = vEllipseOffsets0_Stage0;
        float test = dot(scaledOffset, scaledOffset) - 1.0;
        vec2 duvdx = dFdx(vEllipseOffsets0_Stage0);
        vec2 duvdy = -dFdy(vEllipseOffsets0_Stage0);
        vec2 grad = vec2(vEllipseOffsets0_Stage0.x * duvdx.x + vEllipseOffsets0_Stage0.y * duvdx.y, vEllipseOffsets0_Stage0.x * duvdy.x + vEllipseOffsets0_Stage0.y * duvdy.y);
        float grad_dot = 4.0 * dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = outputCoverage_Stage0;
        {
            float nonZeroAlpha = max(inputColor.w, 9.9999997473787516e-05);
            inputColor = vec4(inputColor.xyz / nonZeroAlpha, inputColor.w);
        }
        output_Stage1 = um_Stage1 * inputColor + uv_Stage1;
        {
            output_Stage1.w = clamp(output_Stage1.w, 0.0, 1.0);
        }
    }
    vec4 output_Stage2;
    {
        output_Stage2 = blend_dst_in(output_Stage1, TiledGradientEffect_Stage2_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage3;
    {
        output_Stage3 = floor(output_Stage2 * 255.0 + 0.5) / 255.0;
        {
            output_Stage3.xyz = output_Stage3.w <= 0.0 ? vec3(0.0) : floor((output_Stage3.xyz / output_Stage3.w) * 255.0 + 0.5) / 255.0;
        }
    }
    {
        blend_overlay(GaussianConvolution_Stage4_c1_c0(vec4(1.0)), output_Stage3);
    }
    {
        sk_FragColor = vec4(0.0);
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffsets0;
in vec2 inEllipseOffsets1;
noperspective out vec2 vEllipseOffsets0_Stage0;
noperspective out vec2 vEllipseOffsets1_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vEllipseOffsets0_Stage0 = inEllipseOffsets0;
    vEllipseOffsets1_Stage0 = inEllipseOffsets1;
    vinColor_Stage0 = inColor;
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

