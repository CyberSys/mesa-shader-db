[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 uclamp_Stage1;
uniform vec2 uDstTextureUpperLeft_Stage2;
uniform vec2 uDstTextureCoordScale_Stage2;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uDstTextureSampler_Stage2;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in float vcoverage_Stage0;
vec4 blend_src(vec4 src, vec4 dst) {
    return src;
}
void main() {
    vec4 outputCoverage_Stage0;
    {
        float coverage = vcoverage_Stage0;
        outputCoverage_Stage0 = vec4(coverage);
    }
    vec4 output_Stage1;
    {
        vec2 inCoord = vTransformedCoords_0_Stage0;
        vec2 subsetCoord;
        subsetCoord.x = inCoord.x;
        subsetCoord.y = inCoord.y;
        vec2 clampedCoord;
        clampedCoord.x = clamp(subsetCoord.x, uclamp_Stage1.x, uclamp_Stage1.z);
        clampedCoord.y = clamp(subsetCoord.y, uclamp_Stage1.y, uclamp_Stage1.w);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        output_Stage1 = textureColor;
    }
    {
        if (all(lessThanEqual(outputCoverage_Stage0.xyz, vec3(0.0)))) {
            discard;
        }
        vec2 _dstTexCoord = (gl_FragCoord.xy - uDstTextureUpperLeft_Stage2) * uDstTextureCoordScale_Stage2;
        _dstTexCoord.y = 1.0 - _dstTexCoord.y;
        vec4 _dstColor = texture(uDstTextureSampler_Stage2, _dstTexCoord);
        sk_FragColor = blend_src(output_Stage1, _dstColor);
        sk_FragColor = outputCoverage_Stage0 * sk_FragColor + (vec4(1.0) - outputCoverage_Stage0) * _dstColor;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 position;
in float coverage;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out float vcoverage_Stage0;
void main() {
    vec2 position = position;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vcoverage_Stage0 = coverage;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

