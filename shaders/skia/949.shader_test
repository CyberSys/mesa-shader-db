[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uColor_Stage0;
uniform float uinnerThreshold_Stage1_c0_c0_c0_c0_c1_c0;
uniform float uouterThreshold_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec4 uinnerRect_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec4 uinvRadiiLTRB_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec4 uellipse_Stage1_c0_c0_c1_c0_c1_c0;
uniform vec2 uImageIncrement_Stage1_c1_c0;
uniform vec4 uKernel_Stage1_c1_c0[5];
uniform vec2 uKernelOffset_Stage1_c1_c0;
uniform float uGain_Stage1_c1_c0;
uniform float uBias_Stage1_c1_c0;
uniform vec4 uTexDom_Stage1_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
in vec2 vTransformedCoords_0_Stage0;
in vec2 vTransformedCoords_1_Stage0;
vec4 ClampFragmentProcessor_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    {
        float alpha = clamp(_input.w, 0.0, 1.0);
        _output = vec4(clamp(_input.xyz, 0.0, alpha), alpha);
    }
    return _output;
}
vec4 AlphaThresholdFragmentProcessor_Stage1_c0_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 color = _input;
    vec4 mask_color = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
    if (mask_color.w < 0.5) {
        if (color.w > uouterThreshold_Stage1_c0_c0_c0_c0_c1_c0) {
            float scale = uouterThreshold_Stage1_c0_c0_c0_c0_c1_c0 / color.w;
            color.xyz *= scale;
            color.w = uouterThreshold_Stage1_c0_c0_c0_c0_c1_c0;
        }
    } else if (color.w < uinnerThreshold_Stage1_c0_c0_c0_c0_c1_c0) {
        float scale = uinnerThreshold_Stage1_c0_c0_c0_c0_c1_c0 / max(0.0010000000474974513, color.w);
        color.xyz *= scale;
        color.w = uinnerThreshold_Stage1_c0_c0_c0_c0_c1_c0;
    }
    _output = color;
    return _output;
}
vec4 blend_plus(vec4 src, vec4 dst) {
    return min(src + dst, 1.0);
}
vec4 ComposeTwo_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_plus(ClampFragmentProcessor_Stage1_c0_c0_c0_c0_c0_c0(inputColor), AlphaThresholdFragmentProcessor_Stage1_c0_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 EllipticalRRect_Stage1_c0_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c0_c0_c1_c0_c0_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c0_c0_c1_c0_c0_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    vec2 Z = max(max(dxy0 * uinvRadiiLTRB_Stage1_c0_c0_c1_c0_c0_c0.xy, dxy1 * uinvRadiiLTRB_Stage1_c0_c0_c1_c0_c0_c0.zw), 0.0);
    float implicit = dot(Z, dxy) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    grad_dot = max(grad_dot, 9.9999997473787516e-05);
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha = clamp(0.5 - approx_dist, 0.0, 1.0);
    _output = _input * alpha;
    return _output;
}
vec4 EllipseEffect_Stage1_c0_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 d = gl_FragCoord.xy - uellipse_Stage1_c0_c0_c1_c0_c1_c0.xy;
    vec2 Z = d * uellipse_Stage1_c0_c0_c1_c0_c1_c0.zw;
    float implicit = dot(Z, d) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    {
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
    }
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha;
    {
        alpha = clamp(0.5 - approx_dist, 0.0, 1.0);
    }
    _output = _input * alpha;
    return _output;
}
vec4 blend_difference(vec4 src, vec4 dst) {
    return vec4((src.xyz + dst.xyz) - 2.0 * min(src.xyz * dst.w, dst.xyz * src.w), src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_difference(EllipticalRRect_Stage1_c0_c0_c1_c0_c0_c0(inputColor), EllipseEffect_Stage1_c0_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_dst_over(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + dst;
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_dst_over(ComposeTwo_Stage1_c0_c0_c0_c0(inputColor), ComposeTwo_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 MatrixConvolution_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_1_Stage0 - uKernelOffset_Stage1_c1_c0 * uImageIncrement_Stage1_c1_c0;
    vec4 c;
    {
        float k = uKernel_Stage1_c1_c0[0].x;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[0].y;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[0].z;
        {
            vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[0].w;
        {
            vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[1].x;
        {
            vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[1].y;
        {
            vec2 origCoord = coord + vec2(5.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[1].z;
        {
            vec2 origCoord = coord + vec2(6.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[1].w;
        {
            vec2 origCoord = coord + vec2(7.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[2].x;
        {
            vec2 origCoord = coord + vec2(8.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[2].y;
        {
            vec2 origCoord = coord + vec2(9.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[2].z;
        {
            vec2 origCoord = coord + vec2(10.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[2].w;
        {
            vec2 origCoord = coord + vec2(11.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[3].x;
        {
            vec2 origCoord = coord + vec2(12.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[3].y;
        {
            vec2 origCoord = coord + vec2(13.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[3].z;
        {
            vec2 origCoord = coord + vec2(14.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[3].w;
        {
            vec2 origCoord = coord + vec2(15.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[4].x;
        {
            vec2 origCoord = coord + vec2(16.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[4].y;
        {
            vec2 origCoord = coord + vec2(17.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[4].z;
        {
            vec2 origCoord = coord + vec2(18.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0[4].w;
        {
            vec2 origCoord = coord + vec2(19.0, 0.0) * uImageIncrement_Stage1_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        vec2 origCoord = vTransformedCoords_1_Stage0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        c = textureColor;
    }
    _output.w = c.w;
    _output.xyz = clamp(sum.xyz * uGain_Stage1_c1_c0 + uBias_Stage1_c1_c0, 0.0, 1.0);
    _output.xyz *= _output.w;
    _output *= _input;
    return _output;
}
vec4 blend_xor(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + (1.0 - src.w) * dst;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_xor(ComposeTwo_Stage1_c0_c0(inputColor), MatrixConvolution_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 position;
in vec2 inLocalCoord;
out vec2 vTransformedCoords_0_Stage0;
out vec2 vTransformedCoords_1_Stage0;
void main() {
    vec3 pos3 = uViewM_Stage0 * vec3(position, 1.0);
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    gl_Position = vec4(pos3.x, pos3.y, 0.0, pos3.z);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

