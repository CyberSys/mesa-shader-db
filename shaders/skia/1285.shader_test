[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform vec3 uedges_Stage1[3];
uniform vec4 uleftBorderColor_Stage2_c0_c0;
uniform vec4 urightBorderColor_Stage2_c0_c0;
uniform float ubias_Stage2_c0_c0_c0_c0;
uniform float uscale_Stage2_c0_c0_c0_c0;
uniform vec4 ustart_Stage2_c0_c0_c1_c0;
uniform vec4 uend_Stage2_c0_c0_c1_c0;
uniform vec4 uboundsUniform_Stage3;
uniform float uxInvZoom_Stage3;
uniform float uyInvZoom_Stage3;
uniform float uxInvInset_Stage3;
uniform float uyInvInset_Stage3;
uniform vec2 uoffset_Stage3;
uniform vec2 ubaseFrequency_Stage4;
uniform float uz_Stage4;
uniform vec4 ucolor_Stage5;
uniform vec2 ufocalParams_Stage6_c1_c0_c0_c0;
uniform vec4 uscale0_1_Stage6_c1_c0_c1_c0;
uniform vec4 uscale2_3_Stage6_c1_c0_c1_c0;
uniform vec4 uscale4_5_Stage6_c1_c0_c1_c0;
uniform vec4 ubias0_1_Stage6_c1_c0_c1_c0;
uniform vec4 ubias2_3_Stage6_c1_c0_c1_c0;
uniform vec4 ubias4_5_Stage6_c1_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage6_c1_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage6_c1_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage3;
uniform sampler2D uTextureSampler_0_Stage4;
uniform sampler2D uTextureSampler_1_Stage4;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vTransformedCoords_3_Stage0;
vec4 SweepGradientLayout_Stage2_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float angle;
    {
        angle = atan(-vTransformedCoords_0_Stage0.y, -vTransformedCoords_0_Stage0.x);
    }
    float t = ((angle * 0.15915493667125702 + 0.5) + ubias_Stage2_c0_c0_c0_c0) * uscale_Stage2_c0_c0_c0_c0;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 SingleIntervalGradientColorizer_Stage2_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    _output = (1.0 - t) * ustart_Stage2_c0_c0_c1_c0 + t * uend_Stage2_c0_c0_c1_c0;
    return _output;
}
vec4 ClampedGradientEffect_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = SweepGradientLayout_Stage2_c0_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage2_c0_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage2_c0_c0;
    } else {
        _output = SingleIntervalGradientColorizer_Stage2_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec3 fade_Stage4(vec3 t) {
    return ((t * t) * t) * (t * (t * 6.0 - 15.0) + 10.0);
}
float perm_Stage4(float x) {
    return texture(uTextureSampler_0_Stage4, vec2(fract(x / 256.0), 0.0)).x * 255.0;
}
float grad_Stage4(float x, vec3 p) {
    return dot(texture(uTextureSampler_1_Stage4, vec2(fract(x / 16.0), 0.0)).xyz * 255.0 - vec3(1.0), p);
}
float lerp_Stage4(float a, float b, float w) {
    return a + w * (b - a);
}
float noise_Stage4(vec3 p) {
    vec3 P = mod(floor(p), 256.0);
    p -= floor(p);
    vec3 f = fade_Stage4(p);
    float A = perm_Stage4(P.x) + P.y;
    float AA = perm_Stage4(A) + P.z;
    float AB = perm_Stage4(A + 1.0) + P.z;
    float B = perm_Stage4(P.x + 1.0) + P.y;
    float BA = perm_Stage4(B) + P.z;
    float BB = perm_Stage4(B + 1.0) + P.z;
    float result = lerp_Stage4(lerp_Stage4(lerp_Stage4(grad_Stage4(perm_Stage4(AA), p), grad_Stage4(perm_Stage4(BA), p + vec3(-1.0, 0.0, 0.0)), f.x), lerp_Stage4(grad_Stage4(perm_Stage4(AB), p + vec3(0.0, -1.0, 0.0)), grad_Stage4(perm_Stage4(BB), p + vec3(-1.0, -1.0, 0.0)), f.x), f.y), lerp_Stage4(lerp_Stage4(grad_Stage4(perm_Stage4(AA + 1.0), p + vec3(0.0, 0.0, -1.0)), grad_Stage4(perm_Stage4(BA + 1.0), p + vec3(-1.0, 0.0, -1.0)), f.x), lerp_Stage4(grad_Stage4(perm_Stage4(AB + 1.0), p + vec3(0.0, -1.0, -1.0)), grad_Stage4(perm_Stage4(BB + 1.0), p + vec3(-1.0, -1.0, -1.0)), f.x), f.y), f.z);
    return result;
}
float noiseOctaves_Stage4(vec3 p) {
    float result = 0.0;
    float ratio = 1.0;
    for (float i = 0.0;i < 9.0; i++) {
        result += noise_Stage4(p) / ratio;
        p *= 2.0;
        ratio *= 2.0;
    }
    return (result + 1.0) / 2.0;
}
vec4 TwoPointConicalGradientLayout_Stage6_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 p = vTransformedCoords_3_Stage0;
    float t = -1.0;
    {
        {
            float r0 = ufocalParams_Stage6_c1_c0_c0_c0.x;
            {
                t = -length(p) - r0;
            }
        }
    }
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage6_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage6_c1_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage6_c1_c0_c1_c0.x) {
                scale = uscale0_1_Stage6_c1_c0_c1_c0;
                bias = ubias0_1_Stage6_c1_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage6_c1_c0_c1_c0;
                bias = ubias2_3_Stage6_c1_c0_c1_c0;
            }
        } else {
            {
                scale = uscale4_5_Stage6_c1_c0_c1_c0;
                bias = ubias4_5_Stage6_c1_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 TiledGradientEffect_Stage6_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 t = TwoPointConicalGradientLayout_Stage6_c1_c0_c0_c0(vec4(1.0));
    if (t.y < 0.0) {
        _output = vec4(0.0);
    } else {
        {
            t.x = fract(t.x);
        }
        _output = UnrolledBinaryGradientColorizer_Stage6_c1_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        float alpha = 1.0;
        float edge;
        edge = dot(uedges_Stage1[0], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
        edge = clamp(edge, 0.0, 1.0);
        alpha *= edge;
        edge = dot(uedges_Stage1[1], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
        edge = clamp(edge, 0.0, 1.0);
        alpha *= edge;
        edge = dot(uedges_Stage1[2], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
        edge = clamp(edge, 0.0, 1.0);
        alpha *= edge;
        alpha = 1.0 - alpha;
        output_Stage1 = outputColor_Stage0 * alpha;
    }
    {
        blend_dst_in(output_Stage1, ClampedGradientEffect_Stage2_c0_c0(vec4(1.0)));
    }
    {
        vec2 coord = vTransformedCoords_1_Stage0;
        vec2 delta = (coord - uboundsUniform_Stage3.xy) * uboundsUniform_Stage3.zw;
        delta = min(delta, vec2(1.0, 1.0) - delta);
        delta *= vec2(uxInvInset_Stage3, uyInvInset_Stage3);
        if (delta.x < 2.0 && delta.y < 2.0) {
            delta = vec2(2.0, 2.0) - delta;
            float dist = length(delta);
            dist = max(2.0 - dist, 0.0);
        }
    }
    vec4 output_Stage4;
    {
        vec2 coords = vTransformedCoords_2_Stage0 * ubaseFrequency_Stage4;
        float r = noiseOctaves_Stage4(vec3(coords, uz_Stage4));
        float g = noiseOctaves_Stage4(vec3(coords, uz_Stage4));
        float b = noiseOctaves_Stage4(vec3(coords, uz_Stage4));
        float a = noiseOctaves_Stage4(vec3(coords, uz_Stage4));
        output_Stage4 = vec4(r, g, b, a);
        output_Stage4 = clamp(output_Stage4, 0.0, 1.0);
        output_Stage4 = vec4(output_Stage4.xyz * output_Stage4.www, output_Stage4.w);
    }
    vec4 output_Stage5;
    {
        {
            output_Stage5 = ucolor_Stage5;
        }
    }
    vec4 output_Stage6;
    {
        output_Stage6 = blend_dst_in(vec4(1.0), TiledGradientEffect_Stage6_c1_c0(vec4(1.0)));
    }
    {
        sk_FragColor = output_Stage5 * output_Stage6;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
in vec2 inPosition;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vTransformedCoords_3_Stage0;
void main() {
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

