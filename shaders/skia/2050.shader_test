[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec3 uedges_Stage1[4];
uniform sampler2D uTextureSampler_0_Stage2;
in vec2 vEllipseOffsets0_Stage0;
in vec2 vEllipseOffsets1_Stage0;
in vec4 vinColor_Stage0;
in vec2 vTransformedCoords_0_Stage0;
void main() {
    vec4 outputCoverage_Stage0;
    {
        vec2 scaledOffset = vEllipseOffsets0_Stage0;
        float test = dot(scaledOffset, scaledOffset) - 1.0;
        vec2 duvdx = dFdx(vEllipseOffsets0_Stage0);
        vec2 duvdy = dFdy(vEllipseOffsets0_Stage0);
        vec2 grad = vec2(vEllipseOffsets0_Stage0.x * duvdx.x + vEllipseOffsets0_Stage0.y * duvdx.y, vEllipseOffsets0_Stage0.x * duvdy.x + vEllipseOffsets0_Stage0.y * duvdy.y);
        float grad_dot = 4.0 * dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        float alpha = 1.0;
        float edge;
        edge = dot(uedges_Stage1[0], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
        edge = edge >= 0.5 ? 1.0 : 0.0;
        alpha *= edge;
        edge = dot(uedges_Stage1[1], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
        edge = edge >= 0.5 ? 1.0 : 0.0;
        alpha *= edge;
        edge = dot(uedges_Stage1[2], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
        edge = edge >= 0.5 ? 1.0 : 0.0;
        alpha *= edge;
        edge = dot(uedges_Stage1[3], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
        edge = edge >= 0.5 ? 1.0 : 0.0;
        alpha *= edge;
        alpha = 1.0 - alpha;
        output_Stage1 = outputCoverage_Stage0 * alpha;
    }
    vec4 output_Stage2;
    {
        output_Stage2 = texture(uTextureSampler_0_Stage2, vTransformedCoords_0_Stage0) * output_Stage1;
    }
    {
        sk_FragColor = 1.0 - output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffsets0;
in vec2 inEllipseOffsets1;
out vec2 vEllipseOffsets0_Stage0;
out vec2 vEllipseOffsets1_Stage0;
out vec4 vinColor_Stage0;
out vec2 vTransformedCoords_0_Stage0;
void main() {
    vEllipseOffsets0_Stage0 = inEllipseOffsets0;
    vEllipseOffsets1_Stage0 = inEllipseOffsets1;
    vinColor_Stage0 = inColor;
    vec3 pos3 = uViewM_Stage0 * vec3(inPosition, 1.0);
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos3.x, pos3.y, 0.0, pos3.z);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

