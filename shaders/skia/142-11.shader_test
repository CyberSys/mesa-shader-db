[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 uinnerRect_Stage1_c0_c0;
uniform vec2 uradiusPlusHalf_Stage1_c0_c0;
uniform vec2 uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
uniform float uSurfaceScale_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec3 uLightColor_Stage1_c1_c0_c0_c0_c0_c0;
uniform float uKS_Stage1_c1_c0_c0_c0_c0_c0;
uniform float uShininess_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec4 uTexDom_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec3 uDecalParams_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec3 uLightLocation_Stage1_c1_c0_c0_c0_c0_c0;
uniform float uPixelSize_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec2 uRange_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec4 uellipse_Stage1_c1_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
noperspective in vec2 vEllipseOffsets_Stage0;
noperspective in vec4 vEllipseRadii_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
vec4 CircularRRect_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c0_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c0_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    float alpha = clamp(uradiusPlusHalf_Stage1_c0_c0.x - length(dxy), 0.0, 1.0);
    _output = _input * alpha;
    return _output;
}
vec4 light_Stage1_c1_c0_c0_c0_c0_c0(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    vec3 halfDir = normalize(surfaceToLight + vec3(0.0, 0.0, 1.0));
    float colorScale = uKS_Stage1_c1_c0_c0_c0_c0_c0 * pow(dot(normal, halfDir), uShininess_Stage1_c1_c0_c0_c0_c0_c0);
    vec3 color = lightColor * clamp(colorScale, 0.0, 1.0);
    return vec4(color, max(max(color.x, color.y), color.z));
}
float sobel_Stage1_c1_c0_c0_c0_c0_c0(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage1_c1_c0_c0_c0_c0_c0(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage1_c1_c0_c0_c0_c0_c0(float m[9], float surfaceScale) {
    return pointToNormal_Stage1_c1_c0_c0_c0_c0_c0(sobel_Stage1_c1_c0_c0_c0_c0_c0(m[0], m[2], m[3], m[5], m[6], m[8], 0.25), sobel_Stage1_c1_c0_c0_c0_c0_c0(m[0], m[6], m[1], m[7], m[2], m[8], 0.25), surfaceScale);
}
vec4 SpecularLighting_Stage1_c1_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_0_Stage0;
    float m[9];
    vec4 temp0;
    {
        vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[0] = temp0.w;
    vec4 temp1;
    {
        vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[1] = temp1.w;
    vec4 temp2;
    {
        vec2 origCoord = coord + uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[2] = temp2.w;
    vec4 temp3;
    {
        vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[3] = temp3.w;
    vec4 temp4;
    {
        vec2 origCoord = coord;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[4] = temp4.w;
    vec4 temp5;
    {
        vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[5] = temp5.w;
    vec4 temp6;
    {
        vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[6] = temp6.w;
    vec4 temp7;
    {
        vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[7] = temp7.w;
    vec4 temp8;
    {
        vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[8] = temp8.w;
    vec3 surfaceToLight = normalize(uLightLocation_Stage1_c1_c0_c0_c0_c0_c0 - vec3(gl_FragCoord.xy, uSurfaceScale_Stage1_c1_c0_c0_c0_c0_c0 * m[4]));
    _output = light_Stage1_c1_c0_c0_c0_c0_c0(normal_Stage1_c1_c0_c0_c0_c0_c0(m, uSurfaceScale_Stage1_c1_c0_c0_c0_c0_c0), surfaceToLight, uLightColor_Stage1_c1_c0_c0_c0_c0_c0);
    _output *= _input;
    return _output;
}
vec4 Morphology_Stage1_c1_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_1_Stage0;
    coord.x -= 4.0 * uPixelSize_Stage1_c1_c0_c0_c0_c1_c0;
    for (int i = 0;i < 9; i++) {
        _output = max(_output, texture(uTextureSampler_1_Stage1, coord));
        coord.x += uPixelSize_Stage1_c1_c0_c0_c0_c1_c0;
    }
    _output *= _input;
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
vec4 ComposeTwo_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_dst_in(SpecularLighting_Stage1_c1_c0_c0_c0_c0_c0(inputColor), Morphology_Stage1_c1_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 EllipseEffect_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 d = gl_FragCoord.xy - uellipse_Stage1_c1_c0_c1_c0.xy;
    vec2 Z = d * uellipse_Stage1_c1_c0_c1_c0.zw;
    float implicit = dot(Z, d) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    {
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
    }
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha;
    {
        alpha = approx_dist > 0.0 ? 1.0 : 0.0;
    }
    _output = _input * alpha;
    return _output;
}
float _guarded_divide(float n, float d) {
    return n / d;
}
float _soft_light_component(float sc, float sa, float dc, float da) {
    if (2.0 * sc <= sa) {
        return (_guarded_divide((dc * dc) * (sa - 2.0 * sc), da) + (1.0 - da) * sc) + dc * ((-sa + 2.0 * sc) + 1.0);
    } else if (4.0 * dc <= da) {
        float DSqd = dc * dc;
        float DCub = DSqd * dc;
        float DaSqd = da * da;
        float DaCub = DaSqd * da;
        return _guarded_divide(((DaSqd * (sc - dc * ((3.0 * sa - 6.0 * sc) - 1.0)) + ((12.0 * da) * DSqd) * (sa - 2.0 * sc)) - (16.0 * DCub) * (sa - 2.0 * sc)) - DaCub * sc, DaSqd);
    }
    return ((dc * ((sa - 2.0 * sc) + 1.0) + sc) - sqrt(da * dc) * (sa - 2.0 * sc)) - da * sc;
}
vec4 blend_soft_light(vec4 src, vec4 dst) {
    if (dst.w == 0.0) {
        return src;
    }
    return vec4(_soft_light_component(src.x, src.w, dst.x, dst.w), _soft_light_component(src.y, src.w, dst.y, dst.w), _soft_light_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_soft_light(ComposeTwo_Stage1_c1_c0_c0_c0(inputColor), EllipseEffect_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_multiply(vec4 src, vec4 dst) {
    return vec4(((1.0 - src.w) * dst.xyz + (1.0 - dst.w) * src.xyz) + src.xyz * dst.xyz, src.w + (1.0 - src.w) * dst.w);
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vinColor_Stage0;
        vec2 offset = vEllipseOffsets_Stage0;
        float test = dot(offset, offset) - 1.0;
        vec2 grad = (2.0 * offset) * vEllipseRadii_Stage0.xy;
        float grad_dot = dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_multiply(CircularRRect_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1 * outputCoverage_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffset;
in vec4 inEllipseRadii;
noperspective out vec2 vEllipseOffsets_Stage0;
noperspective out vec4 vEllipseRadii_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vEllipseOffsets_Stage0 = inEllipseOffset;
    vEllipseRadii_Stage0 = inEllipseRadii;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

