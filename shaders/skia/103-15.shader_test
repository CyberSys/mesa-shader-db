[require]
GLSL >= 1.40
GL_KHR_blend_equation_advanced

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uboundsUniform_Stage1;
uniform float uxInvZoom_Stage1;
uniform float uyInvZoom_Stage1;
uniform float uxInvInset_Stage1;
uniform float uyInvInset_Stage1;
uniform vec2 uoffset_Stage1;
uniform vec4 uleftBorderColor_Stage2_c0_c0;
uniform vec4 urightBorderColor_Stage2_c0_c0;
uniform vec2 ufocalParams_Stage2_c0_c0_c0_c0;
uniform vec4 uscale0_1_Stage2_c0_c0_c1_c0;
uniform vec4 uscale2_3_Stage2_c0_c0_c1_c0;
uniform vec4 uscale4_5_Stage2_c0_c0_c1_c0;
uniform vec4 ubias0_1_Stage2_c0_c0_c1_c0;
uniform vec4 ubias2_3_Stage2_c0_c0_c1_c0;
uniform vec4 ubias4_5_Stage2_c0_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage2_c0_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage2_c0_c0_c1_c0;
uniform vec4 uleftBorderColor_Stage3_c1_c0;
uniform vec4 urightBorderColor_Stage3_c1_c0;
uniform vec2 ufocalParams_Stage3_c1_c0_c0_c0;
uniform vec4 uscale0_1_Stage3_c1_c0_c1_c0;
uniform vec4 uscale2_3_Stage3_c1_c0_c1_c0;
uniform vec4 uscale4_5_Stage3_c1_c0_c1_c0;
uniform vec4 ubias0_1_Stage3_c1_c0_c1_c0;
uniform vec4 ubias2_3_Stage3_c1_c0_c1_c0;
uniform vec4 ubias4_5_Stage3_c1_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage3_c1_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage3_c1_c0_c1_c0;
uniform vec2 uImageIncrement_Stage4_c2_c0;
uniform vec4 uKernel_Stage4_c2_c0[2];
uniform vec4 urectUniform_Stage4_c3_c0;
uniform vec4 uellipse_Stage5;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage4;
uniform sampler2D uTextureSampler_0_Stage6;
noperspective in vec4 vcolor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vTransformedCoords_3_Stage0;
noperspective in vec2 vTransformedCoords_4_Stage0;
noperspective in float vinCoverage_Stage0;
vec4 TwoPointConicalGradientLayout_Stage2_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 p = vTransformedCoords_1_Stage0;
    float t = -1.0;
    {
        {
            float r0 = ufocalParams_Stage2_c0_c0_c0_c0.x;
            {
                t = length(p) - r0;
            }
        }
    }
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage2_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.x) {
                scale = uscale0_1_Stage2_c0_c0_c1_c0;
                bias = ubias0_1_Stage2_c0_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage2_c0_c0_c1_c0;
                bias = ubias2_3_Stage2_c0_c0_c1_c0;
            }
        } else {
            {
                scale = uscale4_5_Stage2_c0_c0_c1_c0;
                bias = ubias4_5_Stage2_c0_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 ClampedGradientEffect_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = TwoPointConicalGradientLayout_Stage2_c0_c0_c0_c0(vec4(1.0));
    if (t.y < 0.0) {
        _output = vec4(0.0);
    } else if (t.x < 0.0) {
        _output = uleftBorderColor_Stage2_c0_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage2_c0_c0;
    } else {
        _output = UnrolledBinaryGradientColorizer_Stage2_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 TwoPointConicalGradientLayout_Stage3_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 p = vTransformedCoords_2_Stage0;
    float t = -1.0;
    float v = 1.0;
    {
        {
            float invR1 = ufocalParams_Stage3_c1_c0_c0_c0.x;
            float x_t = -1.0;
            {
                float temp = p.x * p.x - p.y * p.y;
                if (temp >= 0.0) {
                    {
                        x_t = sqrt(temp) - p.x * invR1;
                    }
                }
            }
            {
                if (x_t <= 0.0) {
                    v = -1.0;
                }
            }
            {
                {
                    t = x_t;
                }
            }
        }
    }
    _output = vec4(t, v, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage3_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage3_c1_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage3_c1_c0_c1_c0.x) {
                scale = uscale0_1_Stage3_c1_c0_c1_c0;
                bias = ubias0_1_Stage3_c1_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage3_c1_c0_c1_c0;
                bias = ubias2_3_Stage3_c1_c0_c1_c0;
            }
        } else {
            {
                scale = uscale4_5_Stage3_c1_c0_c1_c0;
                bias = ubias4_5_Stage3_c1_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 ClampedGradientEffect_Stage3_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 t = TwoPointConicalGradientLayout_Stage3_c1_c0_c0_c0(vec4(1.0));
    if (t.y < 0.0) {
        _output = vec4(0.0);
    } else if (t.x < 0.0) {
        _output = uleftBorderColor_Stage3_c1_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage3_c1_c0;
    } else {
        _output = UnrolledBinaryGradientColorizer_Stage3_c1_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 GaussianConvolution_Stage4_c2_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_3_Stage0 - 2.0 * uImageIncrement_Stage4_c2_c0;
    vec2 coordSampled = vec2(0.0, 0.0);
    coordSampled = coord;
    _output += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4_c2_c0[0].x;
    coord += uImageIncrement_Stage4_c2_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4_c2_c0[0].y;
    coord += uImageIncrement_Stage4_c2_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4_c2_c0[0].z;
    coord += uImageIncrement_Stage4_c2_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4_c2_c0[0].w;
    coord += uImageIncrement_Stage4_c2_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4_c2_c0[1].x;
    coord += uImageIncrement_Stage4_c2_c0;
    _output *= _input;
    return _output;
}
vec4 AARectEffect_Stage4_c3_c0(vec4 _input) {
    vec4 _output;
    float alpha;
    {
        float xSub, ySub;
        xSub = min(gl_FragCoord.x - urectUniform_Stage4_c3_c0.x, 0.0);
        xSub += min(urectUniform_Stage4_c3_c0.z - gl_FragCoord.x, 0.0);
        ySub = min(gl_FragCoord.y - urectUniform_Stage4_c3_c0.y, 0.0);
        ySub += min(urectUniform_Stage4_c3_c0.w - gl_FragCoord.y, 0.0);
        alpha = (1.0 + max(xSub, -1.0)) * (1.0 + max(ySub, -1.0));
    }
    _output = _input * alpha;
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
vec4 blend_dst_atop(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + src.w * dst;
}
void main() {
    vec4 outputCoverage_Stage0;
    {
        float alpha = 1.0;
        alpha = vinCoverage_Stage0;
        outputCoverage_Stage0 = vec4(alpha);
    }
    vec4 output_Stage1;
    {
        vec2 coord = vTransformedCoords_0_Stage0;
        vec2 zoom_coord = uoffset_Stage1 + coord * vec2(uxInvZoom_Stage1, uyInvZoom_Stage1);
        vec2 delta = (coord - uboundsUniform_Stage1.xy) * uboundsUniform_Stage1.zw;
        delta = min(delta, vec2(1.0, 1.0) - delta);
        delta *= vec2(uxInvInset_Stage1, uyInvInset_Stage1);
        float weight = 0.0;
        if (delta.x < 2.0 && delta.y < 2.0) {
            delta = vec2(2.0, 2.0) - delta;
            float dist = length(delta);
            dist = max(2.0 - dist, 0.0);
            weight = min(dist * dist, 1.0);
        } else {
            vec2 delta_squared = delta * delta;
            weight = min(min(delta_squared.x, delta_squared.y), 1.0);
        }
        output_Stage1 = texture(uTextureSampler_0_Stage1, mix(coord, zoom_coord, weight));
    }
    vec4 output_Stage2;
    {
        output_Stage2 = blend_dst_in(outputCoverage_Stage0, ClampedGradientEffect_Stage2_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage3;
    {
        output_Stage3 = blend_dst_in(output_Stage2, ClampedGradientEffect_Stage3_c1_c0(vec4(1.0)));
    }
    vec4 output_Stage4;
    {
        vec4 inputColor = vec4(output_Stage3.xyz, 1.0);
        output_Stage4 = blend_dst_atop(GaussianConvolution_Stage4_c2_c0(inputColor), AARectEffect_Stage4_c3_c0(inputColor));
        output_Stage4 *= output_Stage3.w;
    }
    vec4 output_Stage5;
    {
        vec2 d = gl_FragCoord.xy - uellipse_Stage5.xy;
        vec2 Z = d * uellipse_Stage5.zw;
        float implicit = dot(Z, d) - 1.0;
        float grad_dot = 4.0 * dot(Z, Z);
        {
            grad_dot = max(grad_dot, 1.1754999560161448e-38);
        }
        float approx_dist = implicit * inversesqrt(grad_dot);
        float alpha;
        {
            alpha = clamp(0.5 - approx_dist, 0.0, 1.0);
        }
        output_Stage5 = output_Stage4 * alpha;
    }
    vec4 output_Stage6;
    {
        output_Stage6 = texture(uTextureSampler_0_Stage6, vTransformedCoords_4_Stage0) * output_Stage5;
    }
    {
        sk_FragColor = output_Stage6 * output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
uniform mat3 uCoordTransformMatrix_4_Stage0;
in vec2 inPosition;
in vec4 inColor;
in float inCoverage;
noperspective out vec4 vcolor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vTransformedCoords_3_Stage0;
noperspective out vec2 vTransformedCoords_4_Stage0;
noperspective out float vinCoverage_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_4_Stage0 = (uCoordTransformMatrix_4_Stage0 * vec3(inPosition, 1.0)).xy;
    vinCoverage_Stage0 = inCoverage;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

