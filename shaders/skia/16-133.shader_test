[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 uleftBorderColor_Stage1_c0_c0;
uniform vec4 urightBorderColor_Stage1_c0_c0;
uniform vec4 uscale0_1_Stage1_c0_c0_c1_c0;
uniform vec4 uscale2_3_Stage1_c0_c0_c1_c0;
uniform vec4 uscale4_5_Stage1_c0_c0_c1_c0;
uniform vec4 ubias0_1_Stage1_c0_c0_c1_c0;
uniform vec4 ubias2_3_Stage1_c0_c0_c1_c0;
uniform vec4 ubias4_5_Stage1_c0_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage1_c0_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage1_c0_c0_c1_c0;
in vec2 vTransformedCoords_0_Stage0;
flat in vec4 vcolor_Stage0;
in float vcoverage_Stage0;
flat in vec4 vgeomDomain_Stage0;
vec4 LinearGradientLayout_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float t = vTransformedCoords_0_Stage0.x + 9.9999997473787516e-06;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage1_c0_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage1_c0_c0_c1_c0.x) {
                scale = uscale0_1_Stage1_c0_c0_c1_c0;
                bias = ubias0_1_Stage1_c0_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage1_c0_c0_c1_c0;
                bias = ubias2_3_Stage1_c0_c0_c1_c0;
            }
        } else {
            {
                scale = uscale4_5_Stage1_c0_c0_c1_c0;
                bias = ubias4_5_Stage1_c0_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 ClampedGradientEffect_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = LinearGradientLayout_Stage1_c0_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage1_c0_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage1_c0_c0;
    } else {
        _output = UnrolledBinaryGradientColorizer_Stage1_c0_c0_c1_c0(t);
    }
    return _output;
}
void main() {
    vec4 outputCoverage_Stage0;
    {
        float coverage = vcoverage_Stage0 * gl_FragCoord.w;
        vec4 geoDomain;
        geoDomain = vgeomDomain_Stage0;
        if (coverage < 0.5) {
            vec4 dists4 = clamp(vec4(1.0, 1.0, -1.0, -1.0) * (gl_FragCoord.xyxy - geoDomain), 0.0, 1.0);
            vec2 dists2 = dists4.xy * dists4.zw;
            coverage = min(coverage, dists2.x * dists2.y);
        }
        outputCoverage_Stage0 = vec4(coverage);
    }
    vec4 output_Stage1;
    {
        output_Stage1 = ClampedGradientEffect_Stage1_c0_c0(vec4(1.0, 1.0, 1.0, 1.0));
    }
    {
        sk_FragColor = output_Stage1 * outputCoverage_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec4 positionWithCoverage;
in vec4 color;
in vec2 localCoord;
in vec4 geomDomain;
out vec2 vTransformedCoords_0_Stage0;
flat out vec4 vcolor_Stage0;
out float vcoverage_Stage0;
flat out vec4 vgeomDomain_Stage0;
void main() {
    vec3 position = positionWithCoverage.xyz;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vcolor_Stage0 = color;
    vcoverage_Stage0 = positionWithCoverage.w * positionWithCoverage.z;
    vgeomDomain_Stage0 = geomDomain;
    gl_Position = vec4(position.x, position.y, 0.0, position.z);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

