[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform float uinnerThreshold_Stage1_c0_c0;
uniform float uouterThreshold_Stage1_c0_c0;
uniform vec3 uedges_Stage1_c1_c0[4];
uniform sampler2D uTextureSampler_0_Stage1;
noperspective in vec3 vDashParams_Stage0;
noperspective in vec4 vRectParams_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
vec4 AlphaThresholdFragmentProcessor_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 color = _input;
    vec4 mask_color = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
    if (mask_color.w < 0.5) {
        if (color.w > uouterThreshold_Stage1_c0_c0) {
            float scale = uouterThreshold_Stage1_c0_c0 / color.w;
            color.xyz *= scale;
            color.w = uouterThreshold_Stage1_c0_c0;
        }
    } else if (color.w < uinnerThreshold_Stage1_c0_c0) {
        float scale = uinnerThreshold_Stage1_c0_c0 / max(0.0010000000474974513, color.w);
        color.xyz *= scale;
        color.w = uinnerThreshold_Stage1_c0_c0;
    }
    _output = color;
    return _output;
}
vec4 ConvexPoly_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    float alpha = 1.0;
    float edge;
    edge = dot(uedges_Stage1_c1_c0[0], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = clamp(edge, 0.0, 1.0);
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0[1], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = clamp(edge, 0.0, 1.0);
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0[2], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = clamp(edge, 0.0, 1.0);
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0[3], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = clamp(edge, 0.0, 1.0);
    alpha *= edge;
    _output = _input * alpha;
    return _output;
}
vec4 blend_plus(vec4 src, vec4 dst) {
    return min(src + dst, 1.0);
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
        float xShifted = vDashParams_Stage0.x - floor(vDashParams_Stage0.x / vDashParams_Stage0.z) * vDashParams_Stage0.z;
        vec2 fragPosShifted = vec2(xShifted, vDashParams_Stage0.y);
        float xSub, ySub;
        xSub = min(fragPosShifted.x - vRectParams_Stage0.x, 0.0);
        xSub += min(vRectParams_Stage0.z - fragPosShifted.x, 0.0);
        ySub = min(fragPosShifted.y - vRectParams_Stage0.y, 0.0);
        ySub += min(vRectParams_Stage0.w - fragPosShifted.y, 0.0);
        float alpha = (1.0 + max(xSub, -1.0)) * (1.0 + max(ySub, -1.0));
        outputCoverage_Stage0 = vec4(alpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_plus(AlphaThresholdFragmentProcessor_Stage1_c0_c0(inputColor), ConvexPoly_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1 * outputCoverage_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec3 inDashParams;
in vec4 inRect;
noperspective out vec3 vDashParams_Stage0;
noperspective out vec4 vRectParams_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vDashParams_Stage0 = inDashParams;
    vRectParams_Stage0 = inRect;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

