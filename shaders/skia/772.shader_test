[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform float uCoverage_Stage0;
uniform vec4 ucircle_Stage1_c0_c0_c0_c0;
uniform vec4 ucolor_Stage1_c0_c0_c1_c0;
uniform vec4 ucolor0_Stage1_c1_c0;
uniform vec4 ucolor1_Stage1_c1_c0;
uniform vec4 ucolor2_Stage1_c1_c0;
uniform vec4 ucolor3_Stage1_c1_c0;
uniform vec4 ucolor4_Stage1_c1_c0;
uniform vec4 ucolor5_Stage1_c1_c0;
uniform vec2 uDstTextureUpperLeft_Stage2;
uniform vec2 uDstTextureCoordScale_Stage2;
uniform sampler2D uDstTextureSampler_Stage2;
noperspective in vec2 vTransformedCoords_0_Stage0;
vec4 CircleEffect_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float d;
    {
        d = (1.0 - length((ucircle_Stage1_c0_c0_c0_c0.xy - gl_FragCoord.xy) * ucircle_Stage1_c0_c0_c0_c0.w)) * ucircle_Stage1_c0_c0_c0_c0.z;
    }
    {
        _output = _input * clamp(d, 0.0, 1.0);
    }
    return _output;
}
vec4 ConstColorProcessor_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    {
        _output = _input * ucolor_Stage1_c0_c0_c1_c0;
    }
    return _output;
}
vec4 blend_screen(vec4 src, vec4 dst) {
    return src + (1.0 - src) * dst;
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_screen(CircleEffect_Stage1_c0_c0_c0_c0(inputColor), ConstColorProcessor_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 Overdraw_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    _output = _input;
    float alpha = 255.0 * _output.w;
    if (alpha < 0.5) {
        _output = ucolor0_Stage1_c1_c0;
    } else if (alpha < 1.5) {
        _output = ucolor1_Stage1_c1_c0;
    } else if (alpha < 2.5) {
        _output = ucolor2_Stage1_c1_c0;
    } else if (alpha < 3.5) {
        _output = ucolor3_Stage1_c1_c0;
    } else if (alpha < 4.5) {
        _output = ucolor4_Stage1_c1_c0;
    } else {
        _output = ucolor5_Stage1_c1_c0;
    }
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
        outputCoverage_Stage0 = vec4(uCoverage_Stage0);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_dst_in(ComposeTwo_Stage1_c0_c0(inputColor), Overdraw_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        if (all(lessThanEqual(outputCoverage_Stage0.xyz, vec3(0.0)))) {
            discard;
        }
        vec2 _dstTexCoord = (gl_FragCoord.xy - uDstTextureUpperLeft_Stage2) * uDstTextureCoordScale_Stage2;
        _dstTexCoord.y = 1.0 - _dstTexCoord.y;
        vec4 _dstColor = texture(uDstTextureSampler_Stage2, _dstTexCoord);
        sk_FragColor = blend_src_in(output_Stage1, _dstColor);
        sk_FragColor = outputCoverage_Stage0 * sk_FragColor + (vec4(1.0) - outputCoverage_Stage0) * _dstColor;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

