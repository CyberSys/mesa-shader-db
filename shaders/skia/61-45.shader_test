[require]
GLSL >= 1.40

[fragment shader]
#version 140

uniform float uinnerThreshold_Stage3;
uniform float uouterThreshold_Stage3;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
uniform sampler2D uTextureSampler_0_Stage3;
noperspective in vec4 vcolor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
void main() {
    vec4 output_Stage1;
    {
        float nonZeroAlpha = max(1.0, 9.9999997473787516e-05);
        vec4 coord = vec4(vec4(1.0).xyz / nonZeroAlpha, nonZeroAlpha);
        coord = coord * 0.9960939884185791 + vec4(0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579);
        output_Stage1.w = texture(uTextureSampler_0_Stage1, vec2(coord.w, 0.125)).w;
        output_Stage1.x = texture(uTextureSampler_0_Stage1, vec2(coord.x, 0.375)).w;
        output_Stage1.y = texture(uTextureSampler_0_Stage1, vec2(coord.y, 0.625)).w;
        output_Stage1.z = texture(uTextureSampler_0_Stage1, vec2(coord.z, 0.875)).w;
        output_Stage1.xyz *= output_Stage1.w;
    }
    vec4 output_Stage2;
    {
        float nonZeroAlpha = max(output_Stage1.w, 9.9999997473787516e-05);
        vec4 coord = vec4(output_Stage1.xyz / nonZeroAlpha, nonZeroAlpha);
        coord = coord * 0.9960939884185791 + vec4(0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579);
        output_Stage2.w = texture(uTextureSampler_0_Stage2, vec2(coord.w, 0.125)).w;
        output_Stage2.x = texture(uTextureSampler_0_Stage2, vec2(coord.x, 0.375)).w;
        output_Stage2.y = texture(uTextureSampler_0_Stage2, vec2(coord.y, 0.625)).w;
        output_Stage2.z = texture(uTextureSampler_0_Stage2, vec2(coord.z, 0.875)).w;
        output_Stage2.xyz *= output_Stage2.w;
    }
    {
        vec4 color = output_Stage2;
        vec4 mask_color = texture(uTextureSampler_0_Stage3, vTransformedCoords_0_Stage0);
        if (mask_color.w < 0.5) {
            if (color.w > uouterThreshold_Stage3) {
                float scale = uouterThreshold_Stage3 / color.w;
                color.xyz *= scale;
                color.w = uouterThreshold_Stage3;
            }
        } else if (color.w < uinnerThreshold_Stage3) {
            float scale = uinnerThreshold_Stage3 / max(0.0010000000474974513, color.w);
            color.xyz *= scale;
            color.w = uinnerThreshold_Stage3;
        }
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec4 inColor;
noperspective out vec4 vcolor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

