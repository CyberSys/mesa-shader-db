[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform vec4 ucolor_Stage1;
uniform mat4 um_Stage2;
uniform vec4 uv_Stage2;
uniform sampler2D uTextureSampler_0_Stage0;
noperspective in vec2 vTextureCoords_Stage0;
flat in int vTexIndex_Stage0;
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
        vec4 texColor;
        {
            texColor = texture(uTextureSampler_0_Stage0, vTextureCoords_Stage0);
        }
        outputColor_Stage0 = outputColor_Stage0 * texColor;
    }
    vec4 output_Stage1;
    {
        {
            output_Stage1 = outputColor_Stage0 * ucolor_Stage1;
        }
    }
    vec4 output_Stage2;
    {
        vec4 inputColor = output_Stage1;
        {
            float nonZeroAlpha = max(inputColor.w, 9.9999997473787516e-05);
            inputColor = vec4(inputColor.xyz / nonZeroAlpha, inputColor.w);
        }
        output_Stage2 = um_Stage2 * inputColor + uv_Stage2;
        {
            output_Stage2 = clamp(output_Stage2, 0.0, 1.0);
        }
        {
            output_Stage2.xyz *= output_Stage2.w;
        }
    }
    {
        sk_FragColor = output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform vec2 uAtlasSizeInv_Stage0;
in vec2 inPosition;
in uvec2 inTextureCoords;
noperspective out vec2 vTextureCoords_Stage0;
flat out int vTexIndex_Stage0;
void main() {
    ivec2 signedCoords = ivec2(int(inTextureCoords.x), int(inTextureCoords.y));
    vec2 unormTexCoords = vec2(float(signedCoords.x / 2), float(signedCoords.y / 2));
    vTextureCoords_Stage0 = unormTexCoords * uAtlasSizeInv_Stage0;
    vTexIndex_Stage0 = 0;
    gl_Position = vec4(inPosition.x, inPosition.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

