[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 ucircle_Stage1;
uniform vec4 ucircle_Stage2;
uniform float uPixelSize_Stage3;
uniform vec2 uRange_Stage3;
uniform vec2 uImageIncrement_Stage4_c0_c0;
uniform vec4 uKernel_Stage4_c0_c0[5];
uniform vec2 uKernelOffset_Stage4_c0_c0;
uniform float uGain_Stage4_c0_c0;
uniform float uBias_Stage4_c0_c0;
uniform vec4 uTexDom_Stage4_c0_c0;
uniform vec3 uDecalParams_Stage4_c0_c0;
uniform sampler2D uTextureSampler_0_Stage3;
uniform sampler2D uTextureSampler_0_Stage4;
noperspective in vec2 vEllipseOffsets_Stage0;
noperspective in vec4 vEllipseRadii_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
vec4 MatrixConvolution_Stage4_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_1_Stage0 - uKernelOffset_Stage4_c0_c0 * uImageIncrement_Stage4_c0_c0;
    vec4 c;
    {
        float k = uKernel_Stage4_c0_c0[0].x;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
            if (err > uDecalParams_Stage4_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage4_c0_c0[0].y;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage4_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
            if (err > uDecalParams_Stage4_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage4_c0_c0[0].z;
        {
            vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage4_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
            if (err > uDecalParams_Stage4_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage4_c0_c0[0].w;
        {
            vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage4_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
            if (err > uDecalParams_Stage4_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage4_c0_c0[1].x;
        {
            vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage4_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
            if (err > uDecalParams_Stage4_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage4_c0_c0[1].y;
        {
            vec2 origCoord = coord + vec2(5.0, 0.0) * uImageIncrement_Stage4_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
            if (err > uDecalParams_Stage4_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage4_c0_c0[1].z;
        {
            vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage4_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
            if (err > uDecalParams_Stage4_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage4_c0_c0[1].w;
        {
            vec2 origCoord = coord + uImageIncrement_Stage4_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
            if (err > uDecalParams_Stage4_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage4_c0_c0[2].x;
        {
            vec2 origCoord = coord + vec2(2.0, 1.0) * uImageIncrement_Stage4_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
            if (err > uDecalParams_Stage4_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage4_c0_c0[2].y;
        {
            vec2 origCoord = coord + vec2(3.0, 1.0) * uImageIncrement_Stage4_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
            if (err > uDecalParams_Stage4_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage4_c0_c0[2].z;
        {
            vec2 origCoord = coord + vec2(4.0, 1.0) * uImageIncrement_Stage4_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
            if (err > uDecalParams_Stage4_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage4_c0_c0[2].w;
        {
            vec2 origCoord = coord + vec2(5.0, 1.0) * uImageIncrement_Stage4_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
            if (err > uDecalParams_Stage4_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage4_c0_c0[3].x;
        {
            vec2 origCoord = coord + vec2(0.0, 2.0) * uImageIncrement_Stage4_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
            if (err > uDecalParams_Stage4_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage4_c0_c0[3].y;
        {
            vec2 origCoord = coord + vec2(1.0, 2.0) * uImageIncrement_Stage4_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
            if (err > uDecalParams_Stage4_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage4_c0_c0[3].z;
        {
            vec2 origCoord = coord + vec2(2.0, 2.0) * uImageIncrement_Stage4_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
            if (err > uDecalParams_Stage4_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage4_c0_c0[3].w;
        {
            vec2 origCoord = coord + vec2(3.0, 2.0) * uImageIncrement_Stage4_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
            if (err > uDecalParams_Stage4_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage4_c0_c0[4].x;
        {
            vec2 origCoord = coord + vec2(4.0, 2.0) * uImageIncrement_Stage4_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
            if (err > uDecalParams_Stage4_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage4_c0_c0[4].y;
        {
            vec2 origCoord = coord + vec2(5.0, 2.0) * uImageIncrement_Stage4_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
            if (err > uDecalParams_Stage4_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        vec2 origCoord = vTransformedCoords_1_Stage0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
        if (err > uDecalParams_Stage4_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
            err = 0.0;
        }
        c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    _output.w = c.w;
    _output.xyz = clamp(sum.xyz * uGain_Stage4_c0_c0 + uBias_Stage4_c0_c0, 0.0, 1.0);
    _output.xyz *= _output.w;
    _output *= _input;
    return _output;
}
vec4 blend_exclusion(vec4 src, vec4 dst) {
    return vec4((dst.xyz + src.xyz) - (2.0 * dst.xyz) * src.xyz, src.w + (1.0 - src.w) * dst.w);
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vinColor_Stage0;
        vec2 offset = vEllipseOffsets_Stage0;
        float test = dot(offset, offset) - 1.0;
        vec2 grad = (2.0 * offset) * vEllipseRadii_Stage0.xy;
        float grad_dot = dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        float d;
        {
            d = (length((ucircle_Stage1.xy - gl_FragCoord.xy) * ucircle_Stage1.w) - 1.0) * ucircle_Stage1.z;
        }
        {
            output_Stage1 = d > 0.5 ? outputColor_Stage0 : vec4(0.0);
        }
    }
    vec4 output_Stage2;
    {
        float d;
        {
            d = (length((ucircle_Stage2.xy - gl_FragCoord.xy) * ucircle_Stage2.w) - 1.0) * ucircle_Stage2.z;
        }
        {
            output_Stage2 = output_Stage1 * clamp(d, 0.0, 1.0);
        }
    }
    vec4 output_Stage3;
    {
        output_Stage3 = vec4(1.0, 1.0, 1.0, 1.0);
        vec2 coord = vTransformedCoords_0_Stage0;
        coord.y -= 3.0 * uPixelSize_Stage3;
        for (int i = 0;i < 7; i++) {
            output_Stage3 = min(output_Stage3, texture(uTextureSampler_0_Stage3, coord));
            coord.y += uPixelSize_Stage3;
        }
        output_Stage3 *= outputCoverage_Stage0;
    }
    vec4 output_Stage4;
    {
        output_Stage4 = blend_exclusion(output_Stage3, MatrixConvolution_Stage4_c0_c0(vec4(1.0)));
    }
    {
        sk_FragColor = output_Stage2 * output_Stage4;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffset;
in vec4 inEllipseRadii;
noperspective out vec2 vEllipseOffsets_Stage0;
noperspective out vec4 vEllipseRadii_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vEllipseOffsets_Stage0 = inEllipseOffset;
    vEllipseRadii_Stage0 = inEllipseRadii;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

