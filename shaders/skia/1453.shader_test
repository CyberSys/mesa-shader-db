[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec2 ubaseFrequency_Stage1_c0_c0_c0_c0;
uniform float uz_Stage1_c0_c0_c0_c0;
uniform vec4 uboundsUniform_Stage1_c0_c0_c1_c0_c0_c0;
uniform float uxInvZoom_Stage1_c0_c0_c1_c0_c0_c0;
uniform float uyInvZoom_Stage1_c0_c0_c1_c0_c0_c0;
uniform float uxInvInset_Stage1_c0_c0_c1_c0_c0_c0;
uniform float uyInvInset_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec2 uoffset_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec2 ubaseFrequency_Stage1_c0_c0_c1_c0_c1_c0;
uniform float uz_Stage1_c0_c0_c1_c0_c1_c0;
uniform vec3 uedges_Stage1_c1_c0_c0_c0_c0_c0[4];
uniform vec2 uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec4 uKernel_Stage1_c1_c0_c0_c0_c1_c0[2];
uniform vec2 uKernelOffset_Stage1_c1_c0_c0_c0_c1_c0;
uniform float uGain_Stage1_c1_c0_c0_c0_c1_c0;
uniform float uBias_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec4 uTexDom_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec3 uDecalParams_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec2 uScale_Stage1_c1_c0_c1_c0_c0_c0;
uniform vec4 uTexDom_Stage1_c1_c0_c1_c0_c0_c0;
uniform vec3 uDecalParams_Stage1_c1_c0_c1_c0_c0_c0;
uniform vec2 uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
uniform vec4 uKernel_Stage1_c1_c0_c1_c0_c1_c0[5];
uniform vec2 uKernelOffset_Stage1_c1_c0_c1_c0_c1_c0;
uniform float uGain_Stage1_c1_c0_c1_c0_c1_c0;
uniform float uBias_Stage1_c1_c0_c1_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
uniform sampler2D uTextureSampler_3_Stage1;
uniform sampler2D uTextureSampler_4_Stage1;
uniform sampler2D uTextureSampler_5_Stage1;
uniform sampler2D uTextureSampler_6_Stage1;
uniform sampler2D uTextureSampler_7_Stage1;
uniform sampler2D uTextureSampler_8_Stage1;
noperspective in vec4 vinCircleEdge_Stage0;
noperspective in vec3 vinClipPlane_Stage0;
noperspective in vec3 vinUnionPlane_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vTransformedCoords_3_Stage0;
noperspective in vec2 vTransformedCoords_4_Stage0;
noperspective in vec2 vTransformedCoords_5_Stage0;
noperspective in vec2 vTransformedCoords_6_Stage0;
vec3 fade_Stage1_c0_c0_c0_c0(vec3 t) {
    return ((t * t) * t) * (t * (t * 6.0 - 15.0) + 10.0);
}
float perm_Stage1_c0_c0_c0_c0(float x) {
    return texture(uTextureSampler_0_Stage1, vec2(fract(x / 256.0), 0.0)).x * 255.0;
}
float grad_Stage1_c0_c0_c0_c0(float x, vec3 p) {
    return dot(texture(uTextureSampler_1_Stage1, vec2(fract(x / 16.0), 0.0)).xyz * 255.0 - vec3(1.0), p);
}
float lerp_Stage1_c0_c0_c0_c0(float a, float b, float w) {
    return a + w * (b - a);
}
float noise_Stage1_c0_c0_c0_c0(vec3 p) {
    vec3 P = mod(floor(p), 256.0);
    p -= floor(p);
    vec3 f = fade_Stage1_c0_c0_c0_c0(p);
    float A = perm_Stage1_c0_c0_c0_c0(P.x) + P.y;
    float AA = perm_Stage1_c0_c0_c0_c0(A) + P.z;
    float AB = perm_Stage1_c0_c0_c0_c0(A + 1.0) + P.z;
    float B = perm_Stage1_c0_c0_c0_c0(P.x + 1.0) + P.y;
    float BA = perm_Stage1_c0_c0_c0_c0(B) + P.z;
    float BB = perm_Stage1_c0_c0_c0_c0(B + 1.0) + P.z;
    float result = lerp_Stage1_c0_c0_c0_c0(lerp_Stage1_c0_c0_c0_c0(lerp_Stage1_c0_c0_c0_c0(grad_Stage1_c0_c0_c0_c0(perm_Stage1_c0_c0_c0_c0(AA), p), grad_Stage1_c0_c0_c0_c0(perm_Stage1_c0_c0_c0_c0(BA), p + vec3(-1.0, 0.0, 0.0)), f.x), lerp_Stage1_c0_c0_c0_c0(grad_Stage1_c0_c0_c0_c0(perm_Stage1_c0_c0_c0_c0(AB), p + vec3(0.0, -1.0, 0.0)), grad_Stage1_c0_c0_c0_c0(perm_Stage1_c0_c0_c0_c0(BB), p + vec3(-1.0, -1.0, 0.0)), f.x), f.y), lerp_Stage1_c0_c0_c0_c0(lerp_Stage1_c0_c0_c0_c0(grad_Stage1_c0_c0_c0_c0(perm_Stage1_c0_c0_c0_c0(AA + 1.0), p + vec3(0.0, 0.0, -1.0)), grad_Stage1_c0_c0_c0_c0(perm_Stage1_c0_c0_c0_c0(BA + 1.0), p + vec3(-1.0, 0.0, -1.0)), f.x), lerp_Stage1_c0_c0_c0_c0(grad_Stage1_c0_c0_c0_c0(perm_Stage1_c0_c0_c0_c0(AB + 1.0), p + vec3(0.0, -1.0, -1.0)), grad_Stage1_c0_c0_c0_c0(perm_Stage1_c0_c0_c0_c0(BB + 1.0), p + vec3(-1.0, -1.0, -1.0)), f.x), f.y), f.z);
    return result;
}
float noiseOctaves_Stage1_c0_c0_c0_c0(vec3 p) {
    float result = 0.0;
    float ratio = 1.0;
    for (float i = 0.0;i < 4.0; i++) {
        result += noise_Stage1_c0_c0_c0_c0(p) / ratio;
        p *= 2.0;
        ratio *= 2.0;
    }
    return (result + 1.0) / 2.0;
}
vec4 ImprovedPerlinNoise_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 coords = vTransformedCoords_0_Stage0 * ubaseFrequency_Stage1_c0_c0_c0_c0;
    float r = noiseOctaves_Stage1_c0_c0_c0_c0(vec3(coords, uz_Stage1_c0_c0_c0_c0));
    float g = noiseOctaves_Stage1_c0_c0_c0_c0(vec3(coords, uz_Stage1_c0_c0_c0_c0));
    float b = noiseOctaves_Stage1_c0_c0_c0_c0(vec3(coords, uz_Stage1_c0_c0_c0_c0));
    float a = noiseOctaves_Stage1_c0_c0_c0_c0(vec3(coords, uz_Stage1_c0_c0_c0_c0));
    _output = vec4(r, g, b, a);
    _output = clamp(_output, 0.0, 1.0);
    _output = vec4(_output.xyz * _output.www, _output.w);
    return _output;
}
vec4 MagnifierEffect_Stage1_c0_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_1_Stage0;
    vec2 zoom_coord = uoffset_Stage1_c0_c0_c1_c0_c0_c0 + coord * vec2(uxInvZoom_Stage1_c0_c0_c1_c0_c0_c0, uyInvZoom_Stage1_c0_c0_c1_c0_c0_c0);
    vec2 delta = (coord - uboundsUniform_Stage1_c0_c0_c1_c0_c0_c0.xy) * uboundsUniform_Stage1_c0_c0_c1_c0_c0_c0.zw;
    delta = min(delta, vec2(1.0, 1.0) - delta);
    delta *= vec2(uxInvInset_Stage1_c0_c0_c1_c0_c0_c0, uyInvInset_Stage1_c0_c0_c1_c0_c0_c0);
    float weight = 0.0;
    if (delta.x < 2.0 && delta.y < 2.0) {
        delta = vec2(2.0, 2.0) - delta;
        float dist = length(delta);
        dist = max(2.0 - dist, 0.0);
        weight = min(dist * dist, 1.0);
    } else {
        vec2 delta_squared = delta * delta;
        weight = min(min(delta_squared.x, delta_squared.y), 1.0);
    }
    _output = texture(uTextureSampler_2_Stage1, mix(coord, zoom_coord, weight));
    return _output;
}
vec3 fade_Stage1_c0_c0_c1_c0_c1_c0(vec3 t) {
    return ((t * t) * t) * (t * (t * 6.0 - 15.0) + 10.0);
}
float perm_Stage1_c0_c0_c1_c0_c1_c0(float x) {
    return texture(uTextureSampler_3_Stage1, vec2(fract(x / 256.0), 0.0)).x * 255.0;
}
float grad_Stage1_c0_c0_c1_c0_c1_c0(float x, vec3 p) {
    return dot(texture(uTextureSampler_4_Stage1, vec2(fract(x / 16.0), 0.0)).xyz * 255.0 - vec3(1.0), p);
}
float lerp_Stage1_c0_c0_c1_c0_c1_c0(float a, float b, float w) {
    return a + w * (b - a);
}
float noise_Stage1_c0_c0_c1_c0_c1_c0(vec3 p) {
    vec3 P = mod(floor(p), 256.0);
    p -= floor(p);
    vec3 f = fade_Stage1_c0_c0_c1_c0_c1_c0(p);
    float A = perm_Stage1_c0_c0_c1_c0_c1_c0(P.x) + P.y;
    float AA = perm_Stage1_c0_c0_c1_c0_c1_c0(A) + P.z;
    float AB = perm_Stage1_c0_c0_c1_c0_c1_c0(A + 1.0) + P.z;
    float B = perm_Stage1_c0_c0_c1_c0_c1_c0(P.x + 1.0) + P.y;
    float BA = perm_Stage1_c0_c0_c1_c0_c1_c0(B) + P.z;
    float BB = perm_Stage1_c0_c0_c1_c0_c1_c0(B + 1.0) + P.z;
    float result = lerp_Stage1_c0_c0_c1_c0_c1_c0(lerp_Stage1_c0_c0_c1_c0_c1_c0(lerp_Stage1_c0_c0_c1_c0_c1_c0(grad_Stage1_c0_c0_c1_c0_c1_c0(perm_Stage1_c0_c0_c1_c0_c1_c0(AA), p), grad_Stage1_c0_c0_c1_c0_c1_c0(perm_Stage1_c0_c0_c1_c0_c1_c0(BA), p + vec3(-1.0, 0.0, 0.0)), f.x), lerp_Stage1_c0_c0_c1_c0_c1_c0(grad_Stage1_c0_c0_c1_c0_c1_c0(perm_Stage1_c0_c0_c1_c0_c1_c0(AB), p + vec3(0.0, -1.0, 0.0)), grad_Stage1_c0_c0_c1_c0_c1_c0(perm_Stage1_c0_c0_c1_c0_c1_c0(BB), p + vec3(-1.0, -1.0, 0.0)), f.x), f.y), lerp_Stage1_c0_c0_c1_c0_c1_c0(lerp_Stage1_c0_c0_c1_c0_c1_c0(grad_Stage1_c0_c0_c1_c0_c1_c0(perm_Stage1_c0_c0_c1_c0_c1_c0(AA + 1.0), p + vec3(0.0, 0.0, -1.0)), grad_Stage1_c0_c0_c1_c0_c1_c0(perm_Stage1_c0_c0_c1_c0_c1_c0(BA + 1.0), p + vec3(-1.0, 0.0, -1.0)), f.x), lerp_Stage1_c0_c0_c1_c0_c1_c0(grad_Stage1_c0_c0_c1_c0_c1_c0(perm_Stage1_c0_c0_c1_c0_c1_c0(AB + 1.0), p + vec3(0.0, -1.0, -1.0)), grad_Stage1_c0_c0_c1_c0_c1_c0(perm_Stage1_c0_c0_c1_c0_c1_c0(BB + 1.0), p + vec3(-1.0, -1.0, -1.0)), f.x), f.y), f.z);
    return result;
}
float noiseOctaves_Stage1_c0_c0_c1_c0_c1_c0(vec3 p) {
    float result = 0.0;
    float ratio = 1.0;
    for (float i = 0.0;i < 3.0; i++) {
        result += noise_Stage1_c0_c0_c1_c0_c1_c0(p) / ratio;
        p *= 2.0;
        ratio *= 2.0;
    }
    return (result + 1.0) / 2.0;
}
vec4 ImprovedPerlinNoise_Stage1_c0_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 coords = vTransformedCoords_2_Stage0 * ubaseFrequency_Stage1_c0_c0_c1_c0_c1_c0;
    float r = noiseOctaves_Stage1_c0_c0_c1_c0_c1_c0(vec3(coords, uz_Stage1_c0_c0_c1_c0_c1_c0));
    float g = noiseOctaves_Stage1_c0_c0_c1_c0_c1_c0(vec3(coords, uz_Stage1_c0_c0_c1_c0_c1_c0));
    float b = noiseOctaves_Stage1_c0_c0_c1_c0_c1_c0(vec3(coords, uz_Stage1_c0_c0_c1_c0_c1_c0));
    float a = noiseOctaves_Stage1_c0_c0_c1_c0_c1_c0(vec3(coords, uz_Stage1_c0_c0_c1_c0_c1_c0));
    _output = vec4(r, g, b, a);
    _output = clamp(_output, 0.0, 1.0);
    _output = vec4(_output.xyz * _output.www, _output.w);
    return _output;
}
vec4 blend_src_over(vec4 src, vec4 dst) {
    return src + (1.0 - src.w) * dst;
}
vec4 ComposeTwo_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_over(MagnifierEffect_Stage1_c0_c0_c1_c0_c0_c0(inputColor), ImprovedPerlinNoise_Stage1_c0_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_plus(vec4 src, vec4 dst) {
    return min(src + dst, 1.0);
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_plus(ImprovedPerlinNoise_Stage1_c0_c0_c0_c0(inputColor), ComposeTwo_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ConvexPoly_Stage1_c1_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float alpha = 1.0;
    float edge;
    edge = dot(uedges_Stage1_c1_c0_c0_c0_c0_c0[0], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = clamp(edge, 0.0, 1.0);
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0_c0_c0_c0_c0[1], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = clamp(edge, 0.0, 1.0);
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0_c0_c0_c0_c0[2], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = clamp(edge, 0.0, 1.0);
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0_c0_c0_c0_c0[3], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = clamp(edge, 0.0, 1.0);
    alpha *= edge;
    _output = _input * alpha;
    return _output;
}
vec4 MatrixConvolution_Stage1_c1_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_3_Stage0 - uKernelOffset_Stage1_c1_c0_c0_c0_c1_c0 * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    vec4 c;
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[0].x;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_5_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[0].y;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_5_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[0].z;
        {
            vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_5_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[0].w;
        {
            vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_5_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[1].x;
        {
            vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_5_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[1].y;
        {
            vec2 origCoord = coord + vec2(5.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_5_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[1].z;
        {
            vec2 origCoord = coord + vec2(6.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_5_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    _output = sum * uGain_Stage1_c1_c0_c0_c0_c1_c0 + uBias_Stage1_c1_c0_c0_c0_c1_c0;
    _output.w = clamp(_output.w, 0.0, 1.0);
    _output.xyz = clamp(_output.xyz, 0.0, _output.w);
    _output *= _input;
    return _output;
}
vec4 blend_darken(vec4 src, vec4 dst) {
    vec4 result = blend_src_over(src, dst);
    result.xyz = min(result.xyz, (1.0 - dst.w) * src.xyz + dst.xyz);
    return result;
}
vec4 ComposeTwo_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_darken(ConvexPoly_Stage1_c1_c0_c0_c0_c0_c0(inputColor), MatrixConvolution_Stage1_c1_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 DisplacementMap_Stage1_c1_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 dColor = texture(uTextureSampler_6_Stage1, vTransformedCoords_4_Stage0);
    dColor.xyz = dColor.w < 9.9999999747524271e-07 ? vec3(0.0) : clamp(dColor.xyz / dColor.w, 0.0, 1.0);
    vec2 cCoords = vTransformedCoords_5_Stage0 + uScale_Stage1_c1_c0_c1_c0_c0_c0 * (dColor.wz - vec2(0.5));
    {
        vec2 origCoord = cCoords;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c1_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_7_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c1_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c1_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        _output = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    return _output;
}
vec4 MatrixConvolution_Stage1_c1_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_6_Stage0 - uKernelOffset_Stage1_c1_c0_c1_c0_c1_c0 * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
    vec4 c;
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[0].x;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_8_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[0].y;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_8_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[0].z;
        {
            vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_8_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[0].w;
        {
            vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_8_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[1].x;
        {
            vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_8_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[1].y;
        {
            vec2 origCoord = coord + vec2(5.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_8_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[1].z;
        {
            vec2 origCoord = coord + vec2(6.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_8_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[1].w;
        {
            vec2 origCoord = coord + vec2(7.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_8_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[2].x;
        {
            vec2 origCoord = coord + vec2(8.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_8_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[2].y;
        {
            vec2 origCoord = coord + vec2(9.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_8_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[2].z;
        {
            vec2 origCoord = coord + vec2(10.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_8_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[2].w;
        {
            vec2 origCoord = coord + vec2(11.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_8_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[3].x;
        {
            vec2 origCoord = coord + vec2(12.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_8_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[3].y;
        {
            vec2 origCoord = coord + vec2(13.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_8_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[3].z;
        {
            vec2 origCoord = coord + vec2(14.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_8_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[3].w;
        {
            vec2 origCoord = coord + vec2(15.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_8_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[4].x;
        {
            vec2 origCoord = coord + vec2(16.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_8_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        vec2 origCoord = vTransformedCoords_6_Stage0;
        vec2 clampedCoord;
        clampedCoord = origCoord;
        vec4 textureColor = texture(uTextureSampler_8_Stage1, clampedCoord);
        c = textureColor;
    }
    _output.w = c.w;
    _output.xyz = clamp(sum.xyz * uGain_Stage1_c1_c0_c1_c0_c1_c0 + uBias_Stage1_c1_c0_c1_c0_c1_c0, 0.0, 1.0);
    _output.xyz *= _output.w;
    _output *= _input;
    return _output;
}
vec4 blend_modulate(vec4 src, vec4 dst) {
    return src * dst;
}
vec4 ComposeTwo_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_modulate(DisplacementMap_Stage1_c1_c0_c1_c0_c0_c0(inputColor), MatrixConvolution_Stage1_c1_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_darken(ComposeTwo_Stage1_c1_c0_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_src_atop(vec4 src, vec4 dst) {
    return dst.w * src + (1.0 - src.w) * dst;
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        vec4 circleEdge;
        circleEdge = vinCircleEdge_Stage0;
        vec3 clipPlane;
        clipPlane = vinClipPlane_Stage0;
        vec3 unionPlane;
        unionPlane = vinUnionPlane_Stage0;
        outputColor_Stage0 = vinColor_Stage0;
        float d = length(circleEdge.xy);
        float distanceToOuterEdge = circleEdge.z * (1.0 - d);
        float edgeAlpha = clamp(distanceToOuterEdge, 0.0, 1.0);
        float distanceToInnerEdge = circleEdge.z * (d - circleEdge.w);
        float innerAlpha = clamp(distanceToInnerEdge, 0.0, 1.0);
        edgeAlpha *= innerAlpha;
        float clip = clamp(circleEdge.z * dot(circleEdge.xy, clipPlane.xy) + clipPlane.z, 0.0, 1.0);
        clip = clamp(clip + clamp(circleEdge.z * dot(circleEdge.xy, unionPlane.xy) + unionPlane.z, 0.0, 1.0), 0.0, 1.0);
        edgeAlpha *= clip;
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_src_atop(ComposeTwo_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = (1.0 - output_Stage1.w) * outputCoverage_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
uniform mat3 uCoordTransformMatrix_4_Stage0;
uniform mat3 uCoordTransformMatrix_5_Stage0;
uniform mat3 uCoordTransformMatrix_6_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec4 inCircleEdge;
in vec3 inClipPlane;
in vec3 inUnionPlane;
noperspective out vec4 vinCircleEdge_Stage0;
noperspective out vec3 vinClipPlane_Stage0;
noperspective out vec3 vinUnionPlane_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vTransformedCoords_3_Stage0;
noperspective out vec2 vTransformedCoords_4_Stage0;
noperspective out vec2 vTransformedCoords_5_Stage0;
noperspective out vec2 vTransformedCoords_6_Stage0;
void main() {
    vinCircleEdge_Stage0 = inCircleEdge;
    vinClipPlane_Stage0 = inClipPlane;
    vinUnionPlane_Stage0 = inUnionPlane;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_4_Stage0 = (uCoordTransformMatrix_4_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_5_Stage0 = (uCoordTransformMatrix_5_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_6_Stage0 = (uCoordTransformMatrix_6_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

