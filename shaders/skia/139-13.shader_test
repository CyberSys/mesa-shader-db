[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec2 uImageIncrement_Stage2;
uniform vec2 uBounds_Stage2;
uniform vec4 uKernel_Stage2[6];
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
void main() {
    vec4 output_Stage1;
    {
        output_Stage1 = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
    }
    vec4 output_Stage2;
    {
        output_Stage2 = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_1_Stage0 - 11.0 * uImageIncrement_Stage2;
        vec2 coordSampled = vec2(0.0, 0.0);
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[0].x;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[0].y;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[0].z;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[0].w;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[1].x;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[1].y;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[1].z;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[1].w;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[2].x;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[2].y;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[2].z;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[2].w;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[3].x;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[3].y;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[3].z;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[3].w;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[4].x;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[4].y;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[4].z;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[4].w;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[5].x;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[5].y;
        }
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        if (coord.x >= uBounds_Stage2.x && coord.x <= uBounds_Stage2.y) {
            output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[5].z;
        }
        coord += uImageIncrement_Stage2;
        output_Stage2 *= output_Stage1;
    }
    {
        sk_FragColor = output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 position;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(localCoord, 1.0)).xy;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

