[require]
GLSL >= 1.40
GL_KHR_blend_equation_advanced

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 ucircle_Stage1_c0_c0_c0_c0;
uniform vec4 ucolor_Stage1_c0_c0_c1_c0;
uniform vec2 ubaseFrequency_Stage1_c1_c0;
uniform float uz_Stage1_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
noperspective in vec4 vcolor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
vec4 CircleEffect_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float d;
    {
        d = (length((ucircle_Stage1_c0_c0_c0_c0.xy - gl_FragCoord.xy) * ucircle_Stage1_c0_c0_c0_c0.w) - 1.0) * ucircle_Stage1_c0_c0_c0_c0.z;
    }
    {
        _output = d > 0.5 ? _input : vec4(0.0);
    }
    return _output;
}
vec4 ConstColorProcessor_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    {
        _output = ucolor_Stage1_c0_c0_c1_c0;
    }
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_dst_in(CircleEffect_Stage1_c0_c0_c0_c0(inputColor), ConstColorProcessor_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec3 fade_Stage1_c1_c0(vec3 t) {
    return ((t * t) * t) * (t * (t * 6.0 - 15.0) + 10.0);
}
float perm_Stage1_c1_c0(float x) {
    return texture(uTextureSampler_0_Stage1, vec2(fract(x / 256.0), 0.0)).x * 255.0;
}
float grad_Stage1_c1_c0(float x, vec3 p) {
    return dot(texture(uTextureSampler_1_Stage1, vec2(fract(x / 16.0), 0.0)).xyz * 255.0 - vec3(1.0), p);
}
float lerp_Stage1_c1_c0(float a, float b, float w) {
    return a + w * (b - a);
}
float noise_Stage1_c1_c0(vec3 p) {
    vec3 P = mod(floor(p), 256.0);
    p -= floor(p);
    vec3 f = fade_Stage1_c1_c0(p);
    float A = perm_Stage1_c1_c0(P.x) + P.y;
    float AA = perm_Stage1_c1_c0(A) + P.z;
    float AB = perm_Stage1_c1_c0(A + 1.0) + P.z;
    float B = perm_Stage1_c1_c0(P.x + 1.0) + P.y;
    float BA = perm_Stage1_c1_c0(B) + P.z;
    float BB = perm_Stage1_c1_c0(B + 1.0) + P.z;
    float result = lerp_Stage1_c1_c0(lerp_Stage1_c1_c0(lerp_Stage1_c1_c0(grad_Stage1_c1_c0(perm_Stage1_c1_c0(AA), p), grad_Stage1_c1_c0(perm_Stage1_c1_c0(BA), p + vec3(-1.0, 0.0, 0.0)), f.x), lerp_Stage1_c1_c0(grad_Stage1_c1_c0(perm_Stage1_c1_c0(AB), p + vec3(0.0, -1.0, 0.0)), grad_Stage1_c1_c0(perm_Stage1_c1_c0(BB), p + vec3(-1.0, -1.0, 0.0)), f.x), f.y), lerp_Stage1_c1_c0(lerp_Stage1_c1_c0(grad_Stage1_c1_c0(perm_Stage1_c1_c0(AA + 1.0), p + vec3(0.0, 0.0, -1.0)), grad_Stage1_c1_c0(perm_Stage1_c1_c0(BA + 1.0), p + vec3(-1.0, 0.0, -1.0)), f.x), lerp_Stage1_c1_c0(grad_Stage1_c1_c0(perm_Stage1_c1_c0(AB + 1.0), p + vec3(0.0, -1.0, -1.0)), grad_Stage1_c1_c0(perm_Stage1_c1_c0(BB + 1.0), p + vec3(-1.0, -1.0, -1.0)), f.x), f.y), f.z);
    return result;
}
float noiseOctaves_Stage1_c1_c0(vec3 p) {
    float result = 0.0;
    float ratio = 1.0;
    for (float i = 0.0;i < 7.0; i++) {
        result += noise_Stage1_c1_c0(p) / ratio;
        p *= 2.0;
        ratio *= 2.0;
    }
    return (result + 1.0) / 2.0;
}
vec4 ImprovedPerlinNoise_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 coords = vTransformedCoords_0_Stage0 * ubaseFrequency_Stage1_c1_c0;
    float r = noiseOctaves_Stage1_c1_c0(vec3(coords, uz_Stage1_c1_c0));
    float g = noiseOctaves_Stage1_c1_c0(vec3(coords, uz_Stage1_c1_c0));
    float b = noiseOctaves_Stage1_c1_c0(vec3(coords, uz_Stage1_c1_c0));
    float a = noiseOctaves_Stage1_c1_c0(vec3(coords, uz_Stage1_c1_c0));
    _output = vec4(r, g, b, a);
    _output = clamp(_output, 0.0, 1.0);
    _output = vec4(_output.xyz * _output.www, _output.w);
    return _output;
}
float _guarded_divide(float n, float d) {
    return n / d;
}
float _soft_light_component(float sc, float sa, float dc, float da) {
    if (2.0 * sc <= sa) {
        return (_guarded_divide((dc * dc) * (sa - 2.0 * sc), da) + (1.0 - da) * sc) + dc * ((-sa + 2.0 * sc) + 1.0);
    } else if (4.0 * dc <= da) {
        float DSqd = dc * dc;
        float DCub = DSqd * dc;
        float DaSqd = da * da;
        float DaCub = DaSqd * da;
        return _guarded_divide(((DaSqd * (sc - dc * ((3.0 * sa - 6.0 * sc) - 1.0)) + ((12.0 * da) * DSqd) * (sa - 2.0 * sc)) - (16.0 * DCub) * (sa - 2.0 * sc)) - DaCub * sc, DaSqd);
    }
    return ((dc * ((sa - 2.0 * sc) + 1.0) + sc) - sqrt(da * dc) * (sa - 2.0 * sc)) - da * sc;
}
vec4 blend_soft_light(vec4 src, vec4 dst) {
    if (dst.w == 0.0) {
        return src;
    }
    return vec4(_soft_light_component(src.x, src.w, dst.x, dst.w), _soft_light_component(src.y, src.w, dst.y, dst.w), _soft_light_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_soft_light(ComposeTwo_Stage1_c0_c0(inputColor), ImprovedPerlinNoise_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec4 inColor;
noperspective out vec4 vcolor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

