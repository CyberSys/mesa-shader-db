[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform vec2 uImageIncrement_Stage2;
uniform vec2 uBounds_Stage2;
uniform vec4 uKernel_Stage2[2];
uniform vec4 uinnerRect_Stage5;
uniform vec4 uinvRadiiLTRB_Stage5;
uniform vec4 uellipse_Stage6_c1_c0;
uniform vec4 urectH_Stage6_c2_c0;
uniform float uinvSixSigma_Stage6_c2_c0;
uniform vec2 uDstTextureUpperLeft_Stage7;
uniform vec2 uDstTextureCoordScale_Stage7;
uniform sampler2D uTextureSampler_0_Stage2;
uniform sampler2D uTextureSampler_0_Stage6;
uniform sampler2D uDstTextureSampler_Stage7;
noperspective in vec2 vTransformedCoords_0_Stage0;
vec4 ConfigConversionEffect_Stage1_c0_c0(vec4 _input, vec2 _coords) {
    vec4 _output;
    _output = floor(_input * 255.0 + 0.5) / 255.0;
    {
        _output.xyz = floor((_output.xyz * _output.w) * 255.0 + 0.5) / 255.0;
    }
    return _output;
}
vec4 EllipseEffect_Stage6_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 d = gl_FragCoord.xy - uellipse_Stage6_c1_c0.xy;
    vec2 Z = d * uellipse_Stage6_c1_c0.zw;
    float implicit = dot(Z, d) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    {
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
    }
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha;
    {
        alpha = approx_dist > 0.0 ? 1.0 : 0.0;
    }
    _output = _input * alpha;
    return _output;
}
vec4 RectBlurEffect_Stage6_c2_c0(vec4 _input) {
    vec4 _output;
    float xCoverage, yCoverage;
    {
        float x, y;
        {
            x = max(urectH_Stage6_c2_c0.x - gl_FragCoord.x, gl_FragCoord.x - urectH_Stage6_c2_c0.z);
            y = max(urectH_Stage6_c2_c0.y - gl_FragCoord.y, gl_FragCoord.y - urectH_Stage6_c2_c0.w);
        }
        xCoverage = texture(uTextureSampler_0_Stage6, vec2(x * uinvSixSigma_Stage6_c2_c0, 0.5)).w;
        yCoverage = texture(uTextureSampler_0_Stage6, vec2(y * uinvSixSigma_Stage6_c2_c0, 0.5)).w;
        _output = (_input * xCoverage) * yCoverage;
    }
    _output = (_input * xCoverage) * yCoverage;
    return _output;
}
float _blend_color_saturation(vec3 color) {
    return max(max(color.x, color.y), color.z) - min(min(color.x, color.y), color.z);
}
vec3 _blend_set_color_saturation_helper(vec3 minMidMax, float sat) {
    if (minMidMax.x < minMidMax.z) {
        return vec3(0.0, (sat * (minMidMax.y - minMidMax.x)) / (minMidMax.z - minMidMax.x), sat);
    }
    return vec3(0.0);
}
vec3 _blend_set_color_saturation(vec3 hueLumColor, vec3 satColor) {
    float sat = _blend_color_saturation(satColor);
    if (hueLumColor.x <= hueLumColor.y) {
        if (hueLumColor.y <= hueLumColor.z) {
            hueLumColor.xyz = _blend_set_color_saturation_helper(hueLumColor, sat);
        } else if (hueLumColor.x <= hueLumColor.z) {
            hueLumColor.xzy = _blend_set_color_saturation_helper(hueLumColor.xzy, sat);
        } else {
            hueLumColor.zxy = _blend_set_color_saturation_helper(hueLumColor.zxy, sat);
        }
    } else if (hueLumColor.x <= hueLumColor.z) {
        hueLumColor.yxz = _blend_set_color_saturation_helper(hueLumColor.yxz, sat);
    } else if (hueLumColor.y <= hueLumColor.z) {
        hueLumColor.yzx = _blend_set_color_saturation_helper(hueLumColor.yzx, sat);
    } else {
        hueLumColor.zyx = _blend_set_color_saturation_helper(hueLumColor.zyx, sat);
    }
    return hueLumColor;
}
float _blend_color_luminance(vec3 color) {
    return dot(vec3(0.30000001192092896, 0.5899999737739563, 0.10999999940395355), color);
}
vec3 _blend_set_color_luminance(vec3 hueSatColor, float alpha, vec3 lumColor) {
    float lum = _blend_color_luminance(lumColor);
    vec3 result = (lum - _blend_color_luminance(hueSatColor)) + hueSatColor;
    float minComp = min(min(result.x, result.y), result.z);
    float maxComp = max(max(result.x, result.y), result.z);
    if (minComp < 0.0 && lum != minComp) {
        result = lum + ((result - lum) * lum) / (lum - minComp);
    }
    if (maxComp > alpha && maxComp != lum) {
        return lum + ((result - lum) * (alpha - lum)) / (maxComp - lum);
    }
    return result;
}
vec4 blend_saturation(vec4 src, vec4 dst) {
    float alpha = dst.w * src.w;
    vec3 sda = src.xyz * dst.w;
    vec3 dsa = dst.xyz * src.w;
    return vec4((((_blend_set_color_luminance(_blend_set_color_saturation(dsa, sda), alpha, dsa) + dst.xyz) - dsa) + src.xyz) - sda, (src.w + dst.w) - alpha);
}
vec4 blend_dst_atop(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + src.w * dst;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        output_Stage1 = ConfigConversionEffect_Stage1_c0_c0(outputColor_Stage0, gl_FragCoord.xy);
    }
    vec4 output_Stage2;
    {
        output_Stage2 = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_0_Stage0 - 3.0 * uImageIncrement_Stage2;
        vec2 coordSampled = vec2(0.0, 0.0);
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[0].x;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[0].y;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[0].z;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[0].w;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[1].x;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[1].y;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[1].z;
        coord += uImageIncrement_Stage2;
        output_Stage2 *= output_Stage1;
    }
    vec4 output_Stage3;
    {
        {
            float alpha = clamp(output_Stage2.w, 0.0, 1.0);
            output_Stage3 = vec4(clamp(output_Stage2.xyz, 0.0, alpha), alpha);
        }
    }
    vec4 output_Stage4;
    {
        output_Stage4 = floor(vec4(255.0) + 0.5) / 255.0;
        {
            output_Stage4.xyz = output_Stage4.w <= 0.0 ? vec3(0.0) : floor((output_Stage4.xyz / output_Stage4.w) * 255.0 + 0.5) / 255.0;
        }
    }
    vec4 output_Stage5;
    {
        vec2 dxy0 = uinnerRect_Stage5.xy - gl_FragCoord.xy;
        vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage5.zw;
        vec2 dxy = max(max(dxy0, dxy1), 0.0);
        vec2 Z = max(max(dxy0 * uinvRadiiLTRB_Stage5.xy, dxy1 * uinvRadiiLTRB_Stage5.zw), 0.0);
        float implicit = dot(Z, dxy) - 1.0;
        float grad_dot = 4.0 * dot(Z, Z);
        grad_dot = max(grad_dot, 9.9999997473787516e-05);
        float approx_dist = implicit * inversesqrt(grad_dot);
        float alpha = clamp(0.5 - approx_dist, 0.0, 1.0);
        output_Stage5 = output_Stage4 * alpha;
    }
    vec4 output_Stage6;
    {
        vec4 inputColor = vec4(output_Stage5.xyz, 1.0);
        output_Stage6 = blend_saturation(EllipseEffect_Stage6_c1_c0(inputColor), RectBlurEffect_Stage6_c2_c0(inputColor));
        output_Stage6 *= output_Stage5.w;
    }
    {
        if (all(lessThanEqual(output_Stage6.xyz, vec3(0.0)))) {
            discard;
        }
        vec2 _dstTexCoord = (gl_FragCoord.xy - uDstTextureUpperLeft_Stage7) * uDstTextureCoordScale_Stage7;
        vec4 _dstColor = texture(uDstTextureSampler_Stage7, _dstTexCoord);
        sk_FragColor = blend_dst_atop(output_Stage3, _dstColor);
        sk_FragColor = output_Stage6 * sk_FragColor + (vec4(1.0) - output_Stage6) * _dstColor;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 position;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vec2 pos2 = (uViewM_Stage0 * vec3(position, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(position, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

