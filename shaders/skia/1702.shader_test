[require]
GLSL >= 1.40
GL_KHR_blend_equation_advanced

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform mat4 um_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec4 uv_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec4 urectH_Stage1_c0_c0_c1_c0_c0_c0;
uniform float uinvSixSigma_Stage1_c0_c0_c1_c0_c0_c0;
uniform mat4 um_Stage1_c0_c0_c1_c0_c1_c0;
uniform vec4 uv_Stage1_c0_c0_c1_c0_c1_c0;
uniform vec4 ucolor_Stage1_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
noperspective in vec4 vQuadEdge_Stage0;
noperspective in vec4 vinColor_Stage0;
vec4 ColorMatrixFragmentProcessor_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = _input;
    {
        float nonZeroAlpha = max(inputColor.w, 9.9999997473787516e-05);
        inputColor = vec4(inputColor.xyz / nonZeroAlpha, inputColor.w);
    }
    _output = um_Stage1_c0_c0_c0_c0_c0_c0 * inputColor + uv_Stage1_c0_c0_c0_c0_c0_c0;
    {
        _output = clamp(_output, 0.0, 1.0);
    }
    return _output;
}
vec4 Big_Ole_Key_Stage1_c0_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = _input;
    return _output;
}
float _guarded_divide(float n, float d) {
    return n / d;
}
float _color_dodge_component(float sc, float sa, float dc, float da) {
    if (dc == 0.0) {
        return sc * (1.0 - da);
    } else {
        float d = sa - sc;
        if (d == 0.0) {
            return (sa * da + sc * (1.0 - da)) + dc * (1.0 - sa);
        }
        d = min(da, _guarded_divide(dc * sa, d));
        return (d * sa + sc * (1.0 - da)) + dc * (1.0 - sa);
    }
}
vec4 blend_color_dodge(vec4 src, vec4 dst) {
    return vec4(_color_dodge_component(src.x, src.w, dst.x, dst.w), _color_dodge_component(src.y, src.w, dst.y, dst.w), _color_dodge_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_color_dodge(ColorMatrixFragmentProcessor_Stage1_c0_c0_c0_c0_c0_c0(inputColor), Big_Ole_Key_Stage1_c0_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 RectBlurEffect_Stage1_c0_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float xCoverage, yCoverage;
    {
        float x, y;
        {
            x = max(urectH_Stage1_c0_c0_c1_c0_c0_c0.x - gl_FragCoord.x, gl_FragCoord.x - urectH_Stage1_c0_c0_c1_c0_c0_c0.z);
            y = max(urectH_Stage1_c0_c0_c1_c0_c0_c0.y - gl_FragCoord.y, gl_FragCoord.y - urectH_Stage1_c0_c0_c1_c0_c0_c0.w);
        }
        xCoverage = texture(uTextureSampler_0_Stage1, vec2(x * uinvSixSigma_Stage1_c0_c0_c1_c0_c0_c0, 0.5)).w;
        yCoverage = texture(uTextureSampler_0_Stage1, vec2(y * uinvSixSigma_Stage1_c0_c0_c1_c0_c0_c0, 0.5)).w;
        _output = (_input * xCoverage) * yCoverage;
    }
    _output = (_input * xCoverage) * yCoverage;
    return _output;
}
vec4 ColorMatrixFragmentProcessor_Stage1_c0_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = _input;
    {
        float nonZeroAlpha = max(inputColor.w, 9.9999997473787516e-05);
        inputColor = vec4(inputColor.xyz / nonZeroAlpha, inputColor.w);
    }
    _output = um_Stage1_c0_c0_c1_c0_c1_c0 * inputColor + uv_Stage1_c0_c0_c1_c0_c1_c0;
    {
        _output.w = clamp(_output.w, 0.0, 1.0);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 ComposeTwo_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_in(RectBlurEffect_Stage1_c0_c0_c1_c0_c0_c0(inputColor), ColorMatrixFragmentProcessor_Stage1_c0_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_src_over(vec4 src, vec4 dst) {
    return src + (1.0 - src.w) * dst;
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_over(ComposeTwo_Stage1_c0_c0_c0_c0(inputColor), ComposeTwo_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ConstColorProcessor_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    {
        _output = ucolor_Stage1_c1_c0;
    }
    return _output;
}
vec4 blend_exclusion(vec4 src, vec4 dst) {
    return vec4((dst.xyz + src.xyz) - (2.0 * dst.xyz) * src.xyz, src.w + (1.0 - src.w) * dst.w);
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vinColor_Stage0;
        float edgeAlpha;
        vec2 duvdx = dFdx(vQuadEdge_Stage0.xy);
        vec2 duvdy = dFdy(vQuadEdge_Stage0.xy);
        if (vQuadEdge_Stage0.z > 0.0 && vQuadEdge_Stage0.w > 0.0) {
            edgeAlpha = min(min(vQuadEdge_Stage0.z, vQuadEdge_Stage0.w) + 0.5, 1.0);
        } else {
            vec2 gF = vec2((2.0 * vQuadEdge_Stage0.x) * duvdx.x - duvdx.y, (2.0 * vQuadEdge_Stage0.x) * duvdy.x - duvdy.y);
            edgeAlpha = vQuadEdge_Stage0.x * vQuadEdge_Stage0.x - vQuadEdge_Stage0.y;
            edgeAlpha = clamp(0.5 - edgeAlpha / length(gF), 0.0, 1.0);
        }
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_exclusion(ComposeTwo_Stage1_c0_c0(inputColor), ConstColorProcessor_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = outputCoverage_Stage0 * output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
in vec2 inPosition;
in vec4 inColor;
in vec4 inQuadEdge;
noperspective out vec4 vQuadEdge_Stage0;
noperspective out vec4 vinColor_Stage0;
void main() {
    vQuadEdge_Stage0 = inQuadEdge;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

