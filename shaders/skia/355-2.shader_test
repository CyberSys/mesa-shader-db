[require]
GLSL >= 1.40
GL_KHR_blend_equation_advanced

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uColor_Stage0;
uniform vec4 uleftBorderColor_Stage1_c0_c0;
uniform vec4 urightBorderColor_Stage1_c0_c0;
uniform vec4 ustart_Stage1_c0_c0_c1_c0;
uniform vec4 uend_Stage1_c0_c0_c1_c0;
uniform vec2 ufocalParams_Stage2_c1_c0_c0_c0;
uniform vec4 uscale0_1_Stage2_c1_c0_c1_c0;
uniform vec4 uscale2_3_Stage2_c1_c0_c1_c0;
uniform vec4 uscale4_5_Stage2_c1_c0_c1_c0;
uniform vec4 uscale6_7_Stage2_c1_c0_c1_c0;
uniform vec4 uscale8_9_Stage2_c1_c0_c1_c0;
uniform vec4 ubias0_1_Stage2_c1_c0_c1_c0;
uniform vec4 ubias2_3_Stage2_c1_c0_c1_c0;
uniform vec4 ubias4_5_Stage2_c1_c0_c1_c0;
uniform vec4 ubias6_7_Stage2_c1_c0_c1_c0;
uniform vec4 ubias8_9_Stage2_c1_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage2_c1_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage2_c1_c0_c1_c0;
uniform vec2 uImageIncrement_Stage3;
uniform float uSurfaceScale_Stage3;
uniform vec3 uLightColor_Stage3;
uniform float uKD_Stage3;
uniform vec4 uTexDom_Stage3;
uniform vec3 uDecalParams_Stage3;
uniform vec3 uLightLocation_Stage3;
uniform sampler2D uTextureSampler_0_Stage3;
noperspective in vec3 vDashParam_Stage0;
noperspective in vec2 vCircleParams_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
vec4 LinearGradientLayout_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float t = vTransformedCoords_0_Stage0.x + 9.9999997473787516e-06;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 SingleIntervalGradientColorizer_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    _output = (1.0 - t) * ustart_Stage1_c0_c0_c1_c0 + t * uend_Stage1_c0_c0_c1_c0;
    return _output;
}
vec4 ClampedGradientEffect_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = LinearGradientLayout_Stage1_c0_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage1_c0_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage1_c0_c0;
    } else {
        _output = SingleIntervalGradientColorizer_Stage1_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 TwoPointConicalGradientLayout_Stage2_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 p = vTransformedCoords_1_Stage0;
    float t = -1.0;
    float v = 1.0;
    {
        {
            float r0_2 = ufocalParams_Stage2_c1_c0_c0_c0.y;
            t = r0_2 - p.y * p.y;
            if (t >= 0.0) {
                t = p.x + sqrt(t);
            } else {
                v = -1.0;
            }
        }
    }
    _output = vec4(t, v, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage2_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    if (t < uthresholds1_7_Stage2_c1_c0_c1_c0.w) {
        if (t < uthresholds1_7_Stage2_c1_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage2_c1_c0_c1_c0.x) {
                scale = uscale0_1_Stage2_c1_c0_c1_c0;
                bias = ubias0_1_Stage2_c1_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage2_c1_c0_c1_c0;
                bias = ubias2_3_Stage2_c1_c0_c1_c0;
            }
        } else {
            if (t < uthresholds1_7_Stage2_c1_c0_c1_c0.z) {
                scale = uscale4_5_Stage2_c1_c0_c1_c0;
                bias = ubias4_5_Stage2_c1_c0_c1_c0;
            } else {
                scale = uscale6_7_Stage2_c1_c0_c1_c0;
                bias = ubias6_7_Stage2_c1_c0_c1_c0;
            }
        }
    } else {
        {
            {
                scale = uscale8_9_Stage2_c1_c0_c1_c0;
                bias = ubias8_9_Stage2_c1_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 TiledGradientEffect_Stage2_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 t = TwoPointConicalGradientLayout_Stage2_c1_c0_c0_c0(vec4(1.0));
    if (t.y < 0.0) {
        _output = vec4(0.0);
    } else {
        {
            t.x = fract(t.x);
        }
        _output = UnrolledBinaryGradientColorizer_Stage2_c1_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 light_Stage3(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    float colorScale = uKD_Stage3 * dot(normal, surfaceToLight);
    return vec4(lightColor * clamp(colorScale, 0.0, 1.0), 1.0);
}
float sobel_Stage3(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage3(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage3(float m[9], float surfaceScale) {
    return pointToNormal_Stage3(sobel_Stage3(m[0], m[2], m[3], m[5], 0.0, 0.0, 0.33333298563957214), sobel_Stage3(m[0], m[3], m[1], m[4], m[2], m[5], 0.5), surfaceScale);
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
        float xShifted = vDashParam_Stage0.x - floor(vDashParam_Stage0.x / vDashParam_Stage0.z) * vDashParam_Stage0.z;
        vec2 fragPosShifted = vec2(xShifted, vDashParam_Stage0.y);
        vec2 center = vec2(vCircleParams_Stage0.y, 0.0);
        float dist = length(center - fragPosShifted);
        float diff = dist - vCircleParams_Stage0.x;
        diff = 1.0 - diff;
        float alpha = clamp(diff, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(alpha);
    }
    vec4 output_Stage1;
    {
        output_Stage1 = blend_dst_in(outputColor_Stage0, ClampedGradientEffect_Stage1_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage2;
    {
        output_Stage2 = blend_dst_in(outputCoverage_Stage0, TiledGradientEffect_Stage2_c1_c0(vec4(1.0)));
    }
    vec4 output_Stage3;
    {
        vec2 coord = vTransformedCoords_2_Stage0;
        float m[9];
        vec4 temp0;
        {
            vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[0] = temp0.w;
        vec4 temp1;
        {
            vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[1] = temp1.w;
        vec4 temp2;
        {
            vec2 origCoord = coord + uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[2] = temp2.w;
        vec4 temp3;
        {
            vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[3] = temp3.w;
        vec4 temp4;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[4] = temp4.w;
        vec4 temp5;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[5] = temp5.w;
        vec4 temp6;
        {
            vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[6] = temp6.w;
        vec4 temp7;
        {
            vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[7] = temp7.w;
        vec4 temp8;
        {
            vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[8] = temp8.w;
        vec3 surfaceToLight = normalize(uLightLocation_Stage3 - vec3(gl_FragCoord.xy, uSurfaceScale_Stage3 * m[4]));
        output_Stage3 = light_Stage3(normal_Stage3(m, uSurfaceScale_Stage3), surfaceToLight, uLightColor_Stage3);
        output_Stage3 *= output_Stage2;
    }
    {
        sk_FragColor = output_Stage3 * output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
in vec3 inDashParams;
in vec2 inCircleParams;
noperspective out vec3 vDashParam_Stage0;
noperspective out vec2 vCircleParams_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
void main() {
    vDashParam_Stage0 = inDashParams;
    vCircleParams_Stage0 = inCircleParams;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

