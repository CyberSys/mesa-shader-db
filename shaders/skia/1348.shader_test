[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uinnerRect_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec2 uradiusPlusHalf_Stage1_c0_c0_c0_c0_c0_c0;
uniform float uPixelSize_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec2 uRange_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec3 uedges_Stage1_c0_c0_c1_c0[5];
uniform float ucornerRadius_Stage1_c1_c0_c0_c0;
uniform vec4 uproxyRect_Stage1_c1_c0_c0_c0;
uniform float ublurRadius_Stage1_c1_c0_c0_c0;
uniform mat4 um_Stage1_c1_c0_c1_c0_c0_c0;
uniform vec4 uv_Stage1_c1_c0_c1_c0_c0_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
noperspective in vec4 vinCircleEdge_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
vec4 CircularRRect_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c0_c0_c0_c0_c0_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c0_c0_c0_c0_c0_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    float alpha = clamp(uradiusPlusHalf_Stage1_c0_c0_c0_c0_c0_c0.x - length(dxy), 0.0, 1.0);
    _output = _input * alpha;
    return _output;
}
vec4 Morphology_Stage1_c0_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(1.0, 1.0, 1.0, 1.0);
    vec2 coord = vTransformedCoords_0_Stage0;
    coord.x -= 7.0 * uPixelSize_Stage1_c0_c0_c0_c0_c1_c0;
    for (int i = 0;i < 15; i++) {
        _output = min(_output, texture(uTextureSampler_0_Stage1, coord));
        coord.x += uPixelSize_Stage1_c0_c0_c0_c0_c1_c0;
    }
    _output *= _input;
    return _output;
}
vec4 blend_src_over(vec4 src, vec4 dst) {
    return src + (1.0 - src.w) * dst;
}
vec4 blend_lighten(vec4 src, vec4 dst) {
    vec4 result = blend_src_over(src, dst);
    result.xyz = max(result.xyz, (1.0 - dst.w) * src.xyz + dst.xyz);
    return result;
}
vec4 ComposeTwo_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_lighten(CircularRRect_Stage1_c0_c0_c0_c0_c0_c0(inputColor), Morphology_Stage1_c0_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ConvexPoly_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float alpha = 1.0;
    float edge;
    edge = dot(uedges_Stage1_c0_c0_c1_c0[0], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = clamp(edge, 0.0, 1.0);
    alpha *= edge;
    edge = dot(uedges_Stage1_c0_c0_c1_c0[1], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = clamp(edge, 0.0, 1.0);
    alpha *= edge;
    edge = dot(uedges_Stage1_c0_c0_c1_c0[2], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = clamp(edge, 0.0, 1.0);
    alpha *= edge;
    edge = dot(uedges_Stage1_c0_c0_c1_c0[3], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = clamp(edge, 0.0, 1.0);
    alpha *= edge;
    edge = dot(uedges_Stage1_c0_c0_c1_c0[4], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = clamp(edge, 0.0, 1.0);
    alpha *= edge;
    _output = _input * alpha;
    return _output;
}
vec4 blend_src_atop(vec4 src, vec4 dst) {
    return dst.w * src + (1.0 - src.w) * dst;
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_atop(ComposeTwo_Stage1_c0_c0_c0_c0(inputColor), ConvexPoly_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 RRectBlurEffect_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 translatedFragPos = gl_FragCoord.xy - uproxyRect_Stage1_c1_c0_c0_c0.xy;
    float threshold = ucornerRadius_Stage1_c1_c0_c0_c0 + 2.0 * ublurRadius_Stage1_c1_c0_c0_c0;
    vec2 middle = (uproxyRect_Stage1_c1_c0_c0_c0.zw - uproxyRect_Stage1_c1_c0_c0_c0.xy) - 2.0 * threshold;
    if (translatedFragPos.x >= threshold && translatedFragPos.x < middle.x + threshold) {
        translatedFragPos.x = threshold;
    } else if (translatedFragPos.x >= middle.x + threshold) {
        translatedFragPos.x -= middle.x - 1.0;
    }
    if (translatedFragPos.y > threshold && translatedFragPos.y < middle.y + threshold) {
        translatedFragPos.y = threshold;
    } else if (translatedFragPos.y >= middle.y + threshold) {
        translatedFragPos.y -= middle.y - 1.0;
    }
    vec2 proxyDims = vec2(2.0 * threshold + 1.0);
    vec2 texCoord = translatedFragPos / proxyDims;
    _output = _input * texture(uTextureSampler_1_Stage1, texCoord);
    return _output;
}
vec4 ColorMatrixFragmentProcessor_Stage1_c1_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = _input;
    _output = um_Stage1_c1_c0_c1_c0_c0_c0 * inputColor + uv_Stage1_c1_c0_c1_c0_c0_c0;
    {
        _output.w = clamp(_output.w, 0.0, 1.0);
    }
    return _output;
}
vec4 ClampFragmentProcessor_Stage1_c1_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    {
        _output = clamp(_input, 0.0, 1.0);
    }
    return _output;
}
vec4 blend_difference(vec4 src, vec4 dst) {
    return vec4((src.xyz + dst.xyz) - 2.0 * min(src.xyz * dst.w, dst.xyz * src.w), src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_difference(ColorMatrixFragmentProcessor_Stage1_c1_c0_c1_c0_c0_c0(inputColor), ClampFragmentProcessor_Stage1_c1_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_atop(RRectBlurEffect_Stage1_c1_c0_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_dst_over(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + dst;
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        vec4 circleEdge;
        circleEdge = vinCircleEdge_Stage0;
        outputColor_Stage0 = vinColor_Stage0;
        float d = length(circleEdge.xy);
        float distanceToOuterEdge = circleEdge.z * (1.0 - d);
        float edgeAlpha = clamp(distanceToOuterEdge, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_dst_over(ComposeTwo_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = outputCoverage_Stage0 * output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec4 inCircleEdge;
noperspective out vec4 vinCircleEdge_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vinCircleEdge_Stage0 = inCircleEdge;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

