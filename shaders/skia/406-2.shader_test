[require]
GLSL >= 1.40
GL_KHR_blend_equation_advanced

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec2 uImageIncrement_Stage1_c0_c0_c0_c0;
uniform vec4 uKernel_Stage1_c0_c0_c0_c0[6];
uniform vec2 uKernelOffset_Stage1_c0_c0_c0_c0;
uniform float uGain_Stage1_c0_c0_c0_c0;
uniform float uBias_Stage1_c0_c0_c0_c0;
uniform vec4 uTexDom_Stage1_c0_c0_c0_c0;
uniform vec3 uDecalParams_Stage1_c0_c0_c0_c0;
uniform mat4 um_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec4 uv_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec4 uinnerRect_Stage1_c0_c0_c1_c0_c1_c0;
uniform vec4 uinvRadiiLTRB_Stage1_c0_c0_c1_c0_c1_c0;
uniform vec3 uedges_Stage1_c1_c0_c0_c0_c0_c0[7];
uniform vec4 ucircleData_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec4 uboundsUniform_Stage1_c1_c0_c1_c0;
uniform float uxInvZoom_Stage1_c1_c0_c1_c0;
uniform float uyInvZoom_Stage1_c1_c0_c1_c0;
uniform float uxInvInset_Stage1_c1_c0_c1_c0;
uniform float uyInvInset_Stage1_c1_c0_c1_c0;
uniform vec2 uoffset_Stage1_c1_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
vec4 MatrixConvolution_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_0_Stage0 - uKernelOffset_Stage1_c0_c0_c0_c0 * uImageIncrement_Stage1_c0_c0_c0_c0;
    vec4 c;
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[0].x;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[0].y;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[0].z;
        {
            vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[0].w;
        {
            vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[1].x;
        {
            vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[1].y;
        {
            vec2 origCoord = coord + vec2(5.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[1].z;
        {
            vec2 origCoord = coord + vec2(6.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[1].w;
        {
            vec2 origCoord = coord + vec2(7.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[2].x;
        {
            vec2 origCoord = coord + vec2(8.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[2].y;
        {
            vec2 origCoord = coord + vec2(9.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[2].z;
        {
            vec2 origCoord = coord + vec2(10.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[2].w;
        {
            vec2 origCoord = coord + vec2(11.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[3].x;
        {
            vec2 origCoord = coord + vec2(12.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[3].y;
        {
            vec2 origCoord = coord + vec2(13.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[3].z;
        {
            vec2 origCoord = coord + vec2(14.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[3].w;
        {
            vec2 origCoord = coord + vec2(15.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[4].x;
        {
            vec2 origCoord = coord + vec2(16.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[4].y;
        {
            vec2 origCoord = coord + vec2(17.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[4].z;
        {
            vec2 origCoord = coord + vec2(18.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[4].w;
        {
            vec2 origCoord = coord + vec2(19.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[5].x;
        {
            vec2 origCoord = coord + vec2(20.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[5].y;
        {
            vec2 origCoord = coord + vec2(21.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[5].z;
        {
            vec2 origCoord = coord + vec2(22.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[5].w;
        {
            vec2 origCoord = coord + vec2(23.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        vec2 origCoord = vTransformedCoords_0_Stage0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    _output.w = c.w;
    _output.xyz = clamp(sum.xyz * uGain_Stage1_c0_c0_c0_c0 + uBias_Stage1_c0_c0_c0_c0, 0.0, 1.0);
    _output.xyz *= _output.w;
    _output *= _input;
    return _output;
}
vec4 ColorMatrixFragmentProcessor_Stage1_c0_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = _input;
    _output = um_Stage1_c0_c0_c1_c0_c0_c0 * inputColor + uv_Stage1_c0_c0_c1_c0_c0_c0;
    {
        _output = clamp(_output, 0.0, 1.0);
    }
    return _output;
}
vec4 EllipticalRRect_Stage1_c0_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c0_c0_c1_c0_c1_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c0_c0_c1_c0_c1_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    vec2 Z = max(max(dxy0 * uinvRadiiLTRB_Stage1_c0_c0_c1_c0_c1_c0.xy, dxy1 * uinvRadiiLTRB_Stage1_c0_c0_c1_c0_c1_c0.zw), 0.0);
    float implicit = dot(Z, dxy) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    grad_dot = max(grad_dot, 9.9999997473787516e-05);
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha = clamp(0.5 + approx_dist, 0.0, 1.0);
    _output = _input * alpha;
    return _output;
}
vec4 blend_src_out(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src;
}
vec4 ComposeTwo_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_out(ColorMatrixFragmentProcessor_Stage1_c0_c0_c1_c0_c0_c0(inputColor), EllipticalRRect_Stage1_c0_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_modulate(vec4 src, vec4 dst) {
    return src * dst;
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_modulate(MatrixConvolution_Stage1_c0_c0_c0_c0(inputColor), ComposeTwo_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ConvexPoly_Stage1_c1_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float alpha = 1.0;
    float edge;
    edge = dot(uedges_Stage1_c1_c0_c0_c0_c0_c0[0], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0_c0_c0_c0_c0[1], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0_c0_c0_c0_c0[2], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0_c0_c0_c0_c0[3], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0_c0_c0_c0_c0[4], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0_c0_c0_c0_c0[5], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0_c0_c0_c0_c0[6], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    alpha = 1.0 - alpha;
    _output = _input * alpha;
    return _output;
}
vec4 CircleBlurFragmentProcessor_Stage1_c1_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 vec = vec2((gl_FragCoord.x - ucircleData_Stage1_c1_c0_c0_c0_c1_c0.x) * ucircleData_Stage1_c1_c0_c0_c0_c1_c0.w, (gl_FragCoord.y - ucircleData_Stage1_c1_c0_c0_c0_c1_c0.y) * ucircleData_Stage1_c1_c0_c0_c0_c1_c0.w);
    float dist = length(vec) + (0.5 - ucircleData_Stage1_c1_c0_c0_c0_c1_c0.z) * ucircleData_Stage1_c1_c0_c0_c0_c1_c0.w;
    _output = _input * texture(uTextureSampler_1_Stage1, vec2(dist, 0.5)).w;
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 ComposeTwo_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_in(ConvexPoly_Stage1_c1_c0_c0_c0_c0_c0(inputColor), CircleBlurFragmentProcessor_Stage1_c1_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 MagnifierEffect_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_1_Stage0;
    vec2 zoom_coord = uoffset_Stage1_c1_c0_c1_c0 + coord * vec2(uxInvZoom_Stage1_c1_c0_c1_c0, uyInvZoom_Stage1_c1_c0_c1_c0);
    vec2 delta = (coord - uboundsUniform_Stage1_c1_c0_c1_c0.xy) * uboundsUniform_Stage1_c1_c0_c1_c0.zw;
    delta = min(delta, vec2(1.0, 1.0) - delta);
    delta *= vec2(uxInvInset_Stage1_c1_c0_c1_c0, uyInvInset_Stage1_c1_c0_c1_c0);
    float weight = 0.0;
    if (delta.x < 2.0 && delta.y < 2.0) {
        delta = vec2(2.0, 2.0) - delta;
        float dist = length(delta);
        dist = max(2.0 - dist, 0.0);
        weight = min(dist * dist, 1.0);
    } else {
        vec2 delta_squared = delta * delta;
        weight = min(min(delta_squared.x, delta_squared.y), 1.0);
    }
    _output = texture(uTextureSampler_2_Stage1, mix(coord, zoom_coord, weight));
    return _output;
}
float _guarded_divide(float n, float d) {
    return n / d;
}
float _soft_light_component(float sc, float sa, float dc, float da) {
    if (2.0 * sc <= sa) {
        return (_guarded_divide((dc * dc) * (sa - 2.0 * sc), da) + (1.0 - da) * sc) + dc * ((-sa + 2.0 * sc) + 1.0);
    } else if (4.0 * dc <= da) {
        float DSqd = dc * dc;
        float DCub = DSqd * dc;
        float DaSqd = da * da;
        float DaCub = DaSqd * da;
        return _guarded_divide(((DaSqd * (sc - dc * ((3.0 * sa - 6.0 * sc) - 1.0)) + ((12.0 * da) * DSqd) * (sa - 2.0 * sc)) - (16.0 * DCub) * (sa - 2.0 * sc)) - DaCub * sc, DaSqd);
    }
    return ((dc * ((sa - 2.0 * sc) + 1.0) + sc) - sqrt(da * dc) * (sa - 2.0 * sc)) - da * sc;
}
vec4 blend_soft_light(vec4 src, vec4 dst) {
    if (dst.w == 0.0) {
        return src;
    }
    return vec4(_soft_light_component(src.x, src.w, dst.x, dst.w), _soft_light_component(src.y, src.w, dst.y, dst.w), _soft_light_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_soft_light(ComposeTwo_Stage1_c1_c0_c0_c0(inputColor), MagnifierEffect_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_xor(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + (1.0 - src.w) * dst;
}
void main() {
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(vec4(1.0).xyz, 1.0);
        output_Stage1 = blend_xor(ComposeTwo_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 position;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(localCoord, 1.0)).xy;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

