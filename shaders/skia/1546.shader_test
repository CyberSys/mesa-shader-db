[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform float uSrcTF_Stage0[7];
uniform mat3 uColorXform_Stage0;
uniform float uDstTF_Stage0[7];
uniform float ucornerRadius_Stage1;
uniform vec4 uproxyRect_Stage1;
uniform float ublurRadius_Stage1;
uniform vec4 uleftBorderColor_Stage2_c0_c0;
uniform vec4 urightBorderColor_Stage2_c0_c0;
uniform float ubias_Stage2_c0_c0_c0_c0;
uniform float uscale_Stage2_c0_c0_c0_c0;
uniform vec4 uscale0_1_Stage2_c0_c0_c1_c0;
uniform vec4 uscale2_3_Stage2_c0_c0_c1_c0;
uniform vec4 uscale4_5_Stage2_c0_c0_c1_c0;
uniform vec4 uscale6_7_Stage2_c0_c0_c1_c0;
uniform vec4 uscale8_9_Stage2_c0_c0_c1_c0;
uniform vec4 ubias0_1_Stage2_c0_c0_c1_c0;
uniform vec4 ubias2_3_Stage2_c0_c0_c1_c0;
uniform vec4 ubias4_5_Stage2_c0_c0_c1_c0;
uniform vec4 ubias6_7_Stage2_c0_c0_c1_c0;
uniform vec4 ubias8_9_Stage2_c0_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage2_c0_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage2_c0_c0_c1_c0;
uniform mat4 um_Stage3_c1_c0;
uniform vec4 uv_Stage3_c1_c0;
uniform vec2 uImageIncrement_Stage4;
uniform vec4 uKernel_Stage4[5];
uniform vec2 uKernelOffset_Stage4;
uniform float uGain_Stage4;
uniform float uBias_Stage4;
uniform vec4 uTexDom_Stage4;
uniform vec3 uDecalParams_Stage4;
uniform vec4 uboundsUniform_Stage5;
uniform float uxInvZoom_Stage5;
uniform float uyInvZoom_Stage5;
uniform float uxInvInset_Stage5;
uniform float uyInvInset_Stage5;
uniform vec2 uoffset_Stage5;
uniform vec4 uinnerRect_Stage6;
uniform vec4 uinvRadiiLTRB_Stage6;
uniform sampler2D uTextureSampler_0_Stage0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage4;
uniform sampler2D uTextureSampler_0_Stage5;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vtextureCoords_Stage0;
flat in vec4 vtextureDomain_Stage0;
flat in vec4 vcolor_Stage0;
float src_tf_Stage0(float x) {
    float G = uSrcTF_Stage0[0];
    float A = uSrcTF_Stage0[1];
    float B = uSrcTF_Stage0[2];
    float C = uSrcTF_Stage0[3];
    float D = uSrcTF_Stage0[4];
    float E = uSrcTF_Stage0[5];
    float F = uSrcTF_Stage0[6];
    float s = sign(x);
    x = abs(x);
    x = x < D ? C * x + F : pow(A * x + B, G) + E;
    return s * x;
}
float dst_tf_Stage0(float x) {
    float G = uDstTF_Stage0[0];
    float A = uDstTF_Stage0[1];
    float B = uDstTF_Stage0[2];
    float C = uDstTF_Stage0[3];
    float D = uDstTF_Stage0[4];
    float E = uDstTF_Stage0[5];
    float F = uDstTF_Stage0[6];
    float s = sign(x);
    x = abs(x);
    x = x < D ? C * x + F : pow(A * x + B, G) + E;
    return s * x;
}
vec4 gamut_xform_Stage0(vec4 color) {
    color.xyz = uColorXform_Stage0 * color.xyz;
    return color;
}
vec4 color_xform_Stage0(vec4 color) {
    float nonZeroAlpha = max(color.w, 9.9999997473787516e-05);
    color = vec4(color.xyz / nonZeroAlpha, nonZeroAlpha);
    color.x = src_tf_Stage0(color.x);
    color.y = src_tf_Stage0(color.y);
    color.z = src_tf_Stage0(color.z);
    color = gamut_xform_Stage0(color);
    color.x = dst_tf_Stage0(color.x);
    color.y = dst_tf_Stage0(color.y);
    color.z = dst_tf_Stage0(color.z);
    color.xyz *= color.w;
    return color;
}
vec4 SweepGradientLayout_Stage2_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float angle;
    {
        angle = atan(-vTransformedCoords_0_Stage0.y, -vTransformedCoords_0_Stage0.x);
    }
    float t = ((angle * 0.15915493667125702 + 0.5) + ubias_Stage2_c0_c0_c0_c0) * uscale_Stage2_c0_c0_c0_c0;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage2_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.w) {
        if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.x) {
                scale = uscale0_1_Stage2_c0_c0_c1_c0;
                bias = ubias0_1_Stage2_c0_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage2_c0_c0_c1_c0;
                bias = ubias2_3_Stage2_c0_c0_c1_c0;
            }
        } else {
            if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.z) {
                scale = uscale4_5_Stage2_c0_c0_c1_c0;
                bias = ubias4_5_Stage2_c0_c0_c1_c0;
            } else {
                scale = uscale6_7_Stage2_c0_c0_c1_c0;
                bias = ubias6_7_Stage2_c0_c0_c1_c0;
            }
        }
    } else {
        {
            {
                scale = uscale8_9_Stage2_c0_c0_c1_c0;
                bias = ubias8_9_Stage2_c0_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 ClampedGradientEffect_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = SweepGradientLayout_Stage2_c0_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage2_c0_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage2_c0_c0;
    } else {
        _output = UnrolledBinaryGradientColorizer_Stage2_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 ColorMatrixFragmentProcessor_Stage3_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = _input;
    {
        float nonZeroAlpha = max(inputColor.w, 9.9999997473787516e-05);
        inputColor = vec4(inputColor.xyz / nonZeroAlpha, inputColor.w);
    }
    _output = um_Stage3_c1_c0 * inputColor + uv_Stage3_c1_c0;
    {
        _output.w = clamp(_output.w, 0.0, 1.0);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
vec4 blend_src(vec4 src, vec4 dst) {
    return src;
}
void main() {
    vec4 outputColor_Stage0;
    {
        vec2 textureCoords;
        textureCoords = vtextureCoords_Stage0;
        vec4 textureDomain;
        textureDomain = vtextureDomain_Stage0;
        outputColor_Stage0 = vcolor_Stage0;
        outputColor_Stage0 = color_xform_Stage0(texture(uTextureSampler_0_Stage0, clamp(textureCoords, textureDomain.xy, textureDomain.zw))) * outputColor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec2 translatedFragPos = gl_FragCoord.xy - uproxyRect_Stage1.xy;
        float threshold = ucornerRadius_Stage1 + 2.0 * ublurRadius_Stage1;
        vec2 middle = (uproxyRect_Stage1.zw - uproxyRect_Stage1.xy) - 2.0 * threshold;
        if (translatedFragPos.x >= threshold && translatedFragPos.x < middle.x + threshold) {
            translatedFragPos.x = threshold;
        } else if (translatedFragPos.x >= middle.x + threshold) {
            translatedFragPos.x -= middle.x - 1.0;
        }
        if (translatedFragPos.y > threshold && translatedFragPos.y < middle.y + threshold) {
            translatedFragPos.y = threshold;
        } else if (translatedFragPos.y >= middle.y + threshold) {
            translatedFragPos.y -= middle.y - 1.0;
        }
        vec2 proxyDims = vec2(2.0 * threshold + 1.0);
        vec2 texCoord = translatedFragPos / proxyDims;
        output_Stage1 = outputColor_Stage0 * texture(uTextureSampler_0_Stage1, texCoord);
    }
    vec4 output_Stage2;
    {
        output_Stage2 = blend_dst_in(output_Stage1, ClampedGradientEffect_Stage2_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage3;
    {
        output_Stage3 = blend_src(ColorMatrixFragmentProcessor_Stage3_c1_c0(vec4(1.0)), output_Stage2);
    }
    vec4 output_Stage4;
    {
        vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_1_Stage0 - uKernelOffset_Stage4 * uImageIncrement_Stage4;
        vec4 c;
        {
            float k = uKernel_Stage4[0].x;
            {
                vec2 origCoord = coord;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
                if (err > uDecalParams_Stage4.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage4.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage4[0].y;
            {
                vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage4;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
                if (err > uDecalParams_Stage4.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage4.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage4[0].z;
            {
                vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage4;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
                if (err > uDecalParams_Stage4.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage4.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage4[0].w;
            {
                vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage4;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
                if (err > uDecalParams_Stage4.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage4.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage4[1].x;
            {
                vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage4;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
                if (err > uDecalParams_Stage4.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage4.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage4[1].y;
            {
                vec2 origCoord = coord + vec2(5.0, 0.0) * uImageIncrement_Stage4;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
                if (err > uDecalParams_Stage4.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage4.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage4[1].z;
            {
                vec2 origCoord = coord + vec2(6.0, 0.0) * uImageIncrement_Stage4;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
                if (err > uDecalParams_Stage4.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage4.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage4[1].w;
            {
                vec2 origCoord = coord + vec2(7.0, 0.0) * uImageIncrement_Stage4;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
                if (err > uDecalParams_Stage4.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage4.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage4[2].x;
            {
                vec2 origCoord = coord + vec2(8.0, 0.0) * uImageIncrement_Stage4;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
                if (err > uDecalParams_Stage4.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage4.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage4[2].y;
            {
                vec2 origCoord = coord + vec2(9.0, 0.0) * uImageIncrement_Stage4;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
                if (err > uDecalParams_Stage4.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage4.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage4[2].z;
            {
                vec2 origCoord = coord + vec2(10.0, 0.0) * uImageIncrement_Stage4;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
                if (err > uDecalParams_Stage4.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage4.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage4[2].w;
            {
                vec2 origCoord = coord + vec2(11.0, 0.0) * uImageIncrement_Stage4;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
                if (err > uDecalParams_Stage4.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage4.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage4[3].x;
            {
                vec2 origCoord = coord + vec2(12.0, 0.0) * uImageIncrement_Stage4;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
                if (err > uDecalParams_Stage4.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage4.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage4[3].y;
            {
                vec2 origCoord = coord + vec2(13.0, 0.0) * uImageIncrement_Stage4;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
                if (err > uDecalParams_Stage4.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage4.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage4[3].z;
            {
                vec2 origCoord = coord + vec2(14.0, 0.0) * uImageIncrement_Stage4;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
                if (err > uDecalParams_Stage4.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage4.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage4[3].w;
            {
                vec2 origCoord = coord + vec2(15.0, 0.0) * uImageIncrement_Stage4;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
                if (err > uDecalParams_Stage4.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage4.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage4[4].x;
            {
                vec2 origCoord = coord + vec2(16.0, 0.0) * uImageIncrement_Stage4;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
                if (err > uDecalParams_Stage4.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage4.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage4[4].y;
            {
                vec2 origCoord = coord + vec2(17.0, 0.0) * uImageIncrement_Stage4;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
                if (err > uDecalParams_Stage4.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage4.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            vec2 origCoord = vTransformedCoords_1_Stage0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
            if (err > uDecalParams_Stage4.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        output_Stage4.w = c.w;
        output_Stage4.xyz = clamp(sum.xyz * uGain_Stage4 + uBias_Stage4, 0.0, 1.0);
        output_Stage4.xyz *= output_Stage4.w;
        output_Stage4 *= output_Stage3;
    }
    vec4 output_Stage5;
    {
        vec2 coord = vTransformedCoords_2_Stage0;
        vec2 zoom_coord = uoffset_Stage5 + coord * vec2(uxInvZoom_Stage5, uyInvZoom_Stage5);
        vec2 delta = (coord - uboundsUniform_Stage5.xy) * uboundsUniform_Stage5.zw;
        delta = min(delta, vec2(1.0, 1.0) - delta);
        delta *= vec2(uxInvInset_Stage5, uyInvInset_Stage5);
        float weight = 0.0;
        if (delta.x < 2.0 && delta.y < 2.0) {
            delta = vec2(2.0, 2.0) - delta;
            float dist = length(delta);
            dist = max(2.0 - dist, 0.0);
            weight = min(dist * dist, 1.0);
        } else {
            vec2 delta_squared = delta * delta;
            weight = min(min(delta_squared.x, delta_squared.y), 1.0);
        }
        output_Stage5 = texture(uTextureSampler_0_Stage5, mix(coord, zoom_coord, weight));
    }
    vec4 output_Stage6;
    {
        vec2 dxy0 = uinnerRect_Stage6.xy - gl_FragCoord.xy;
        vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage6.zw;
        vec2 dxy = max(max(dxy0, dxy1), 0.0);
        vec2 Z = max(max(dxy0 * uinvRadiiLTRB_Stage6.xy, dxy1 * uinvRadiiLTRB_Stage6.zw), 0.0);
        float implicit = dot(Z, dxy) - 1.0;
        float grad_dot = 4.0 * dot(Z, Z);
        grad_dot = max(grad_dot, 9.9999997473787516e-05);
        float approx_dist = implicit * inversesqrt(grad_dot);
        float alpha = clamp(0.5 - approx_dist, 0.0, 1.0);
        output_Stage6 = output_Stage5 * alpha;
    }
    {
        sk_FragColor = output_Stage6;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 position;
in vec2 textureCoords;
in vec4 textureDomain;
in vec4 color;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vtextureCoords_Stage0;
flat out vec4 vtextureDomain_Stage0;
flat out vec4 vcolor_Stage0;
void main() {
    vec2 pos2 = position;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(textureCoords, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(textureCoords, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(textureCoords, 1.0)).xy;
    vtextureCoords_Stage0 = textureCoords;
    vtextureDomain_Stage0 = textureDomain;
    vcolor_Stage0 = color;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

