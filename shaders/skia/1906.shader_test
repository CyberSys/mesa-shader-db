[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform float uSrcTF_Stage0[7];
uniform mat3 uColorXform_Stage0;
uniform float uDstTF_Stage0[7];
uniform vec2 uImageIncrement_Stage1_c0_c0_c0_c0;
uniform vec4 uKernel_Stage1_c0_c0_c0_c0[4];
uniform vec2 uKernelOffset_Stage1_c0_c0_c0_c0;
uniform float uGain_Stage1_c0_c0_c0_c0;
uniform float uBias_Stage1_c0_c0_c0_c0;
uniform float ucornerRadius_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec4 uproxyRect_Stage1_c0_c0_c1_c0_c0_c0;
uniform float ublurRadius_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec4 urectH_Stage1_c1_c0_c0_c0_c1_c0;
uniform float uinvSixSigma_Stage1_c1_c0_c0_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vtextureCoords_Stage0;
flat in vec4 vtextureDomain_Stage0;
flat in vec4 vcolor_Stage0;
float src_tf_Stage0(float x) {
    float G = uSrcTF_Stage0[0];
    float A = uSrcTF_Stage0[1];
    float B = uSrcTF_Stage0[2];
    float C = uSrcTF_Stage0[3];
    float D = uSrcTF_Stage0[4];
    float E = uSrcTF_Stage0[5];
    float F = uSrcTF_Stage0[6];
    float s = sign(x);
    x = abs(x);
    x = x < D ? C * x + F : pow(A * x + B, G) + E;
    return s * x;
}
float dst_tf_Stage0(float x) {
    float G = uDstTF_Stage0[0];
    float A = uDstTF_Stage0[1];
    float B = uDstTF_Stage0[2];
    float C = uDstTF_Stage0[3];
    float D = uDstTF_Stage0[4];
    float E = uDstTF_Stage0[5];
    float F = uDstTF_Stage0[6];
    float s = sign(x);
    x = abs(x);
    x = x < D ? C * x + F : pow(A * x + B, G) + E;
    return s * x;
}
vec4 gamut_xform_Stage0(vec4 color) {
    color.xyz = uColorXform_Stage0 * color.xyz;
    return color;
}
vec4 color_xform_Stage0(vec4 color) {
    float nonZeroAlpha = max(color.w, 9.9999997473787516e-05);
    color = vec4(color.xyz / nonZeroAlpha, nonZeroAlpha);
    color.x = src_tf_Stage0(color.x);
    color.y = src_tf_Stage0(color.y);
    color.z = src_tf_Stage0(color.z);
    color = gamut_xform_Stage0(color);
    color.x = dst_tf_Stage0(color.x);
    color.y = dst_tf_Stage0(color.y);
    color.z = dst_tf_Stage0(color.z);
    color.xyz *= color.w;
    return color;
}
vec4 MatrixConvolution_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_0_Stage0 - uKernelOffset_Stage1_c0_c0_c0_c0 * uImageIncrement_Stage1_c0_c0_c0_c0;
    vec4 c;
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[0].x;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[0].y;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[0].z;
        {
            vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[0].w;
        {
            vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[1].x;
        {
            vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[1].y;
        {
            vec2 origCoord = coord + vec2(5.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[1].z;
        {
            vec2 origCoord = coord + vec2(6.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[1].w;
        {
            vec2 origCoord = coord + vec2(7.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[2].x;
        {
            vec2 origCoord = coord + vec2(8.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[2].y;
        {
            vec2 origCoord = coord + vec2(9.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[2].z;
        {
            vec2 origCoord = coord + vec2(10.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[2].w;
        {
            vec2 origCoord = coord + vec2(11.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[3].x;
        {
            vec2 origCoord = coord + vec2(12.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[3].y;
        {
            vec2 origCoord = coord + vec2(13.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[3].z;
        {
            vec2 origCoord = coord + vec2(14.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0[3].w;
        {
            vec2 origCoord = coord + vec2(15.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    _output = sum * uGain_Stage1_c0_c0_c0_c0 + uBias_Stage1_c0_c0_c0_c0;
    _output.w = clamp(_output.w, 0.0, 1.0);
    _output.xyz = clamp(_output.xyz, 0.0, _output.w);
    _output *= _input;
    return _output;
}
vec4 RRectBlurEffect_Stage1_c0_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 translatedFragPos = gl_FragCoord.xy - uproxyRect_Stage1_c0_c0_c1_c0_c0_c0.xy;
    float threshold = ucornerRadius_Stage1_c0_c0_c1_c0_c0_c0 + 2.0 * ublurRadius_Stage1_c0_c0_c1_c0_c0_c0;
    vec2 middle = (uproxyRect_Stage1_c0_c0_c1_c0_c0_c0.zw - uproxyRect_Stage1_c0_c0_c1_c0_c0_c0.xy) - 2.0 * threshold;
    if (translatedFragPos.x >= threshold && translatedFragPos.x < middle.x + threshold) {
        translatedFragPos.x = threshold;
    } else if (translatedFragPos.x >= middle.x + threshold) {
        translatedFragPos.x -= middle.x - 1.0;
    }
    if (translatedFragPos.y > threshold && translatedFragPos.y < middle.y + threshold) {
        translatedFragPos.y = threshold;
    } else if (translatedFragPos.y >= middle.y + threshold) {
        translatedFragPos.y -= middle.y - 1.0;
    }
    vec2 proxyDims = vec2(2.0 * threshold + 1.0);
    vec2 texCoord = translatedFragPos / proxyDims;
    _output = _input * texture(uTextureSampler_1_Stage1, texCoord);
    return _output;
}
vec4 Dither_Stage1_c0_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = _input;
    float value;
    {
        uint x = uint(vTransformedCoords_1_Stage0.x);
        uint y = uint(vTransformedCoords_1_Stage0.y);
        uint m = (((((y & 1u) << 5u | (x & 1u) << 4u) | (y & 2u) << 2u) | (x & 2u) << 1u) | (y & 4u) >> 1u) | (x & 4u) >> 2u;
        value = float(m) / 64.0 - 0.4921875;
    }
    _output = vec4(clamp(_output.xyz + value * 0.01587301678955555, 0.0, _output.w), _output.w);
    return _output;
}
vec4 blend_src_over(vec4 src, vec4 dst) {
    return src + (1.0 - src.w) * dst;
}
vec4 blend_darken(vec4 src, vec4 dst) {
    vec4 result = blend_src_over(src, dst);
    result.xyz = min(result.xyz, (1.0 - dst.w) * src.xyz + dst.xyz);
    return result;
}
vec4 ComposeTwo_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_darken(RRectBlurEffect_Stage1_c0_c0_c1_c0_c0_c0(inputColor), Dither_Stage1_c0_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
float _blend_color_saturation(vec3 color) {
    return max(max(color.x, color.y), color.z) - min(min(color.x, color.y), color.z);
}
vec3 _blend_set_color_saturation_helper(vec3 minMidMax, float sat) {
    if (minMidMax.x < minMidMax.z) {
        return vec3(0.0, (sat * (minMidMax.y - minMidMax.x)) / (minMidMax.z - minMidMax.x), sat);
    }
    return vec3(0.0);
}
vec3 _blend_set_color_saturation(vec3 hueLumColor, vec3 satColor) {
    float sat = _blend_color_saturation(satColor);
    if (hueLumColor.x <= hueLumColor.y) {
        if (hueLumColor.y <= hueLumColor.z) {
            hueLumColor.xyz = _blend_set_color_saturation_helper(hueLumColor, sat);
        } else if (hueLumColor.x <= hueLumColor.z) {
            hueLumColor.xzy = _blend_set_color_saturation_helper(hueLumColor.xzy, sat);
        } else {
            hueLumColor.zxy = _blend_set_color_saturation_helper(hueLumColor.zxy, sat);
        }
    } else if (hueLumColor.x <= hueLumColor.z) {
        hueLumColor.yxz = _blend_set_color_saturation_helper(hueLumColor.yxz, sat);
    } else if (hueLumColor.y <= hueLumColor.z) {
        hueLumColor.yzx = _blend_set_color_saturation_helper(hueLumColor.yzx, sat);
    } else {
        hueLumColor.zyx = _blend_set_color_saturation_helper(hueLumColor.zyx, sat);
    }
    return hueLumColor;
}
float _blend_color_luminance(vec3 color) {
    return dot(vec3(0.30000001192092896, 0.5899999737739563, 0.10999999940395355), color);
}
vec3 _blend_set_color_luminance(vec3 hueSatColor, float alpha, vec3 lumColor) {
    float lum = _blend_color_luminance(lumColor);
    vec3 result = (lum - _blend_color_luminance(hueSatColor)) + hueSatColor;
    float minComp = min(min(result.x, result.y), result.z);
    float maxComp = max(max(result.x, result.y), result.z);
    if (minComp < 0.0 && lum != minComp) {
        result = lum + ((result - lum) * lum) / (lum - minComp);
    }
    if (maxComp > alpha && maxComp != lum) {
        return lum + ((result - lum) * (alpha - lum)) / (maxComp - lum);
    }
    return result;
}
vec4 blend_saturation(vec4 src, vec4 dst) {
    float alpha = dst.w * src.w;
    vec3 sda = src.xyz * dst.w;
    vec3 dsa = dst.xyz * src.w;
    return vec4((((_blend_set_color_luminance(_blend_set_color_saturation(dsa, sda), alpha, dsa) + dst.xyz) - dsa) + src.xyz) - sda, (src.w + dst.w) - alpha);
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_saturation(MatrixConvolution_Stage1_c0_c0_c0_c0(inputColor), ComposeTwo_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ConfigConversionEffect_Stage1_c1_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    _output = floor(_input * 255.0 + 0.5) / 255.0;
    {
        _output.xyz = floor((_output.xyz * _output.w) * 255.0 + 0.5) / 255.0;
    }
    return _output;
}
vec4 RectBlurEffect_Stage1_c1_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float xCoverage, yCoverage;
    {
        float x, y;
        {
            x = max(urectH_Stage1_c1_c0_c0_c0_c1_c0.x - gl_FragCoord.x, gl_FragCoord.x - urectH_Stage1_c1_c0_c0_c0_c1_c0.z);
            y = max(urectH_Stage1_c1_c0_c0_c0_c1_c0.y - gl_FragCoord.y, gl_FragCoord.y - urectH_Stage1_c1_c0_c0_c0_c1_c0.w);
        }
        xCoverage = texture(uTextureSampler_2_Stage1, vec2(x * uinvSixSigma_Stage1_c1_c0_c0_c0_c1_c0, 0.5)).w;
        yCoverage = texture(uTextureSampler_2_Stage1, vec2(y * uinvSixSigma_Stage1_c1_c0_c0_c0_c1_c0, 0.5)).w;
        _output = (_input * xCoverage) * yCoverage;
    }
    _output = (_input * xCoverage) * yCoverage;
    return _output;
}
float _blend_overlay_component(float sc, float sa, float dc, float da) {
    if (2.0 * dc <= da) {
        return (2.0 * sc) * dc;
    }
    return sa * da - (2.0 * (da - dc)) * (sa - sc);
}
vec4 blend_overlay(vec4 src, vec4 dst) {
    vec4 result = vec4(_blend_overlay_component(src.x, src.w, dst.x, dst.w), _blend_overlay_component(src.y, src.w, dst.y, dst.w), _blend_overlay_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
    result.xyz += dst.xyz * (1.0 - src.w) + src.xyz * (1.0 - dst.w);
    return result;
}
vec4 ComposeTwo_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_overlay(ConfigConversionEffect_Stage1_c1_c0_c0_c0_c0_c0(inputColor), RectBlurEffect_Stage1_c1_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ConfigConversionEffect_Stage1_c1_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    _output = floor(_input * 255.0 + 0.5) / 255.0;
    {
        _output.xyz = floor((_output.xyz * _output.w) * 255.0 + 0.5) / 255.0;
    }
    return _output;
}
vec4 Dither_Stage1_c1_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = _input;
    float value;
    {
        uint x = uint(vTransformedCoords_2_Stage0.x);
        uint y = uint(vTransformedCoords_2_Stage0.y);
        uint m = (((((y & 1u) << 5u | (x & 1u) << 4u) | (y & 2u) << 2u) | (x & 2u) << 1u) | (y & 4u) >> 1u) | (x & 4u) >> 2u;
        value = float(m) / 64.0 - 0.4921875;
    }
    _output = vec4(clamp(_output.xyz + value * 0.066666670143604279, 0.0, _output.w), _output.w);
    return _output;
}
vec4 ComposeTwo_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_over(ConfigConversionEffect_Stage1_c1_c0_c1_c0_c0_c0(inputColor), Dither_Stage1_c1_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_over(ComposeTwo_Stage1_c1_c0_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_dst_over(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + dst;
}
void main() {
    vec4 outputColor_Stage0;
    {
        vec2 textureCoords;
        textureCoords = vtextureCoords_Stage0;
        vec4 textureDomain;
        textureDomain = vtextureDomain_Stage0;
        outputColor_Stage0 = vcolor_Stage0;
        outputColor_Stage0 = color_xform_Stage0(texture(uTextureSampler_0_Stage0, clamp(textureCoords, textureDomain.xy, textureDomain.zw))) * outputColor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_dst_over(ComposeTwo_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 position;
in vec2 textureCoords;
in vec4 textureDomain;
in vec4 color;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vtextureCoords_Stage0;
flat out vec4 vtextureDomain_Stage0;
flat out vec4 vcolor_Stage0;
void main() {
    vec2 pos2 = position;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(textureCoords, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(textureCoords, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(textureCoords, 1.0)).xy;
    vtextureCoords_Stage0 = textureCoords;
    vtextureDomain_Stage0 = textureDomain;
    vcolor_Stage0 = color;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

