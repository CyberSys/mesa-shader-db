[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 uinnerRect_Stage1;
uniform vec2 uinvRadiiXY_Stage1;
uniform mat4 um_Stage2;
uniform vec4 uv_Stage2;
uniform vec2 uImageIncrement_Stage3;
uniform float uSurfaceScale_Stage3;
uniform vec3 uLightColor_Stage3;
uniform float uKD_Stage3;
uniform vec4 uTexDom_Stage3;
uniform vec3 uDecalParams_Stage3;
uniform vec3 uLightDirection_Stage3;
uniform sampler2D uTextureSampler_0_Stage3;
uniform sampler2D uTextureSampler_0_Stage4;
noperspective in vec4 vcolor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in float vinCoverage_Stage0;
vec4 light_Stage3(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    float colorScale = uKD_Stage3 * dot(normal, surfaceToLight);
    return vec4(lightColor * clamp(colorScale, 0.0, 1.0), 1.0);
}
float sobel_Stage3(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage3(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage3(float m[9], float surfaceScale) {
    return pointToNormal_Stage3(sobel_Stage3(0.0, 0.0, m[3], m[4], m[6], m[7], 0.66666698455810547), sobel_Stage3(m[3], m[6], m[4], m[7], 0.0, 0.0, 0.66666698455810547), surfaceScale);
}
vec4 ColorTableEffect_Stage4_c0_c0(vec4 _input, vec2 _coords) {
    vec4 _output;
    float nonZeroAlpha = max(_input.w, 9.9999997473787516e-05);
    vec4 coord = vec4(_input.xyz / nonZeroAlpha, nonZeroAlpha);
    coord = coord * 0.9960939884185791 + vec4(0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579);
    _output.w = texture(uTextureSampler_0_Stage4, vec2(coord.w, 0.125)).w;
    _output.x = texture(uTextureSampler_0_Stage4, vec2(coord.x, 0.375)).w;
    _output.y = texture(uTextureSampler_0_Stage4, vec2(coord.y, 0.625)).w;
    _output.z = texture(uTextureSampler_0_Stage4, vec2(coord.z, 0.875)).w;
    _output.xyz *= _output.w;
    return _output;
}
void main() {
    vec4 outputCoverage_Stage0;
    {
        float alpha = 1.0;
        alpha = vinCoverage_Stage0;
        outputCoverage_Stage0 = vec4(alpha);
    }
    vec4 output_Stage1;
    {
        vec2 dxy0 = uinnerRect_Stage1.xy - gl_FragCoord.xy;
        vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1.zw;
        vec2 dxy = max(max(dxy0, dxy1), 0.0);
        vec2 Z = dxy * uinvRadiiXY_Stage1;
        float implicit = dot(Z, dxy) - 1.0;
        float grad_dot = 4.0 * dot(Z, Z);
        grad_dot = max(grad_dot, 9.9999997473787516e-05);
        float approx_dist = implicit * inversesqrt(grad_dot);
        float alpha = clamp(0.5 + approx_dist, 0.0, 1.0);
        output_Stage1 = outputCoverage_Stage0 * alpha;
    }
    vec4 output_Stage2;
    {
        vec4 inputColor = output_Stage1;
        output_Stage2 = um_Stage2 * inputColor + uv_Stage2;
        {
            output_Stage2 = clamp(output_Stage2, 0.0, 1.0);
        }
    }
    vec4 output_Stage3;
    {
        vec2 coord = vTransformedCoords_0_Stage0;
        float m[9];
        vec4 temp0;
        {
            vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[0] = temp0.w;
        vec4 temp1;
        {
            vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[1] = temp1.w;
        vec4 temp2;
        {
            vec2 origCoord = coord + uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[2] = temp2.w;
        vec4 temp3;
        {
            vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[3] = temp3.w;
        vec4 temp4;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[4] = temp4.w;
        vec4 temp5;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[5] = temp5.w;
        vec4 temp6;
        {
            vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[6] = temp6.w;
        vec4 temp7;
        {
            vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[7] = temp7.w;
        vec4 temp8;
        {
            vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[8] = temp8.w;
        vec3 surfaceToLight = uLightDirection_Stage3;
        output_Stage3 = light_Stage3(normal_Stage3(m, uSurfaceScale_Stage3), surfaceToLight, uLightColor_Stage3);
        output_Stage3 *= output_Stage2;
    }
    vec4 output_Stage4;
    {
        output_Stage4 = ColorTableEffect_Stage4_c0_c0(output_Stage3, gl_FragCoord.xy);
    }
    {
        sk_FragColor = output_Stage4;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec4 inColor;
in float inCoverage;
noperspective out vec4 vcolor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out float vinCoverage_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vinCoverage_Stage0 = inCoverage;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

