[require]
GLSL >= 1.40
GL_KHR_blend_equation_advanced

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform float ucornerRadius_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec4 uproxyRect_Stage1_c0_c0_c0_c0_c0_c0;
uniform float ublurRadius_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec2 uScale_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec4 uTexDom_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec3 uDecalParams_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec4 uboundsUniform_Stage1_c0_c0_c1_c0_c0_c0;
uniform float uxInvZoom_Stage1_c0_c0_c1_c0_c0_c0;
uniform float uyInvZoom_Stage1_c0_c0_c1_c0_c0_c0;
uniform float uxInvInset_Stage1_c0_c0_c1_c0_c0_c0;
uniform float uyInvInset_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec2 uoffset_Stage1_c0_c0_c1_c0_c0_c0;
uniform float ucornerRadius_Stage1_c0_c0_c1_c0_c1_c0;
uniform vec4 uproxyRect_Stage1_c0_c0_c1_c0_c1_c0;
uniform float ublurRadius_Stage1_c0_c0_c1_c0_c1_c0;
uniform vec4 urectH_Stage1_c1_c0;
uniform float uinvSixSigma_Stage1_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
uniform sampler2D uTextureSampler_3_Stage1;
uniform sampler2D uTextureSampler_4_Stage1;
uniform sampler2D uTextureSampler_5_Stage1;
noperspective in vec4 vcolor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in float vinCoverage_Stage0;
vec4 RRectBlurEffect_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 translatedFragPos = gl_FragCoord.xy - uproxyRect_Stage1_c0_c0_c0_c0_c0_c0.xy;
    float threshold = ucornerRadius_Stage1_c0_c0_c0_c0_c0_c0 + 2.0 * ublurRadius_Stage1_c0_c0_c0_c0_c0_c0;
    vec2 middle = (uproxyRect_Stage1_c0_c0_c0_c0_c0_c0.zw - uproxyRect_Stage1_c0_c0_c0_c0_c0_c0.xy) - 2.0 * threshold;
    if (translatedFragPos.x >= threshold && translatedFragPos.x < middle.x + threshold) {
        translatedFragPos.x = threshold;
    } else if (translatedFragPos.x >= middle.x + threshold) {
        translatedFragPos.x -= middle.x - 1.0;
    }
    if (translatedFragPos.y > threshold && translatedFragPos.y < middle.y + threshold) {
        translatedFragPos.y = threshold;
    } else if (translatedFragPos.y >= middle.y + threshold) {
        translatedFragPos.y -= middle.y - 1.0;
    }
    vec2 proxyDims = vec2(2.0 * threshold + 1.0);
    vec2 texCoord = translatedFragPos / proxyDims;
    _output = _input * texture(uTextureSampler_0_Stage1, texCoord);
    return _output;
}
vec4 DisplacementMap_Stage1_c0_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 dColor = texture(uTextureSampler_1_Stage1, vTransformedCoords_0_Stage0);
    dColor.xyz = dColor.w < 9.9999999747524271e-07 ? vec3(0.0) : clamp(dColor.xyz / dColor.w, 0.0, 1.0);
    vec2 cCoords = vTransformedCoords_1_Stage0 + uScale_Stage1_c0_c0_c0_c0_c1_c0 * (dColor.zw - vec2(0.5));
    {
        vec2 origCoord = cCoords;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        _output = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    return _output;
}
vec4 blend_dst_atop(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + src.w * dst;
}
vec4 ComposeTwo_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_dst_atop(RRectBlurEffect_Stage1_c0_c0_c0_c0_c0_c0(inputColor), DisplacementMap_Stage1_c0_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 MagnifierEffect_Stage1_c0_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_2_Stage0;
    vec2 zoom_coord = uoffset_Stage1_c0_c0_c1_c0_c0_c0 + coord * vec2(uxInvZoom_Stage1_c0_c0_c1_c0_c0_c0, uyInvZoom_Stage1_c0_c0_c1_c0_c0_c0);
    vec2 delta = (coord - uboundsUniform_Stage1_c0_c0_c1_c0_c0_c0.xy) * uboundsUniform_Stage1_c0_c0_c1_c0_c0_c0.zw;
    delta = min(delta, vec2(1.0, 1.0) - delta);
    delta *= vec2(uxInvInset_Stage1_c0_c0_c1_c0_c0_c0, uyInvInset_Stage1_c0_c0_c1_c0_c0_c0);
    float weight = 0.0;
    if (delta.x < 2.0 && delta.y < 2.0) {
        delta = vec2(2.0, 2.0) - delta;
        float dist = length(delta);
        dist = max(2.0 - dist, 0.0);
        weight = min(dist * dist, 1.0);
    } else {
        vec2 delta_squared = delta * delta;
        weight = min(min(delta_squared.x, delta_squared.y), 1.0);
    }
    _output = texture(uTextureSampler_3_Stage1, mix(coord, zoom_coord, weight));
    return _output;
}
vec4 RRectBlurEffect_Stage1_c0_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 translatedFragPos = gl_FragCoord.xy - uproxyRect_Stage1_c0_c0_c1_c0_c1_c0.xy;
    float threshold = ucornerRadius_Stage1_c0_c0_c1_c0_c1_c0 + 2.0 * ublurRadius_Stage1_c0_c0_c1_c0_c1_c0;
    vec2 middle = (uproxyRect_Stage1_c0_c0_c1_c0_c1_c0.zw - uproxyRect_Stage1_c0_c0_c1_c0_c1_c0.xy) - 2.0 * threshold;
    if (translatedFragPos.x >= threshold && translatedFragPos.x < middle.x + threshold) {
        translatedFragPos.x = threshold;
    } else if (translatedFragPos.x >= middle.x + threshold) {
        translatedFragPos.x -= middle.x - 1.0;
    }
    if (translatedFragPos.y > threshold && translatedFragPos.y < middle.y + threshold) {
        translatedFragPos.y = threshold;
    } else if (translatedFragPos.y >= middle.y + threshold) {
        translatedFragPos.y -= middle.y - 1.0;
    }
    vec2 proxyDims = vec2(2.0 * threshold + 1.0);
    vec2 texCoord = translatedFragPos / proxyDims;
    _output = _input * texture(uTextureSampler_4_Stage1, texCoord);
    return _output;
}
vec4 blend_exclusion(vec4 src, vec4 dst) {
    return vec4((dst.xyz + src.xyz) - (2.0 * dst.xyz) * src.xyz, src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_exclusion(MagnifierEffect_Stage1_c0_c0_c1_c0_c0_c0(inputColor), RRectBlurEffect_Stage1_c0_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_src_over(vec4 src, vec4 dst) {
    return src + (1.0 - src.w) * dst;
}
vec4 blend_darken(vec4 src, vec4 dst) {
    vec4 result = blend_src_over(src, dst);
    result.xyz = min(result.xyz, (1.0 - dst.w) * src.xyz + dst.xyz);
    return result;
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_darken(ComposeTwo_Stage1_c0_c0_c0_c0(inputColor), ComposeTwo_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 RectBlurEffect_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    float xCoverage, yCoverage;
    {
        float x, y;
        {
            x = max(urectH_Stage1_c1_c0.x - gl_FragCoord.x, gl_FragCoord.x - urectH_Stage1_c1_c0.z);
            y = max(urectH_Stage1_c1_c0.y - gl_FragCoord.y, gl_FragCoord.y - urectH_Stage1_c1_c0.w);
        }
        xCoverage = texture(uTextureSampler_5_Stage1, vec2(x * uinvSixSigma_Stage1_c1_c0, 0.5)).w;
        yCoverage = texture(uTextureSampler_5_Stage1, vec2(y * uinvSixSigma_Stage1_c1_c0, 0.5)).w;
        _output = (_input * xCoverage) * yCoverage;
    }
    _output = (_input * xCoverage) * yCoverage;
    return _output;
}
vec4 blend_src_atop(vec4 src, vec4 dst) {
    return dst.w * src + (1.0 - src.w) * dst;
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
        float alpha = 1.0;
        alpha = vinCoverage_Stage0;
        outputCoverage_Stage0 = vec4(alpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_src_atop(ComposeTwo_Stage1_c0_c0(inputColor), RectBlurEffect_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = outputCoverage_Stage0 * output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
in vec4 inColor;
in float inCoverage;
noperspective out vec4 vcolor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out float vinCoverage_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    vinCoverage_Stage0 = inCoverage;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

