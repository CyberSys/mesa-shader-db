[require]
GLSL >= 1.40

[fragment shader]
#version 140

uniform float uinnerThreshold_Stage1;
uniform float uouterThreshold_Stage1;
uniform vec4 urectUniform_Stage2;
uniform sampler2D uTextureSampler_0_Stage1;
noperspective in vec2 vEllipseOffsets0_Stage0;
noperspective in vec2 vEllipseOffsets1_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
void main() {
    vec4 outputCoverage_Stage0;
    {
        vec2 scaledOffset = vEllipseOffsets0_Stage0;
        float test = dot(scaledOffset, scaledOffset) - 1.0;
        vec2 duvdx = dFdx(vEllipseOffsets0_Stage0);
        vec2 duvdy = dFdy(vEllipseOffsets0_Stage0);
        vec2 grad = vec2(vEllipseOffsets0_Stage0.x * duvdx.x + vEllipseOffsets0_Stage0.y * duvdx.y, vEllipseOffsets0_Stage0.x * duvdy.x + vEllipseOffsets0_Stage0.y * duvdy.y);
        float grad_dot = 4.0 * dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    {
        vec4 color = outputCoverage_Stage0;
        vec4 mask_color = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
        if (mask_color.w < 0.5) {
            if (color.w > uouterThreshold_Stage1) {
                float scale = uouterThreshold_Stage1 / color.w;
                color.xyz *= scale;
                color.w = uouterThreshold_Stage1;
            }
        } else if (color.w < uinnerThreshold_Stage1) {
            float scale = uinnerThreshold_Stage1 / max(0.0010000000474974513, color.w);
            color.xyz *= scale;
            color.w = uinnerThreshold_Stage1;
        }
    }
    {
        float alpha;
        {
            alpha = float(all(greaterThan(vec4(gl_FragCoord.xy, urectUniform_Stage2.zw), vec4(urectUniform_Stage2.xy, gl_FragCoord.xy))) ? 1 : 0);
        }
        {
            alpha = 1.0 - alpha;
        }
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffsets0;
in vec2 inEllipseOffsets1;
noperspective out vec2 vEllipseOffsets0_Stage0;
noperspective out vec2 vEllipseOffsets1_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vEllipseOffsets0_Stage0 = inEllipseOffsets0;
    vEllipseOffsets1_Stage0 = inEllipseOffsets1;
    vinColor_Stage0 = inColor;
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

