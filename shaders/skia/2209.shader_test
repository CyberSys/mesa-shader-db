[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 uCoordTransformMatrix_1_Stage0;
uniform vec4 usubset_Stage1_c0_c0_c0_c0;
uniform vec4 uclamp_Stage1_c0_c0_c0_c0;
uniform vec2 uDstTextureUpperLeft_Stage2;
uniform vec2 uDstTextureCoordScale_Stage2;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uDstTextureSampler_Stage2;
noperspective in vec4 vQuadEdge_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
vec4 TextureEffect_Stage1_c0_c0_c0_c0(vec4 _input, vec2 _coords) {
    _coords = _coords * uCoordTransformMatrix_1_Stage0.xz + uCoordTransformMatrix_1_Stage0.yw;
    vec4 _output;
    vec2 inCoord = _coords;
    vec2 subsetCoord;
    {
        float w = usubset_Stage1_c0_c0_c0_c0.z - usubset_Stage1_c0_c0_c0_c0.x;
        float w2 = 2.0 * w;
        float m = mod(inCoord.x - usubset_Stage1_c0_c0_c0_c0.x, w2);
        subsetCoord.x = mix(m, w2 - m, step(w, m)) + usubset_Stage1_c0_c0_c0_c0.x;
    }
    {
        float w = usubset_Stage1_c0_c0_c0_c0.w - usubset_Stage1_c0_c0_c0_c0.y;
        float w2 = 2.0 * w;
        float m = mod(inCoord.y - usubset_Stage1_c0_c0_c0_c0.y, w2);
        subsetCoord.y = mix(m, w2 - m, step(w, m)) + usubset_Stage1_c0_c0_c0_c0.y;
    }
    vec2 clampedCoord;
    clampedCoord.x = clamp(subsetCoord.x, uclamp_Stage1_c0_c0_c0_c0.x, uclamp_Stage1_c0_c0_c0_c0.z);
    clampedCoord.y = clamp(subsetCoord.y, uclamp_Stage1_c0_c0_c0_c0.y, uclamp_Stage1_c0_c0_c0_c0.w);
    vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
    _output = _input * textureColor;
    return _output;
}
vec4 Bicubic_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    float coord = vTransformedCoords_0_Stage0.y - 0.5;
    float f = fract(coord);
    coord += 0.5 - f;
    float f2 = f * f;
    vec4 w = mat4(0.055555555555555552, 0.88888888888888884, 0.055555555555555552, 0.0, -0.5, 0.0, 0.5, 0.0, 0.83333333333333337, -2.0, 1.5, -0.33333333333333331, -0.3888888888888889, 1.1666666666666667, -1.1666666666666667, 0.3888888888888889) * vec4(1.0, f, f2, f2 * f);
    vec4 c[4];
    c[0] = TextureEffect_Stage1_c0_c0_c0_c0(vec4(1.0), vec2(vTransformedCoords_0_Stage0.x, coord + -1.0));
    c[1] = TextureEffect_Stage1_c0_c0_c0_c0(vec4(1.0), vec2(vTransformedCoords_0_Stage0.x, coord));
    c[2] = TextureEffect_Stage1_c0_c0_c0_c0(vec4(1.0), vec2(vTransformedCoords_0_Stage0.x, coord + 1.0));
    c[3] = TextureEffect_Stage1_c0_c0_c0_c0(vec4(1.0), vec2(vTransformedCoords_0_Stage0.x, coord + 2.0));
    vec4 bicubicColor = ((c[0] * w.x + c[1] * w.y) + c[2] * w.z) + c[3] * w.w;
    bicubicColor.xyz = max(vec3(0.0), min(bicubicColor.xyz, bicubicColor.www));
    _output = bicubicColor * _input;
    return _output;
}
vec4 blend_src(vec4 src, vec4 dst) {
    return src;
}
void main() {
    vec4 outputCoverage_Stage0;
    {
        float edgeAlpha;
        vec2 duvdx = dFdx(vQuadEdge_Stage0.xy);
        vec2 duvdy = -dFdy(vQuadEdge_Stage0.xy);
        if (vQuadEdge_Stage0.z > 0.0 && vQuadEdge_Stage0.w > 0.0) {
            edgeAlpha = min(min(vQuadEdge_Stage0.z, vQuadEdge_Stage0.w) + 0.5, 1.0);
        } else {
            vec2 gF = vec2((2.0 * vQuadEdge_Stage0.x) * duvdx.x - duvdx.y, (2.0 * vQuadEdge_Stage0.x) * duvdy.x - duvdy.y);
            edgeAlpha = vQuadEdge_Stage0.x * vQuadEdge_Stage0.x - vQuadEdge_Stage0.y;
            edgeAlpha = clamp(0.5 - edgeAlpha / length(gF), 0.0, 1.0);
        }
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        output_Stage1 = Bicubic_Stage1_c0_c0(vec4(1.0));
    }
    {
        if (all(lessThanEqual(outputCoverage_Stage0.xyz, vec3(0.0)))) {
            discard;
        }
        vec2 _dstTexCoord = (gl_FragCoord.xy - uDstTextureUpperLeft_Stage2) * uDstTextureCoordScale_Stage2;
        _dstTexCoord.y = 1.0 - _dstTexCoord.y;
        vec4 _dstColor = texture(uDstTextureSampler_Stage2, _dstTexCoord);
        sk_FragColor = blend_src(output_Stage1, _dstColor);
        sk_FragColor = outputCoverage_Stage0 * sk_FragColor + (vec4(1.0) - outputCoverage_Stage0) * _dstColor;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec4 inQuadEdge;
noperspective out vec4 vQuadEdge_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vQuadEdge_Stage0 = inQuadEdge;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

