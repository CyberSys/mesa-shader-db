[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec2 uScale_Stage1_c0_c0;
uniform vec4 uTexDom_Stage1_c0_c0;
uniform vec3 uDecalParams_Stage1_c0_c0;
uniform vec4 urectH_Stage1_c1_c0_c0_c0_c0_c0;
uniform float uinvSixSigma_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec4 ucolor_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec2 ubaseFrequency_Stage1_c1_c0_c1_c0_c0_c0;
uniform float uz_Stage1_c1_c0_c1_c0_c0_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
uniform sampler2D uTextureSampler_3_Stage1;
uniform sampler2D uTextureSampler_4_Stage1;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
vec4 DisplacementMap_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 dColor = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
    dColor.xyz = dColor.w < 9.9999999747524271e-07 ? vec3(0.0) : clamp(dColor.xyz / dColor.w, 0.0, 1.0);
    vec2 cCoords = vTransformedCoords_1_Stage0 + uScale_Stage1_c0_c0 * (dColor.wy - vec2(0.5));
    {
        vec2 origCoord = cCoords;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0.xy, uTexDom_Stage1_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0.z < 1.0) {
            err = 0.0;
        }
        _output = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    return _output;
}
vec4 RectBlurEffect_Stage1_c1_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float xCoverage, yCoverage;
    {
        float x, y;
        {
            x = max(urectH_Stage1_c1_c0_c0_c0_c0_c0.x - gl_FragCoord.x, gl_FragCoord.x - urectH_Stage1_c1_c0_c0_c0_c0_c0.z);
            y = max(urectH_Stage1_c1_c0_c0_c0_c0_c0.y - gl_FragCoord.y, gl_FragCoord.y - urectH_Stage1_c1_c0_c0_c0_c0_c0.w);
        }
        xCoverage = texture(uTextureSampler_2_Stage1, vec2(x * uinvSixSigma_Stage1_c1_c0_c0_c0_c0_c0, 0.5)).w;
        yCoverage = texture(uTextureSampler_2_Stage1, vec2(y * uinvSixSigma_Stage1_c1_c0_c0_c0_c0_c0, 0.5)).w;
        _output = (_input * xCoverage) * yCoverage;
    }
    _output = (_input * xCoverage) * yCoverage;
    return _output;
}
vec4 ConstColorProcessor_Stage1_c1_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    {
        _output = ucolor_Stage1_c1_c0_c0_c0_c1_c0;
    }
    return _output;
}
vec4 blend_src_out(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src;
}
vec4 ComposeTwo_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_out(RectBlurEffect_Stage1_c1_c0_c0_c0_c0_c0(inputColor), ConstColorProcessor_Stage1_c1_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec3 fade_Stage1_c1_c0_c1_c0_c0_c0(vec3 t) {
    return ((t * t) * t) * (t * (t * 6.0 - 15.0) + 10.0);
}
float perm_Stage1_c1_c0_c1_c0_c0_c0(float x) {
    return texture(uTextureSampler_3_Stage1, vec2(fract(x / 256.0), 0.0)).x * 255.0;
}
float grad_Stage1_c1_c0_c1_c0_c0_c0(float x, vec3 p) {
    return dot(texture(uTextureSampler_4_Stage1, vec2(fract(x / 16.0), 0.0)).xyz * 255.0 - vec3(1.0), p);
}
float lerp_Stage1_c1_c0_c1_c0_c0_c0(float a, float b, float w) {
    return a + w * (b - a);
}
float noise_Stage1_c1_c0_c1_c0_c0_c0(vec3 p) {
    vec3 P = mod(floor(p), 256.0);
    p -= floor(p);
    vec3 f = fade_Stage1_c1_c0_c1_c0_c0_c0(p);
    float A = perm_Stage1_c1_c0_c1_c0_c0_c0(P.x) + P.y;
    float AA = perm_Stage1_c1_c0_c1_c0_c0_c0(A) + P.z;
    float AB = perm_Stage1_c1_c0_c1_c0_c0_c0(A + 1.0) + P.z;
    float B = perm_Stage1_c1_c0_c1_c0_c0_c0(P.x + 1.0) + P.y;
    float BA = perm_Stage1_c1_c0_c1_c0_c0_c0(B) + P.z;
    float BB = perm_Stage1_c1_c0_c1_c0_c0_c0(B + 1.0) + P.z;
    float result = lerp_Stage1_c1_c0_c1_c0_c0_c0(lerp_Stage1_c1_c0_c1_c0_c0_c0(lerp_Stage1_c1_c0_c1_c0_c0_c0(grad_Stage1_c1_c0_c1_c0_c0_c0(perm_Stage1_c1_c0_c1_c0_c0_c0(AA), p), grad_Stage1_c1_c0_c1_c0_c0_c0(perm_Stage1_c1_c0_c1_c0_c0_c0(BA), p + vec3(-1.0, 0.0, 0.0)), f.x), lerp_Stage1_c1_c0_c1_c0_c0_c0(grad_Stage1_c1_c0_c1_c0_c0_c0(perm_Stage1_c1_c0_c1_c0_c0_c0(AB), p + vec3(0.0, -1.0, 0.0)), grad_Stage1_c1_c0_c1_c0_c0_c0(perm_Stage1_c1_c0_c1_c0_c0_c0(BB), p + vec3(-1.0, -1.0, 0.0)), f.x), f.y), lerp_Stage1_c1_c0_c1_c0_c0_c0(lerp_Stage1_c1_c0_c1_c0_c0_c0(grad_Stage1_c1_c0_c1_c0_c0_c0(perm_Stage1_c1_c0_c1_c0_c0_c0(AA + 1.0), p + vec3(0.0, 0.0, -1.0)), grad_Stage1_c1_c0_c1_c0_c0_c0(perm_Stage1_c1_c0_c1_c0_c0_c0(BA + 1.0), p + vec3(-1.0, 0.0, -1.0)), f.x), lerp_Stage1_c1_c0_c1_c0_c0_c0(grad_Stage1_c1_c0_c1_c0_c0_c0(perm_Stage1_c1_c0_c1_c0_c0_c0(AB + 1.0), p + vec3(0.0, -1.0, -1.0)), grad_Stage1_c1_c0_c1_c0_c0_c0(perm_Stage1_c1_c0_c1_c0_c0_c0(BB + 1.0), p + vec3(-1.0, -1.0, -1.0)), f.x), f.y), f.z);
    return result;
}
float noiseOctaves_Stage1_c1_c0_c1_c0_c0_c0(vec3 p) {
    float result = 0.0;
    float ratio = 1.0;
    for (float i = 0.0;i < 9.0; i++) {
        result += noise_Stage1_c1_c0_c1_c0_c0_c0(p) / ratio;
        p *= 2.0;
        ratio *= 2.0;
    }
    return (result + 1.0) / 2.0;
}
vec4 ImprovedPerlinNoise_Stage1_c1_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 coords = vTransformedCoords_2_Stage0 * ubaseFrequency_Stage1_c1_c0_c1_c0_c0_c0;
    float r = noiseOctaves_Stage1_c1_c0_c1_c0_c0_c0(vec3(coords, uz_Stage1_c1_c0_c1_c0_c0_c0));
    float g = noiseOctaves_Stage1_c1_c0_c1_c0_c0_c0(vec3(coords, uz_Stage1_c1_c0_c1_c0_c0_c0));
    float b = noiseOctaves_Stage1_c1_c0_c1_c0_c0_c0(vec3(coords, uz_Stage1_c1_c0_c1_c0_c0_c0));
    float a = noiseOctaves_Stage1_c1_c0_c1_c0_c0_c0(vec3(coords, uz_Stage1_c1_c0_c1_c0_c0_c0));
    _output = vec4(r, g, b, a);
    _output = clamp(_output, 0.0, 1.0);
    _output = vec4(_output.xyz * _output.www, _output.w);
    return _output;
}
vec4 Big_Ole_Key_Stage1_c1_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = _input;
    return _output;
}
vec4 blend_multiply(vec4 src, vec4 dst) {
    return vec4(((1.0 - src.w) * dst.xyz + (1.0 - dst.w) * src.xyz) + src.xyz * dst.xyz, src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_multiply(ImprovedPerlinNoise_Stage1_c1_c0_c1_c0_c0_c0(inputColor), Big_Ole_Key_Stage1_c1_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_dst_in(ComposeTwo_Stage1_c1_c0_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
float _blend_color_saturation(vec3 color) {
    return max(max(color.x, color.y), color.z) - min(min(color.x, color.y), color.z);
}
vec3 _blend_set_color_saturation_helper(vec3 minMidMax, float sat) {
    if (minMidMax.x < minMidMax.z) {
        return vec3(0.0, (sat * (minMidMax.y - minMidMax.x)) / (minMidMax.z - minMidMax.x), sat);
    }
    return vec3(0.0);
}
vec3 _blend_set_color_saturation(vec3 hueLumColor, vec3 satColor) {
    float sat = _blend_color_saturation(satColor);
    if (hueLumColor.x <= hueLumColor.y) {
        if (hueLumColor.y <= hueLumColor.z) {
            hueLumColor.xyz = _blend_set_color_saturation_helper(hueLumColor, sat);
        } else if (hueLumColor.x <= hueLumColor.z) {
            hueLumColor.xzy = _blend_set_color_saturation_helper(hueLumColor.xzy, sat);
        } else {
            hueLumColor.zxy = _blend_set_color_saturation_helper(hueLumColor.zxy, sat);
        }
    } else if (hueLumColor.x <= hueLumColor.z) {
        hueLumColor.yxz = _blend_set_color_saturation_helper(hueLumColor.yxz, sat);
    } else if (hueLumColor.y <= hueLumColor.z) {
        hueLumColor.yzx = _blend_set_color_saturation_helper(hueLumColor.yzx, sat);
    } else {
        hueLumColor.zyx = _blend_set_color_saturation_helper(hueLumColor.zyx, sat);
    }
    return hueLumColor;
}
float _blend_color_luminance(vec3 color) {
    return dot(vec3(0.30000001192092896, 0.5899999737739563, 0.10999999940395355), color);
}
vec3 _blend_set_color_luminance(vec3 hueSatColor, float alpha, vec3 lumColor) {
    float lum = _blend_color_luminance(lumColor);
    vec3 result = (lum - _blend_color_luminance(hueSatColor)) + hueSatColor;
    float minComp = min(min(result.x, result.y), result.z);
    float maxComp = max(max(result.x, result.y), result.z);
    if (minComp < 0.0 && lum != minComp) {
        result = lum + ((result - lum) * lum) / (lum - minComp);
    }
    if (maxComp > alpha && maxComp != lum) {
        return lum + ((result - lum) * (alpha - lum)) / (maxComp - lum);
    }
    return result;
}
vec4 blend_hue(vec4 src, vec4 dst) {
    float alpha = dst.w * src.w;
    vec3 sda = src.xyz * dst.w;
    vec3 dsa = dst.xyz * src.w;
    return vec4((((_blend_set_color_luminance(_blend_set_color_saturation(sda, dsa), alpha, dsa) + dst.xyz) - dsa) + src.xyz) - sda, (src.w + dst.w) - alpha);
}
void main() {
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(vec4(1.0).xyz, 1.0);
        output_Stage1 = blend_hue(DisplacementMap_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 position;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(localCoord, 1.0)).xy;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

