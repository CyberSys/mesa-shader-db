[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec2 uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec4 uKernel_Stage1_c0_c0_c0_c0_c0_c0[5];
uniform vec2 uKernelOffset_Stage1_c0_c0_c0_c0_c0_c0;
uniform float uGain_Stage1_c0_c0_c0_c0_c0_c0;
uniform float uBias_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec4 uboundsUniform_Stage1_c0_c0_c0_c0_c1_c0;
uniform float uxInvZoom_Stage1_c0_c0_c0_c0_c1_c0;
uniform float uyInvZoom_Stage1_c0_c0_c0_c0_c1_c0;
uniform float uxInvInset_Stage1_c0_c0_c0_c0_c1_c0;
uniform float uyInvInset_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec2 uoffset_Stage1_c0_c0_c0_c0_c1_c0;
uniform float uinnerThreshold_Stage1_c0_c0_c1_c0_c0_c0;
uniform float uouterThreshold_Stage1_c0_c0_c1_c0_c0_c0;
uniform mat4 um_Stage1_c0_c0_c1_c0_c1_c0;
uniform vec4 uv_Stage1_c0_c0_c1_c0_c1_c0;
uniform vec4 ucircleData_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec4 urectUniform_Stage1_c1_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
uniform sampler2D uTextureSampler_3_Stage1;
noperspective in vec4 vcolor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in float vinCoverage_Stage0;
vec4 MatrixConvolution_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_0_Stage0 - uKernelOffset_Stage1_c0_c0_c0_c0_c0_c0 * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
    vec4 c;
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[0].x;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[0].y;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[0].z;
        {
            vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[0].w;
        {
            vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[1].x;
        {
            vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[1].y;
        {
            vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[1].z;
        {
            vec2 origCoord = coord + uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[1].w;
        {
            vec2 origCoord = coord + vec2(2.0, 1.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[2].x;
        {
            vec2 origCoord = coord + vec2(3.0, 1.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[2].y;
        {
            vec2 origCoord = coord + vec2(4.0, 1.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[2].z;
        {
            vec2 origCoord = coord + vec2(0.0, 2.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[2].w;
        {
            vec2 origCoord = coord + vec2(1.0, 2.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[3].x;
        {
            vec2 origCoord = coord + vec2(2.0, 2.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[3].y;
        {
            vec2 origCoord = coord + vec2(3.0, 2.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[3].z;
        {
            vec2 origCoord = coord + vec2(4.0, 2.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[3].w;
        {
            vec2 origCoord = coord + vec2(0.0, 3.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[4].x;
        {
            vec2 origCoord = coord + vec2(1.0, 3.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[4].y;
        {
            vec2 origCoord = coord + vec2(2.0, 3.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[4].z;
        {
            vec2 origCoord = coord + vec2(3.0, 3.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[4].w;
        {
            vec2 origCoord = coord + vec2(4.0, 3.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        vec2 origCoord = vTransformedCoords_0_Stage0;
        vec2 clampedCoord;
        clampedCoord = origCoord;
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        c = textureColor;
    }
    _output.w = c.w;
    _output.xyz = clamp(sum.xyz * uGain_Stage1_c0_c0_c0_c0_c0_c0 + uBias_Stage1_c0_c0_c0_c0_c0_c0, 0.0, 1.0);
    _output.xyz *= _output.w;
    _output *= _input;
    return _output;
}
vec4 MagnifierEffect_Stage1_c0_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_1_Stage0;
    vec2 zoom_coord = uoffset_Stage1_c0_c0_c0_c0_c1_c0 + coord * vec2(uxInvZoom_Stage1_c0_c0_c0_c0_c1_c0, uyInvZoom_Stage1_c0_c0_c0_c0_c1_c0);
    vec2 delta = (coord - uboundsUniform_Stage1_c0_c0_c0_c0_c1_c0.xy) * uboundsUniform_Stage1_c0_c0_c0_c0_c1_c0.zw;
    delta = min(delta, vec2(1.0, 1.0) - delta);
    delta *= vec2(uxInvInset_Stage1_c0_c0_c0_c0_c1_c0, uyInvInset_Stage1_c0_c0_c0_c0_c1_c0);
    float weight = 0.0;
    if (delta.x < 2.0 && delta.y < 2.0) {
        delta = vec2(2.0, 2.0) - delta;
        float dist = length(delta);
        dist = max(2.0 - dist, 0.0);
        weight = min(dist * dist, 1.0);
    } else {
        vec2 delta_squared = delta * delta;
        weight = min(min(delta_squared.x, delta_squared.y), 1.0);
    }
    _output = texture(uTextureSampler_1_Stage1, mix(coord, zoom_coord, weight));
    return _output;
}
float _blend_color_luminance(vec3 color) {
    return dot(vec3(0.30000001192092896, 0.5899999737739563, 0.10999999940395355), color);
}
vec3 _blend_set_color_luminance(vec3 hueSatColor, float alpha, vec3 lumColor) {
    float lum = _blend_color_luminance(lumColor);
    vec3 result = (lum - _blend_color_luminance(hueSatColor)) + hueSatColor;
    float minComp = min(min(result.x, result.y), result.z);
    float maxComp = max(max(result.x, result.y), result.z);
    if (minComp < 0.0 && lum != minComp) {
        result = lum + ((result - lum) * lum) / (lum - minComp);
    }
    if (maxComp > alpha && maxComp != lum) {
        return lum + ((result - lum) * (alpha - lum)) / (maxComp - lum);
    }
    return result;
}
vec4 blend_luminosity(vec4 src, vec4 dst) {
    float alpha = dst.w * src.w;
    vec3 sda = src.xyz * dst.w;
    vec3 dsa = dst.xyz * src.w;
    return vec4((((_blend_set_color_luminance(dsa, alpha, sda) + dst.xyz) - dsa) + src.xyz) - sda, (src.w + dst.w) - alpha);
}
vec4 ComposeTwo_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_luminosity(MatrixConvolution_Stage1_c0_c0_c0_c0_c0_c0(inputColor), MagnifierEffect_Stage1_c0_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 AlphaThresholdFragmentProcessor_Stage1_c0_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 color = _input;
    vec4 mask_color = texture(uTextureSampler_2_Stage1, vTransformedCoords_2_Stage0);
    if (mask_color.w < 0.5) {
        if (color.w > uouterThreshold_Stage1_c0_c0_c1_c0_c0_c0) {
            float scale = uouterThreshold_Stage1_c0_c0_c1_c0_c0_c0 / color.w;
            color.xyz *= scale;
            color.w = uouterThreshold_Stage1_c0_c0_c1_c0_c0_c0;
        }
    } else if (color.w < uinnerThreshold_Stage1_c0_c0_c1_c0_c0_c0) {
        float scale = uinnerThreshold_Stage1_c0_c0_c1_c0_c0_c0 / max(0.0010000000474974513, color.w);
        color.xyz *= scale;
        color.w = uinnerThreshold_Stage1_c0_c0_c1_c0_c0_c0;
    }
    _output = color;
    return _output;
}
vec4 ColorMatrixFragmentProcessor_Stage1_c0_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = _input;
    {
        float nonZeroAlpha = max(inputColor.w, 9.9999997473787516e-05);
        inputColor = vec4(inputColor.xyz / nonZeroAlpha, inputColor.w);
    }
    _output = um_Stage1_c0_c0_c1_c0_c1_c0 * inputColor + uv_Stage1_c0_c0_c1_c0_c1_c0;
    {
        _output = clamp(_output, 0.0, 1.0);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 blend_xor(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + (1.0 - src.w) * dst;
}
vec4 ComposeTwo_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_xor(AlphaThresholdFragmentProcessor_Stage1_c0_c0_c1_c0_c0_c0(inputColor), ColorMatrixFragmentProcessor_Stage1_c0_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_xor(ComposeTwo_Stage1_c0_c0_c0_c0(inputColor), ComposeTwo_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 CircleBlurFragmentProcessor_Stage1_c1_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 vec = vec2((gl_FragCoord.x - ucircleData_Stage1_c1_c0_c0_c0_c0_c0.x) * ucircleData_Stage1_c1_c0_c0_c0_c0_c0.w, (gl_FragCoord.y - ucircleData_Stage1_c1_c0_c0_c0_c0_c0.y) * ucircleData_Stage1_c1_c0_c0_c0_c0_c0.w);
    float dist = length(vec) + (0.5 - ucircleData_Stage1_c1_c0_c0_c0_c0_c0.z) * ucircleData_Stage1_c1_c0_c0_c0_c0_c0.w;
    _output = _input * texture(uTextureSampler_3_Stage1, vec2(dist, 0.5)).w;
    return _output;
}
vec4 Big_Ole_Key_Stage1_c1_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = _input;
    return _output;
}
float _blend_overlay_component(float sc, float sa, float dc, float da) {
    if (2.0 * dc <= da) {
        return (2.0 * sc) * dc;
    }
    return sa * da - (2.0 * (da - dc)) * (sa - sc);
}
vec4 blend_overlay(vec4 src, vec4 dst) {
    vec4 result = vec4(_blend_overlay_component(src.x, src.w, dst.x, dst.w), _blend_overlay_component(src.y, src.w, dst.y, dst.w), _blend_overlay_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
    result.xyz += dst.xyz * (1.0 - src.w) + src.xyz * (1.0 - dst.w);
    return result;
}
vec4 ComposeTwo_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_overlay(CircleBlurFragmentProcessor_Stage1_c1_c0_c0_c0_c0_c0(inputColor), Big_Ole_Key_Stage1_c1_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 AARectEffect_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float alpha;
    {
        alpha = float(all(greaterThan(vec4(gl_FragCoord.xy, urectUniform_Stage1_c1_c0_c1_c0.zw), vec4(urectUniform_Stage1_c1_c0_c1_c0.xy, gl_FragCoord.xy))) ? 1 : 0);
    }
    {
        alpha = 1.0 - alpha;
    }
    _output = _input * alpha;
    return _output;
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_luminosity(ComposeTwo_Stage1_c1_c0_c0_c0(inputColor), AARectEffect_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_src_out(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src;
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
        float alpha = 1.0;
        alpha = vinCoverage_Stage0;
        outputCoverage_Stage0 = vec4(alpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_src_out(ComposeTwo_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1 * outputCoverage_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
in vec4 inColor;
in float inCoverage;
noperspective out vec4 vcolor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out float vinCoverage_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    vinCoverage_Stage0 = inCoverage;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

