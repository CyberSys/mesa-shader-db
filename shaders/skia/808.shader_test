[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uscale0_1_Stage1_c0_c0_c1_c0;
uniform vec4 uscale2_3_Stage1_c0_c0_c1_c0;
uniform vec4 uscale4_5_Stage1_c0_c0_c1_c0;
uniform vec4 uscale6_7_Stage1_c0_c0_c1_c0;
uniform vec4 ubias0_1_Stage1_c0_c0_c1_c0;
uniform vec4 ubias2_3_Stage1_c0_c0_c1_c0;
uniform vec4 ubias4_5_Stage1_c0_c0_c1_c0;
uniform vec4 ubias6_7_Stage1_c0_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage1_c0_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage1_c0_c0_c1_c0;
uniform mat4 um_Stage2_c1_c0;
uniform vec4 uv_Stage2_c1_c0;
uniform vec2 uImageIncrement_Stage2_c2_c0;
uniform float uSurfaceScale_Stage2_c2_c0;
uniform vec3 uLightColor_Stage2_c2_c0;
uniform float uKS_Stage2_c2_c0;
uniform float uShininess_Stage2_c2_c0;
uniform vec4 uTexDom_Stage2_c2_c0;
uniform vec3 uDecalParams_Stage2_c2_c0;
uniform vec3 uLightDirection_Stage2_c2_c0;
uniform vec4 urectH_Stage3;
uniform float uinvSixSigma_Stage3;
uniform vec2 ubaseFrequency_Stage4_c3_c0;
uniform vec2 ustitchData_Stage4_c3_c0;
uniform vec2 ubaseFrequency_Stage5_c4_c0;
uniform vec2 ustitchData_Stage5_c4_c0;
uniform sampler2D uTextureSampler_0_Stage2;
uniform sampler2D uTextureSampler_0_Stage3;
uniform sampler2D uTextureSampler_0_Stage4;
uniform sampler2D uTextureSampler_1_Stage4;
uniform sampler2D uTextureSampler_0_Stage5;
uniform sampler2D uTextureSampler_1_Stage5;
noperspective in vec4 vinCircleEdge_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec3 vTransformedCoords_3_Stage0;
vec4 LinearGradientLayout_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float t = vTransformedCoords_0_Stage0.x + 9.9999997473787516e-06;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage1_c0_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage1_c0_c0_c1_c0.x) {
                scale = uscale0_1_Stage1_c0_c0_c1_c0;
                bias = ubias0_1_Stage1_c0_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage1_c0_c0_c1_c0;
                bias = ubias2_3_Stage1_c0_c0_c1_c0;
            }
        } else {
            if (t < uthresholds1_7_Stage1_c0_c0_c1_c0.z) {
                scale = uscale4_5_Stage1_c0_c0_c1_c0;
                bias = ubias4_5_Stage1_c0_c0_c1_c0;
            } else {
                scale = uscale6_7_Stage1_c0_c0_c1_c0;
                bias = ubias6_7_Stage1_c0_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 TiledGradientEffect_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = LinearGradientLayout_Stage1_c0_c0_c0_c0(vec4(1.0));
    {
        {
            float t_1 = t.x - 1.0;
            float tiled_t = (t_1 - 2.0 * floor(t_1 * 0.5)) - 1.0;
            t.x = abs(tiled_t);
        }
        _output = UnrolledBinaryGradientColorizer_Stage1_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 ColorMatrixFragmentProcessor_Stage2_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = _input;
    _output = um_Stage2_c1_c0 * inputColor + uv_Stage2_c1_c0;
    {
        _output = clamp(_output, 0.0, 1.0);
    }
    return _output;
}
vec4 light_Stage2_c2_c0(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    vec3 halfDir = normalize(surfaceToLight + vec3(0.0, 0.0, 1.0));
    float colorScale = uKS_Stage2_c2_c0 * pow(dot(normal, halfDir), uShininess_Stage2_c2_c0);
    vec3 color = lightColor * clamp(colorScale, 0.0, 1.0);
    return vec4(color, max(max(color.x, color.y), color.z));
}
float sobel_Stage2_c2_c0(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage2_c2_c0(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage2_c2_c0(float m[9], float surfaceScale) {
    return pointToNormal_Stage2_c2_c0(sobel_Stage2_c2_c0(m[1], m[2], m[4], m[5], m[7], m[8], 0.5), sobel_Stage2_c2_c0(0.0, 0.0, m[1], m[7], m[2], m[8], 0.33333298563957214), surfaceScale);
}
vec4 SpecularLighting_Stage2_c2_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_1_Stage0;
    float m[9];
    vec4 temp0;
    {
        vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage2_c2_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c2_c0.xy, uTexDom_Stage2_c2_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c2_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c2_c0.y);
        if (err > uDecalParams_Stage2_c2_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c2_c0.z < 1.0) {
            err = 0.0;
        }
        temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[0] = temp0.w;
    vec4 temp1;
    {
        vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage2_c2_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c2_c0.xy, uTexDom_Stage2_c2_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c2_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c2_c0.y);
        if (err > uDecalParams_Stage2_c2_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c2_c0.z < 1.0) {
            err = 0.0;
        }
        temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[1] = temp1.w;
    vec4 temp2;
    {
        vec2 origCoord = coord + uImageIncrement_Stage2_c2_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c2_c0.xy, uTexDom_Stage2_c2_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c2_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c2_c0.y);
        if (err > uDecalParams_Stage2_c2_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c2_c0.z < 1.0) {
            err = 0.0;
        }
        temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[2] = temp2.w;
    vec4 temp3;
    {
        vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage2_c2_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c2_c0.xy, uTexDom_Stage2_c2_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c2_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c2_c0.y);
        if (err > uDecalParams_Stage2_c2_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c2_c0.z < 1.0) {
            err = 0.0;
        }
        temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[3] = temp3.w;
    vec4 temp4;
    {
        vec2 origCoord = coord;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c2_c0.xy, uTexDom_Stage2_c2_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c2_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c2_c0.y);
        if (err > uDecalParams_Stage2_c2_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c2_c0.z < 1.0) {
            err = 0.0;
        }
        temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[4] = temp4.w;
    vec4 temp5;
    {
        vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage2_c2_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c2_c0.xy, uTexDom_Stage2_c2_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c2_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c2_c0.y);
        if (err > uDecalParams_Stage2_c2_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c2_c0.z < 1.0) {
            err = 0.0;
        }
        temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[5] = temp5.w;
    vec4 temp6;
    {
        vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage2_c2_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c2_c0.xy, uTexDom_Stage2_c2_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c2_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c2_c0.y);
        if (err > uDecalParams_Stage2_c2_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c2_c0.z < 1.0) {
            err = 0.0;
        }
        temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[6] = temp6.w;
    vec4 temp7;
    {
        vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage2_c2_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c2_c0.xy, uTexDom_Stage2_c2_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c2_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c2_c0.y);
        if (err > uDecalParams_Stage2_c2_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c2_c0.z < 1.0) {
            err = 0.0;
        }
        temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[7] = temp7.w;
    vec4 temp8;
    {
        vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage2_c2_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c2_c0.xy, uTexDom_Stage2_c2_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c2_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c2_c0.y);
        if (err > uDecalParams_Stage2_c2_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c2_c0.z < 1.0) {
            err = 0.0;
        }
        temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[8] = temp8.w;
    vec3 surfaceToLight = uLightDirection_Stage2_c2_c0;
    _output = light_Stage2_c2_c0(normal_Stage2_c2_c0(m, uSurfaceScale_Stage2_c2_c0), surfaceToLight, uLightColor_Stage2_c2_c0);
    _output *= _input;
    return _output;
}
float perlinnoise_Stage4_c3_c0(float chanCoord, vec2 noiseVec, vec2 stitchData) {
    vec4 floorVal;
    floorVal.xy = floor(noiseVec);
    floorVal.zw = floorVal.xy + vec2(1.0);
    vec2 fractVal = fract(noiseVec);
    vec2 noiseSmooth = (fractVal * fractVal) * (vec2(3.0) - vec2(2.0) * fractVal);
    if (floorVal.x >= stitchData.x) {
        floorVal.x -= stitchData.x;
    }
    if (floorVal.y >= stitchData.y) {
        floorVal.y -= stitchData.y;
    }
    if (floorVal.z >= stitchData.x) {
        floorVal.z -= stitchData.x;
    }
    if (floorVal.w >= stitchData.y) {
        floorVal.w -= stitchData.y;
    }
    floorVal = fract(floor(mod(floorVal, 256.0)) / vec4(256.0));
    vec2 latticeIdx;
    latticeIdx.x = texture(uTextureSampler_0_Stage4, vec2(floorVal.x, 0.5)).x;
    latticeIdx.y = texture(uTextureSampler_0_Stage4, vec2(floorVal.z, 0.5)).x;
    vec4 bcoords = fract(latticeIdx.xyxy + floorVal.yyww);
    vec2 uv;
    vec4 lattice = texture(uTextureSampler_1_Stage4, vec2(bcoords.x, chanCoord)).zyxw;
    uv.x = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    fractVal.x -= 1.0;
    lattice = texture(uTextureSampler_1_Stage4, vec2(bcoords.y, chanCoord)).zyxw;
    uv.y = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    vec2 ab;
    ab.x = mix(uv.x, uv.y, noiseSmooth.x);
    fractVal.y -= 1.0;
    lattice = texture(uTextureSampler_1_Stage4, vec2(bcoords.w, chanCoord)).zyxw;
    uv.y = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    fractVal.x += 1.0;
    lattice = texture(uTextureSampler_1_Stage4, vec2(bcoords.z, chanCoord)).zyxw;
    uv.x = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    ab.y = mix(uv.x, uv.y, noiseSmooth.x);
    return mix(ab.x, ab.y, noiseSmooth.y);
}
vec4 PerlinNoise_Stage4_c3_c0(vec4 _input) {
    vec4 _output;
    vec2 noiseVec = floor(vTransformedCoords_2_Stage0) * ubaseFrequency_Stage4_c3_c0;
    _output = vec4(0.0);
    vec2 stitchData = ustitchData_Stage4_c3_c0;
    float ratio = 1.0;
    for (int octave = 0;octave < 6; ++octave) {
        _output += vec4(perlinnoise_Stage4_c3_c0(0.125, noiseVec, stitchData), perlinnoise_Stage4_c3_c0(0.375, noiseVec, stitchData), perlinnoise_Stage4_c3_c0(0.625, noiseVec, stitchData), perlinnoise_Stage4_c3_c0(0.875, noiseVec, stitchData)) * ratio;
        noiseVec *= vec2(2.0);
        ratio *= 0.5;
        stitchData *= vec2(2.0);
    }
    _output = _output * vec4(0.5) + vec4(0.5);
    _output = clamp(_output, 0.0, 1.0);
    _output = vec4(_output.xyz * _output.www, _output.w);
    return _output;
}
float perlinnoise_Stage5_c4_c0(float chanCoord, vec2 noiseVec, vec2 stitchData) {
    vec4 floorVal;
    floorVal.xy = floor(noiseVec);
    floorVal.zw = floorVal.xy + vec2(1.0);
    vec2 fractVal = fract(noiseVec);
    vec2 noiseSmooth = (fractVal * fractVal) * (vec2(3.0) - vec2(2.0) * fractVal);
    if (floorVal.x >= stitchData.x) {
        floorVal.x -= stitchData.x;
    }
    if (floorVal.y >= stitchData.y) {
        floorVal.y -= stitchData.y;
    }
    if (floorVal.z >= stitchData.x) {
        floorVal.z -= stitchData.x;
    }
    if (floorVal.w >= stitchData.y) {
        floorVal.w -= stitchData.y;
    }
    floorVal = fract(floor(mod(floorVal, 256.0)) / vec4(256.0));
    vec2 latticeIdx;
    latticeIdx.x = texture(uTextureSampler_0_Stage5, vec2(floorVal.x, 0.5)).x;
    latticeIdx.y = texture(uTextureSampler_0_Stage5, vec2(floorVal.z, 0.5)).x;
    vec4 bcoords = fract(latticeIdx.xyxy + floorVal.yyww);
    vec2 uv;
    vec4 lattice = texture(uTextureSampler_1_Stage5, vec2(bcoords.x, chanCoord)).zyxw;
    uv.x = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    fractVal.x -= 1.0;
    lattice = texture(uTextureSampler_1_Stage5, vec2(bcoords.y, chanCoord)).zyxw;
    uv.y = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    vec2 ab;
    ab.x = mix(uv.x, uv.y, noiseSmooth.x);
    fractVal.y -= 1.0;
    lattice = texture(uTextureSampler_1_Stage5, vec2(bcoords.w, chanCoord)).zyxw;
    uv.y = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    fractVal.x += 1.0;
    lattice = texture(uTextureSampler_1_Stage5, vec2(bcoords.z, chanCoord)).zyxw;
    uv.x = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    ab.y = mix(uv.x, uv.y, noiseSmooth.x);
    return mix(ab.x, ab.y, noiseSmooth.y);
}
vec4 PerlinNoise_Stage5_c4_c0(vec4 _input) {
    vec4 _output;
    vec2 vTransformedCoords_3_Stage0_ensure2D = vTransformedCoords_3_Stage0.xy / vTransformedCoords_3_Stage0.z;
    vec2 noiseVec = floor(vTransformedCoords_3_Stage0_ensure2D) * ubaseFrequency_Stage5_c4_c0;
    _output = vec4(0.0);
    vec2 stitchData = ustitchData_Stage5_c4_c0;
    float ratio = 1.0;
    for (int octave = 0;octave < 9; ++octave) {
        _output += vec4(perlinnoise_Stage5_c4_c0(0.125, noiseVec, stitchData), perlinnoise_Stage5_c4_c0(0.375, noiseVec, stitchData), perlinnoise_Stage5_c4_c0(0.625, noiseVec, stitchData), perlinnoise_Stage5_c4_c0(0.875, noiseVec, stitchData)) * ratio;
        noiseVec *= vec2(2.0);
        ratio *= 0.5;
        stitchData *= vec2(2.0);
    }
    _output = _output * vec4(0.5) + vec4(0.5);
    _output = clamp(_output, 0.0, 1.0);
    _output = vec4(_output.xyz * _output.www, _output.w);
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        vec4 circleEdge;
        circleEdge = vinCircleEdge_Stage0;
        outputColor_Stage0 = vinColor_Stage0;
        float d = length(circleEdge.xy);
        float distanceToOuterEdge = circleEdge.z * (1.0 - d);
        float edgeAlpha = clamp(distanceToOuterEdge, 0.0, 1.0);
        float distanceToInnerEdge = circleEdge.z * (d - circleEdge.w);
        float innerAlpha = clamp(distanceToInnerEdge, 0.0, 1.0);
        edgeAlpha *= innerAlpha;
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        output_Stage1 = blend_dst_in(outputColor_Stage0, TiledGradientEffect_Stage1_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage2;
    {
        vec4 inputColor = vec4(output_Stage1.xyz, 1.0);
        output_Stage2 = blend_dst_in(ColorMatrixFragmentProcessor_Stage2_c1_c0(inputColor), SpecularLighting_Stage2_c2_c0(inputColor));
        output_Stage2 *= output_Stage1.w;
    }
    vec4 output_Stage3;
    {
        float xCoverage, yCoverage;
        {
            float x, y;
            {
                x = max(urectH_Stage3.x - gl_FragCoord.x, gl_FragCoord.x - urectH_Stage3.z);
                y = max(urectH_Stage3.y - gl_FragCoord.y, gl_FragCoord.y - urectH_Stage3.w);
            }
            xCoverage = texture(uTextureSampler_0_Stage3, vec2(x * uinvSixSigma_Stage3, 0.5)).w;
            yCoverage = texture(uTextureSampler_0_Stage3, vec2(y * uinvSixSigma_Stage3, 0.5)).w;
            output_Stage3 = (outputCoverage_Stage0 * xCoverage) * yCoverage;
        }
        output_Stage3 = (outputCoverage_Stage0 * xCoverage) * yCoverage;
    }
    vec4 output_Stage4;
    {
        output_Stage4 = blend_dst_in(output_Stage3, PerlinNoise_Stage4_c3_c0(vec4(1.0)));
    }
    vec4 output_Stage5;
    {
        output_Stage5 = blend_dst_in(output_Stage4, PerlinNoise_Stage5_c4_c0(vec4(1.0)));
    }
    {
        sk_FragColor = output_Stage5 * output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec4 inCircleEdge;
noperspective out vec4 vinCircleEdge_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec3 vTransformedCoords_3_Stage0;
void main() {
    vinCircleEdge_Stage0 = inCircleEdge;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_3_Stage0 = uCoordTransformMatrix_3_Stage0 * vec3(inPosition, 1.0);
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

