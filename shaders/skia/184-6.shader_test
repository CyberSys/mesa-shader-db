[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 ucolor_Stage1_c0_c0;
uniform vec4 urectUniform_Stage2;
uniform vec4 ucolor_Stage3;
uniform vec2 uDstTextureUpperLeft_Stage5;
uniform vec2 uDstTextureCoordScale_Stage5;
uniform sampler2D uDstTextureSampler_Stage5;
noperspective in vec4 vcolor_Stage0;
noperspective in float vinCoverage_Stage0;
vec4 ConstColorProcessor_Stage1_c0_c0(vec4 _input, vec2 _coords) {
    vec4 _output;
    {
        _output = _input * ucolor_Stage1_c0_c0;
    }
    return _output;
}
vec4 blend_dst_atop(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + src.w * dst;
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
        float alpha = 1.0;
        alpha = vinCoverage_Stage0;
        outputCoverage_Stage0 = vec4(alpha);
    }
    {
        ConstColorProcessor_Stage1_c0_c0(outputColor_Stage0, gl_FragCoord.xy);
    }
    {
        {
            float xSub, ySub;
            xSub = min(gl_FragCoord.x - urectUniform_Stage2.x, 0.0);
            xSub += min(urectUniform_Stage2.z - gl_FragCoord.x, 0.0);
            ySub = min(gl_FragCoord.y - urectUniform_Stage2.y, 0.0);
            ySub += min(urectUniform_Stage2.w - gl_FragCoord.y, 0.0);
        }
    }
    vec4 output_Stage3;
    {
        {
            output_Stage3 = ucolor_Stage3;
        }
    }
    vec4 output_Stage4;
    {
        output_Stage4 = output_Stage3;
    }
    {
        if (all(lessThanEqual(outputCoverage_Stage0.xyz, vec3(0.0)))) {
            discard;
        }
        vec2 _dstTexCoord = (gl_FragCoord.xy - uDstTextureUpperLeft_Stage5) * uDstTextureCoordScale_Stage5;
        vec4 _dstColor = texture(uDstTextureSampler_Stage5, _dstTexCoord);
        sk_FragColor = blend_dst_atop(output_Stage4, _dstColor);
        sk_FragColor = outputCoverage_Stage0 * sk_FragColor + (vec4(1.0) - outputCoverage_Stage0) * _dstColor;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
in vec2 inPosition;
in vec4 inColor;
in float inCoverage;
noperspective out vec4 vcolor_Stage0;
noperspective out float vinCoverage_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = inPosition;
    vinCoverage_Stage0 = inCoverage;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

