[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform vec3 uedges_Stage1[8];
uniform vec2 uImageIncrement_Stage2;
uniform vec4 uKernel_Stage2[4];
uniform vec2 uKernelOffset_Stage2;
uniform float uGain_Stage2;
uniform float uBias_Stage2;
uniform vec3 uedges_Stage3[6];
uniform sampler2D uTextureSampler_0_Stage2;
noperspective in vec3 vDashParams_Stage0;
noperspective in vec4 vRectParams_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
        float xShifted = vDashParams_Stage0.x - floor(vDashParams_Stage0.x / vDashParams_Stage0.z) * vDashParams_Stage0.z;
        vec2 fragPosShifted = vec2(xShifted, vDashParams_Stage0.y);
        float xSub, ySub;
        xSub = min(fragPosShifted.x - vRectParams_Stage0.x, 0.0);
        xSub += min(vRectParams_Stage0.z - fragPosShifted.x, 0.0);
        ySub = min(fragPosShifted.y - vRectParams_Stage0.y, 0.0);
        ySub += min(vRectParams_Stage0.w - fragPosShifted.y, 0.0);
        float alpha = (1.0 + max(xSub, -1.0)) * (1.0 + max(ySub, -1.0));
        outputCoverage_Stage0 = vec4(alpha);
    }
    vec4 output_Stage1;
    {
        float alpha = 1.0;
        float edge;
        edge = dot(uedges_Stage1[0], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
        edge = clamp(edge, 0.0, 1.0);
        alpha *= edge;
        edge = dot(uedges_Stage1[1], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
        edge = clamp(edge, 0.0, 1.0);
        alpha *= edge;
        edge = dot(uedges_Stage1[2], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
        edge = clamp(edge, 0.0, 1.0);
        alpha *= edge;
        edge = dot(uedges_Stage1[3], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
        edge = clamp(edge, 0.0, 1.0);
        alpha *= edge;
        edge = dot(uedges_Stage1[4], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
        edge = clamp(edge, 0.0, 1.0);
        alpha *= edge;
        edge = dot(uedges_Stage1[5], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
        edge = clamp(edge, 0.0, 1.0);
        alpha *= edge;
        edge = dot(uedges_Stage1[6], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
        edge = clamp(edge, 0.0, 1.0);
        alpha *= edge;
        edge = dot(uedges_Stage1[7], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
        edge = clamp(edge, 0.0, 1.0);
        alpha *= edge;
        alpha = 1.0 - alpha;
        output_Stage1 = outputCoverage_Stage0 * alpha;
    }
    vec4 output_Stage2;
    {
        vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_0_Stage0 - uKernelOffset_Stage2 * uImageIncrement_Stage2;
        vec4 c;
        {
            float k = uKernel_Stage2[0].x;
            {
                vec2 origCoord = coord;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[0].y;
            {
                vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[0].z;
            {
                vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[0].w;
            {
                vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[1].x;
            {
                vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[1].y;
            {
                vec2 origCoord = coord + vec2(5.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[1].z;
            {
                vec2 origCoord = coord + vec2(6.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[1].w;
            {
                vec2 origCoord = coord + vec2(7.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[2].x;
            {
                vec2 origCoord = coord + vec2(8.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[2].y;
            {
                vec2 origCoord = coord + vec2(9.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[2].z;
            {
                vec2 origCoord = coord + vec2(10.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[2].w;
            {
                vec2 origCoord = coord + vec2(11.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[3].x;
            {
                vec2 origCoord = coord + vec2(12.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[3].y;
            {
                vec2 origCoord = coord + vec2(13.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[3].z;
            {
                vec2 origCoord = coord + vec2(14.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        output_Stage2 = sum * uGain_Stage2 + uBias_Stage2;
        output_Stage2.w = clamp(output_Stage2.w, 0.0, 1.0);
        output_Stage2.xyz = clamp(output_Stage2.xyz, 0.0, output_Stage2.w);
        output_Stage2 *= output_Stage1;
    }
    vec4 output_Stage3;
    {
        float alpha = 1.0;
        float edge;
        edge = dot(uedges_Stage3[0], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
        edge = clamp(edge, 0.0, 1.0);
        alpha *= edge;
        edge = dot(uedges_Stage3[1], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
        edge = clamp(edge, 0.0, 1.0);
        alpha *= edge;
        edge = dot(uedges_Stage3[2], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
        edge = clamp(edge, 0.0, 1.0);
        alpha *= edge;
        edge = dot(uedges_Stage3[3], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
        edge = clamp(edge, 0.0, 1.0);
        alpha *= edge;
        edge = dot(uedges_Stage3[4], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
        edge = clamp(edge, 0.0, 1.0);
        alpha *= edge;
        edge = dot(uedges_Stage3[5], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
        edge = clamp(edge, 0.0, 1.0);
        alpha *= edge;
        output_Stage3 = output_Stage2 * alpha;
    }
    {
        sk_FragColor = outputColor_Stage0 * output_Stage3;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec3 inDashParams;
in vec4 inRect;
noperspective out vec3 vDashParams_Stage0;
noperspective out vec4 vRectParams_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vDashParams_Stage0 = inDashParams;
    vRectParams_Stage0 = inRect;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

