[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uCoordTransformMatrix_5_Stage0;
uniform vec2 uImageIncrement_Stage2_c0_c0;
uniform vec4 uKernel_Stage2_c0_c0[3];
uniform vec2 uKernelOffset_Stage2_c0_c0;
uniform float uGain_Stage2_c0_c0;
uniform float uBias_Stage2_c0_c0;
uniform vec4 uTexDom_Stage2_c0_c0;
uniform float uPixelSize_Stage2_c1_c0;
uniform vec2 uRange_Stage2_c1_c0;
uniform vec4 uinnerRect_Stage3_c3_c0;
uniform vec4 uinvRadiiLTRB_Stage3_c3_c0;
uniform vec2 uScale_Stage4;
uniform vec4 uTexDom_Stage4;
uniform vec3 uDecalParams_Stage4;
uniform sampler2D uTextureSampler_0_Stage2;
uniform sampler2D uTextureSampler_1_Stage2;
uniform sampler2D uTextureSampler_0_Stage4;
uniform sampler2D uTextureSampler_1_Stage4;
uniform sampler2D uTextureSampler_0_Stage5;
noperspective in vec4 vcolor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vTransformedCoords_3_Stage0;
noperspective in vec2 vTransformedCoords_4_Stage0;
noperspective in float vinCoverage_Stage0;
vec4 MatrixConvolution_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_0_Stage0 - uKernelOffset_Stage2_c0_c0 * uImageIncrement_Stage2_c0_c0;
    vec4 c;
    {
        float k = uKernel_Stage2_c0_c0[0].x;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage2_c0_c0[0].y;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage2_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage2_c0_c0[0].z;
        {
            vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage2_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage2_c0_c0[0].w;
        {
            vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage2_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage2_c0_c0[1].x;
        {
            vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage2_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage2_c0_c0[1].y;
        {
            vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage2_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage2_c0_c0[1].z;
        {
            vec2 origCoord = coord + uImageIncrement_Stage2_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage2_c0_c0[1].w;
        {
            vec2 origCoord = coord + vec2(2.0, 1.0) * uImageIncrement_Stage2_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage2_c0_c0[2].x;
        {
            vec2 origCoord = coord + vec2(3.0, 1.0) * uImageIncrement_Stage2_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage2_c0_c0[2].y;
        {
            vec2 origCoord = coord + vec2(4.0, 1.0) * uImageIncrement_Stage2_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            c = textureColor;
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        vec2 origCoord = vTransformedCoords_0_Stage0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        c = textureColor;
    }
    _output.w = c.w;
    _output.xyz = clamp(sum.xyz * uGain_Stage2_c0_c0 + uBias_Stage2_c0_c0, 0.0, 1.0);
    _output.xyz *= _output.w;
    _output *= _input;
    return _output;
}
vec4 Morphology_Stage2_c1_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(1.0, 1.0, 1.0, 1.0);
    vec2 coord = vTransformedCoords_1_Stage0;
    coord.x -= 9.0 * uPixelSize_Stage2_c1_c0;
    for (int i = 0;i < 19; i++) {
        _output = min(_output, texture(uTextureSampler_1_Stage2, coord));
        coord.x += uPixelSize_Stage2_c1_c0;
    }
    _output *= _input;
    return _output;
}
vec4 ClampFragmentProcessor_Stage3_c2_c0(vec4 _input) {
    vec4 _output;
    {
        float alpha = clamp(_input.w, 0.0, 1.0);
        _output = vec4(clamp(_input.xyz, 0.0, alpha), alpha);
    }
    return _output;
}
vec4 EllipticalRRect_Stage3_c3_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage3_c3_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage3_c3_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    vec2 Z = max(max(dxy0 * uinvRadiiLTRB_Stage3_c3_c0.xy, dxy1 * uinvRadiiLTRB_Stage3_c3_c0.zw), 0.0);
    float implicit = dot(Z, dxy) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    grad_dot = max(grad_dot, 9.9999997473787516e-05);
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha = clamp(0.5 - approx_dist, 0.0, 1.0);
    _output = _input * alpha;
    return _output;
}
vec4 TextureEffect_Stage5_c4_c0(vec4 _input, vec2 _coords) {
    _coords = _coords * uCoordTransformMatrix_5_Stage0.xz + uCoordTransformMatrix_5_Stage0.yw;
    vec4 _output;
    _output = texture(uTextureSampler_0_Stage5, _coords) * _input;
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
vec4 blend_screen(vec4 src, vec4 dst) {
    return src + (1.0 - src) * dst;
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
        float alpha = 1.0;
        alpha = vinCoverage_Stage0;
        outputCoverage_Stage0 = vec4(alpha);
    }
    vec4 output_Stage1;
    {
        output_Stage1 = floor(outputColor_Stage0 * 255.0 + 0.5) / 255.0;
        {
            output_Stage1.xyz = floor((output_Stage1.xyz * output_Stage1.w) * 255.0 + 0.5) / 255.0;
        }
    }
    vec4 output_Stage2;
    {
        vec4 inputColor = vec4(output_Stage1.xyz, 1.0);
        output_Stage2 = blend_dst_in(MatrixConvolution_Stage2_c0_c0(inputColor), Morphology_Stage2_c1_c0(inputColor));
        output_Stage2 *= output_Stage1.w;
    }
    vec4 output_Stage3;
    {
        vec4 inputColor = vec4(outputCoverage_Stage0.xyz, 1.0);
        output_Stage3 = blend_screen(ClampFragmentProcessor_Stage3_c2_c0(inputColor), EllipticalRRect_Stage3_c3_c0(inputColor));
        output_Stage3 *= outputCoverage_Stage0.w;
    }
    vec4 output_Stage4;
    {
        vec4 dColor = texture(uTextureSampler_0_Stage4, vTransformedCoords_2_Stage0);
        dColor.xyz = dColor.w < 9.9999999747524271e-07 ? vec3(0.0) : clamp(dColor.xyz / dColor.w, 0.0, 1.0);
        vec2 cCoords = vTransformedCoords_3_Stage0 + uScale_Stage4 * (dColor.zw - vec2(0.5));
        {
            vec2 origCoord = cCoords;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
            if (err > uDecalParams_Stage4.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4.z < 1.0) {
                err = 0.0;
            }
            output_Stage4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
    }
    vec4 output_Stage5;
    {
        float coord = vTransformedCoords_4_Stage0.x - 0.5;
        float f = fract(coord);
        coord += 0.5 - f;
        float f2 = f * f;
        vec4 w = mat4(0.055555555555555552, 0.88888888888888884, 0.055555555555555552, 0.0, -0.5, 0.0, 0.5, 0.0, 0.83333333333333337, -2.0, 1.5, -0.33333333333333331, -0.3888888888888889, 1.1666666666666667, -1.1666666666666667, 0.3888888888888889) * vec4(1.0, f, f2, f2 * f);
        vec4 c[4];
        c[0] = TextureEffect_Stage5_c4_c0(vec4(1.0), vec2(coord + -1.0, vTransformedCoords_4_Stage0.y));
        c[1] = TextureEffect_Stage5_c4_c0(vec4(1.0), vec2(coord, vTransformedCoords_4_Stage0.y));
        c[2] = TextureEffect_Stage5_c4_c0(vec4(1.0), vec2(coord + 1.0, vTransformedCoords_4_Stage0.y));
        c[3] = TextureEffect_Stage5_c4_c0(vec4(1.0), vec2(coord + 2.0, vTransformedCoords_4_Stage0.y));
        vec4 bicubicColor = ((c[0] * w.x + c[1] * w.y) + c[2] * w.z) + c[3] * w.w;
        bicubicColor.xyz = max(vec3(0.0), min(bicubicColor.xyz, bicubicColor.www));
        output_Stage5 = bicubicColor * output_Stage4;
    }
    {
        sk_FragColor = output_Stage5 * output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
uniform mat3 uCoordTransformMatrix_4_Stage0;
in vec2 inPosition;
in vec4 inColor;
in float inCoverage;
noperspective out vec4 vcolor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vTransformedCoords_3_Stage0;
noperspective out vec2 vTransformedCoords_4_Stage0;
noperspective out float vinCoverage_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_4_Stage0 = (uCoordTransformMatrix_4_Stage0 * vec3(inPosition, 1.0)).xy;
    vinCoverage_Stage0 = inCoverage;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

