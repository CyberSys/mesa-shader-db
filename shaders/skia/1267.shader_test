[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec2 uScale_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec4 uTexDom_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec3 uDecalParams_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec2 uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec4 uKernel_Stage1_c0_c0_c0_c0_c1_c0[6];
uniform vec4 uinnerRect_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec4 uinvRadiiLTRB_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec4 urectH_Stage1_c0_c0_c1_c0_c1_c0;
uniform float uinvSixSigma_Stage1_c0_c0_c1_c0_c1_c0;
uniform vec2 uImageIncrement_Stage1_c1_c0;
uniform float uSurfaceScale_Stage1_c1_c0;
uniform vec3 uLightColor_Stage1_c1_c0;
uniform float uKS_Stage1_c1_c0;
uniform float uShininess_Stage1_c1_c0;
uniform vec4 uTexDom_Stage1_c1_c0;
uniform vec3 uDecalParams_Stage1_c1_c0;
uniform vec3 uLightLocation_Stage1_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
uniform sampler2D uTextureSampler_3_Stage1;
uniform sampler2D uTextureSampler_4_Stage1;
in vec4 vcolor_Stage0;
in vec2 vTransformedCoords_0_Stage0;
in vec2 vTransformedCoords_1_Stage0;
in vec2 vTransformedCoords_2_Stage0;
in vec2 vTransformedCoords_3_Stage0;
vec4 DisplacementMap_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 dColor = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
    dColor.xyz = dColor.w < 9.9999999747524271e-07 ? vec3(0.0) : clamp(dColor.xyz / dColor.w, 0.0, 1.0);
    vec2 cCoords = vTransformedCoords_1_Stage0 + uScale_Stage1_c0_c0_c0_c0_c0_c0 * (dColor.yw - vec2(0.5));
    {
        vec2 origCoord = cCoords;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        _output = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    return _output;
}
vec4 GaussianConvolution_Stage1_c0_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_2_Stage0 - 10.0 * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    vec2 coordSampled = vec2(0.0, 0.0);
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[0].x;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[0].y;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[0].z;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[0].w;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[1].x;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[1].y;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[1].z;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[1].w;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[2].x;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[2].y;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[2].z;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[2].w;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[3].x;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[3].y;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[3].z;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[3].w;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[4].x;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[4].y;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[4].z;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[4].w;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[5].x;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    _output *= _input;
    return _output;
}
vec4 blend_xor(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + (1.0 - src.w) * dst;
}
vec4 ComposeTwo_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_xor(DisplacementMap_Stage1_c0_c0_c0_c0_c0_c0(inputColor), GaussianConvolution_Stage1_c0_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 EllipticalRRect_Stage1_c0_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c0_c0_c1_c0_c0_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c0_c0_c1_c0_c0_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    vec2 Z = max(max(dxy0 * uinvRadiiLTRB_Stage1_c0_c0_c1_c0_c0_c0.xy, dxy1 * uinvRadiiLTRB_Stage1_c0_c0_c1_c0_c0_c0.zw), 0.0);
    float implicit = dot(Z, dxy) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    grad_dot = max(grad_dot, 9.9999997473787516e-05);
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha = clamp(0.5 + approx_dist, 0.0, 1.0);
    _output = _input * alpha;
    return _output;
}
vec4 RectBlurEffect_Stage1_c0_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float xCoverage, yCoverage;
    {
        float x, y;
        {
            x = max(urectH_Stage1_c0_c0_c1_c0_c1_c0.x - gl_FragCoord.x, gl_FragCoord.x - urectH_Stage1_c0_c0_c1_c0_c1_c0.z);
            y = max(urectH_Stage1_c0_c0_c1_c0_c1_c0.y - gl_FragCoord.y, gl_FragCoord.y - urectH_Stage1_c0_c0_c1_c0_c1_c0.w);
        }
        xCoverage = texture(uTextureSampler_3_Stage1, vec2(x * uinvSixSigma_Stage1_c0_c0_c1_c0_c1_c0, 0.5)).w;
        yCoverage = texture(uTextureSampler_3_Stage1, vec2(y * uinvSixSigma_Stage1_c0_c0_c1_c0_c1_c0, 0.5)).w;
        _output = (_input * xCoverage) * yCoverage;
    }
    _output = (_input * xCoverage) * yCoverage;
    return _output;
}
float _blend_color_saturation(vec3 color) {
    return max(max(color.x, color.y), color.z) - min(min(color.x, color.y), color.z);
}
vec3 _blend_set_color_saturation_helper(vec3 minMidMax, float sat) {
    if (minMidMax.x < minMidMax.z) {
        return vec3(0.0, (sat * (minMidMax.y - minMidMax.x)) / (minMidMax.z - minMidMax.x), sat);
    }
    return vec3(0.0);
}
vec3 _blend_set_color_saturation(vec3 hueLumColor, vec3 satColor) {
    float sat = _blend_color_saturation(satColor);
    if (hueLumColor.x <= hueLumColor.y) {
        if (hueLumColor.y <= hueLumColor.z) {
            hueLumColor.xyz = _blend_set_color_saturation_helper(hueLumColor, sat);
        } else if (hueLumColor.x <= hueLumColor.z) {
            hueLumColor.xzy = _blend_set_color_saturation_helper(hueLumColor.xzy, sat);
        } else {
            hueLumColor.zxy = _blend_set_color_saturation_helper(hueLumColor.zxy, sat);
        }
    } else if (hueLumColor.x <= hueLumColor.z) {
        hueLumColor.yxz = _blend_set_color_saturation_helper(hueLumColor.yxz, sat);
    } else if (hueLumColor.y <= hueLumColor.z) {
        hueLumColor.yzx = _blend_set_color_saturation_helper(hueLumColor.yzx, sat);
    } else {
        hueLumColor.zyx = _blend_set_color_saturation_helper(hueLumColor.zyx, sat);
    }
    return hueLumColor;
}
float _blend_color_luminance(vec3 color) {
    return dot(vec3(0.30000001192092896, 0.5899999737739563, 0.10999999940395355), color);
}
vec3 _blend_set_color_luminance(vec3 hueSatColor, float alpha, vec3 lumColor) {
    float lum = _blend_color_luminance(lumColor);
    vec3 result = (lum - _blend_color_luminance(hueSatColor)) + hueSatColor;
    float minComp = min(min(result.x, result.y), result.z);
    float maxComp = max(max(result.x, result.y), result.z);
    if (minComp < 0.0 && lum != minComp) {
        result = lum + ((result - lum) * lum) / (lum - minComp);
    }
    if (maxComp > alpha && maxComp != lum) {
        return lum + ((result - lum) * (alpha - lum)) / (maxComp - lum);
    }
    return result;
}
vec4 blend_saturation(vec4 src, vec4 dst) {
    float alpha = dst.w * src.w;
    vec3 sda = src.xyz * dst.w;
    vec3 dsa = dst.xyz * src.w;
    return vec4((((_blend_set_color_luminance(_blend_set_color_saturation(dsa, sda), alpha, dsa) + dst.xyz) - dsa) + src.xyz) - sda, (src.w + dst.w) - alpha);
}
vec4 ComposeTwo_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_saturation(EllipticalRRect_Stage1_c0_c0_c1_c0_c0_c0(inputColor), RectBlurEffect_Stage1_c0_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_multiply(vec4 src, vec4 dst) {
    return vec4(((1.0 - src.w) * dst.xyz + (1.0 - dst.w) * src.xyz) + src.xyz * dst.xyz, src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_multiply(ComposeTwo_Stage1_c0_c0_c0_c0(inputColor), ComposeTwo_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 light_Stage1_c1_c0(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    vec3 halfDir = normalize(surfaceToLight + vec3(0.0, 0.0, 1.0));
    float colorScale = uKS_Stage1_c1_c0 * pow(dot(normal, halfDir), uShininess_Stage1_c1_c0);
    vec3 color = lightColor * clamp(colorScale, 0.0, 1.0);
    return vec4(color, max(max(color.x, color.y), color.z));
}
float sobel_Stage1_c1_c0(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage1_c1_c0(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage1_c1_c0(float m[9], float surfaceScale) {
    return pointToNormal_Stage1_c1_c0(sobel_Stage1_c1_c0(m[0], m[2], m[3], m[5], m[6], m[8], 0.25), sobel_Stage1_c1_c0(m[0], m[6], m[1], m[7], m[2], m[8], 0.25), surfaceScale);
}
vec4 SpecularLighting_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_3_Stage0;
    float m[9];
    vec4 temp0;
    {
        vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage1_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[0] = temp0.w;
    vec4 temp1;
    {
        vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage1_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[1] = temp1.w;
    vec4 temp2;
    {
        vec2 origCoord = coord + uImageIncrement_Stage1_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[2] = temp2.w;
    vec4 temp3;
    {
        vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage1_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[3] = temp3.w;
    vec4 temp4;
    {
        vec2 origCoord = coord;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[4] = temp4.w;
    vec4 temp5;
    {
        vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[5] = temp5.w;
    vec4 temp6;
    {
        vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage1_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[6] = temp6.w;
    vec4 temp7;
    {
        vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage1_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[7] = temp7.w;
    vec4 temp8;
    {
        vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage1_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[8] = temp8.w;
    vec3 surfaceToLight = normalize(uLightLocation_Stage1_c1_c0 - vec3(gl_FragCoord.xy, uSurfaceScale_Stage1_c1_c0 * m[4]));
    _output = light_Stage1_c1_c0(normal_Stage1_c1_c0(m, uSurfaceScale_Stage1_c1_c0), surfaceToLight, uLightColor_Stage1_c1_c0);
    _output *= _input;
    return _output;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_xor(ComposeTwo_Stage1_c0_c0(inputColor), SpecularLighting_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform float uSrcTF_Stage0[7];
uniform mat3 uColorXform_Stage0;
uniform float uDstTF_Stage0[7];
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
in vec2 position;
in vec4 inColor;
in vec2 inLocalCoord;
out vec4 vcolor_Stage0;
out vec2 vTransformedCoords_0_Stage0;
out vec2 vTransformedCoords_1_Stage0;
out vec2 vTransformedCoords_2_Stage0;
out vec2 vTransformedCoords_3_Stage0;
float src_tf_Stage0(float x) {
    float G = uSrcTF_Stage0[0];
    float A = uSrcTF_Stage0[1];
    float B = uSrcTF_Stage0[2];
    float C = uSrcTF_Stage0[3];
    float D = uSrcTF_Stage0[4];
    float E = uSrcTF_Stage0[5];
    float F = uSrcTF_Stage0[6];
    float s = sign(x);
    x = abs(x);
    x = x < D ? C * x + F : pow(A * x + B, G) + E;
    return s * x;
}
float dst_tf_Stage0(float x) {
    float G = uDstTF_Stage0[0];
    float A = uDstTF_Stage0[1];
    float B = uDstTF_Stage0[2];
    float C = uDstTF_Stage0[3];
    float D = uDstTF_Stage0[4];
    float E = uDstTF_Stage0[5];
    float F = uDstTF_Stage0[6];
    float s = sign(x);
    x = abs(x);
    x = x < D ? C * x + F : pow(A * x + B, G) + E;
    return s * x;
}
vec4 gamut_xform_Stage0(vec4 color) {
    color.xyz = uColorXform_Stage0 * color.xyz;
    return color;
}
vec4 color_xform_Stage0(vec4 color) {
    float nonZeroAlpha = max(color.w, 9.9999997473787516e-05);
    color = vec4(color.xyz / nonZeroAlpha, nonZeroAlpha);
    color.x = src_tf_Stage0(color.x);
    color.y = src_tf_Stage0(color.y);
    color.z = src_tf_Stage0(color.z);
    color = gamut_xform_Stage0(color);
    color.x = dst_tf_Stage0(color.x);
    color.y = dst_tf_Stage0(color.y);
    color.z = dst_tf_Stage0(color.z);
    color.xyz *= color.w;
    return color;
}
void main() {
    vec4 color = inColor;
    color = color.zyxw;
    color = color_xform_Stage0(color);
    color = vec4(color.xyz * color.w, color.w);
    vcolor_Stage0 = color;
    vec3 pos3 = uViewM_Stage0 * vec3(position, 1.0);
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    gl_Position = vec4(pos3.x, pos3.y, 0.0, pos3.z);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

