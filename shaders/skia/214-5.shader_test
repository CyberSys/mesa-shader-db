[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec2 uImageIncrement_Stage2;
uniform vec4 uKernel_Stage2[3];
uniform vec2 uKernelOffset_Stage2;
uniform float uGain_Stage2;
uniform float uBias_Stage2;
uniform vec4 uTexDom_Stage2;
uniform vec3 uDecalParams_Stage2;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
void main() {
    vec4 output_Stage1;
    {
        output_Stage1 = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
    }
    vec4 output_Stage2;
    {
        vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_1_Stage0 - uKernelOffset_Stage2 * uImageIncrement_Stage2;
        vec4 c;
        {
            float k = uKernel_Stage2[0].x;
            {
                vec2 origCoord = coord;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[0].y;
            {
                vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[0].z;
            {
                vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[0].w;
            {
                vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[1].x;
            {
                vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[1].y;
            {
                vec2 origCoord = coord + vec2(5.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[1].z;
            {
                vec2 origCoord = coord + vec2(6.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[1].w;
            {
                vec2 origCoord = coord + vec2(7.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[2].x;
            {
                vec2 origCoord = coord + vec2(8.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            vec2 origCoord = vTransformedCoords_1_Stage0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
            if (err > uDecalParams_Stage2.z) {
                err = 1.0;
            } else if (uDecalParams_Stage2.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        output_Stage2.w = c.w;
        output_Stage2.xyz = clamp(sum.xyz * uGain_Stage2 + uBias_Stage2, 0.0, 1.0);
        output_Stage2.xyz *= output_Stage2.w;
        output_Stage2 *= output_Stage1;
    }
    {
        sk_FragColor = output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 position;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(localCoord, 1.0)).xy;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

