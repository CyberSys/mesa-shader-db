[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
uniform vec4 urectUniform_Stage1;
uniform vec4 uleftBorderColor_Stage2_c0_c0;
uniform vec4 urightBorderColor_Stage2_c0_c0;
uniform vec4 uscale0_1_Stage2_c0_c0_c1_c0;
uniform vec4 uscale2_3_Stage2_c0_c0_c1_c0;
uniform vec4 uscale4_5_Stage2_c0_c0_c1_c0;
uniform vec4 uscale6_7_Stage2_c0_c0_c1_c0;
uniform vec4 ubias0_1_Stage2_c0_c0_c1_c0;
uniform vec4 ubias2_3_Stage2_c0_c0_c1_c0;
uniform vec4 ubias4_5_Stage2_c0_c0_c1_c0;
uniform vec4 ubias6_7_Stage2_c0_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage2_c0_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage2_c0_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vtextureCoords_Stage0;
flat in vec4 vtextureDomain_Stage0;
flat in vec4 vcolor_Stage0;
vec4 RadialGradientLayout_Stage2_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float t = length(vTransformedCoords_0_Stage0);
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage2_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.x) {
                scale = uscale0_1_Stage2_c0_c0_c1_c0;
                bias = ubias0_1_Stage2_c0_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage2_c0_c0_c1_c0;
                bias = ubias2_3_Stage2_c0_c0_c1_c0;
            }
        } else {
            if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.z) {
                scale = uscale4_5_Stage2_c0_c0_c1_c0;
                bias = ubias4_5_Stage2_c0_c0_c1_c0;
            } else {
                scale = uscale6_7_Stage2_c0_c0_c1_c0;
                bias = ubias6_7_Stage2_c0_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 ClampedGradientEffect_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = RadialGradientLayout_Stage2_c0_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage2_c0_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage2_c0_c0;
    } else {
        _output = UnrolledBinaryGradientColorizer_Stage2_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    {
        vec2 textureCoords;
        textureCoords = vtextureCoords_Stage0;
        vec4 textureDomain;
        textureDomain = vtextureDomain_Stage0;
        outputColor_Stage0 = vcolor_Stage0;
        outputColor_Stage0 = texture(uTextureSampler_0_Stage0, clamp(textureCoords, textureDomain.xy, textureDomain.zw)) * outputColor_Stage0;
    }
    vec4 output_Stage1;
    {
        float alpha;
        {
            float xSub, ySub;
            xSub = min(gl_FragCoord.x - urectUniform_Stage1.x, 0.0);
            xSub += min(urectUniform_Stage1.z - gl_FragCoord.x, 0.0);
            ySub = min(gl_FragCoord.y - urectUniform_Stage1.y, 0.0);
            ySub += min(urectUniform_Stage1.w - gl_FragCoord.y, 0.0);
            alpha = (1.0 + max(xSub, -1.0)) * (1.0 + max(ySub, -1.0));
        }
        {
            alpha = 1.0 - alpha;
        }
        output_Stage1 = vec4(alpha);
    }
    {
        blend_dst_in(output_Stage1, ClampedGradientEffect_Stage2_c0_c0(vec4(1.0)));
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 position;
in vec2 textureCoords;
in vec4 textureDomain;
in vec4 color;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vtextureCoords_Stage0;
flat out vec4 vtextureDomain_Stage0;
flat out vec4 vcolor_Stage0;
void main() {
    vec2 pos2 = position;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(textureCoords, 1.0)).xy;
    vtextureCoords_Stage0 = textureCoords;
    vtextureDomain_Stage0 = textureDomain;
    vcolor_Stage0 = color;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

