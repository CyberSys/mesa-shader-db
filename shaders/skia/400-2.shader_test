[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uColor_Stage0;
noperspective in vec3 vDashParams_Stage0;
noperspective in vec4 vRectParams_Stage0;
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
        float xShifted = vDashParams_Stage0.x - floor(vDashParams_Stage0.x / vDashParams_Stage0.z) * vDashParams_Stage0.z;
        vec2 fragPosShifted = vec2(xShifted, vDashParams_Stage0.y);
        float xSub, ySub;
        xSub = min(fragPosShifted.x - vRectParams_Stage0.x, 0.0);
        xSub += min(vRectParams_Stage0.z - fragPosShifted.x, 0.0);
        ySub = min(fragPosShifted.y - vRectParams_Stage0.y, 0.0);
        ySub += min(vRectParams_Stage0.w - fragPosShifted.y, 0.0);
        float alpha = (1.0 + max(xSub, -1.0)) * (1.0 + max(ySub, -1.0));
        outputCoverage_Stage0 = vec4(alpha);
    }
    {
        sk_FragColor = outputCoverage_Stage0 * outputColor_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
in vec2 inPosition;
in vec3 inDashParams;
in vec4 inRect;
noperspective out vec3 vDashParams_Stage0;
noperspective out vec4 vRectParams_Stage0;
void main() {
    vDashParams_Stage0 = inDashParams;
    vRectParams_Stage0 = inRect;
    vec2 pos2 = inPosition;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

