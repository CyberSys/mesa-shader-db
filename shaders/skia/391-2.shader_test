[require]
GLSL >= 1.40
GL_KHR_blend_equation_advanced

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uColor_Stage0;
uniform vec4 uinnerRect_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec2 uinvRadiiXY_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec2 uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec2 uBounds_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec4 uKernel_Stage1_c0_c0_c0_c0_c1_c0[1];
uniform float ucornerRadius_Stage1_c0_c0_c1_c0;
uniform vec4 uproxyRect_Stage1_c0_c0_c1_c0;
uniform float ublurRadius_Stage1_c0_c0_c1_c0;
uniform vec4 uellipse_Stage1_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
noperspective in vec2 vTransformedCoords_0_Stage0;
vec4 EllipticalRRect_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c0_c0_c0_c0_c0_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c0_c0_c0_c0_c0_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    vec2 Z = dxy * uinvRadiiXY_Stage1_c0_c0_c0_c0_c0_c0;
    float implicit = dot(Z, dxy) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    grad_dot = max(grad_dot, 9.9999997473787516e-05);
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha = clamp(0.5 + approx_dist, 0.0, 1.0);
    _output = _input * alpha;
    return _output;
}
vec4 GaussianConvolution_Stage1_c0_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_0_Stage0 - uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    vec2 coordSampled = vec2(0.0, 0.0);
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c0_c0_c1_c0.x, uBounds_Stage1_c0_c0_c0_c0_c1_c0.y - uBounds_Stage1_c0_c0_c0_c0_c1_c0.x) + uBounds_Stage1_c0_c0_c0_c0_c1_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[0].x;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c0_c0_c1_c0.x, uBounds_Stage1_c0_c0_c0_c0_c1_c0.y - uBounds_Stage1_c0_c0_c0_c0_c1_c0.x) + uBounds_Stage1_c0_c0_c0_c0_c1_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[0].y;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c0_c0_c1_c0.x, uBounds_Stage1_c0_c0_c0_c0_c1_c0.y - uBounds_Stage1_c0_c0_c0_c0_c1_c0.x) + uBounds_Stage1_c0_c0_c0_c0_c1_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[0].z;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    _output *= _input;
    return _output;
}
vec4 blend_difference(vec4 src, vec4 dst) {
    return vec4((src.xyz + dst.xyz) - 2.0 * min(src.xyz * dst.w, dst.xyz * src.w), src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_difference(EllipticalRRect_Stage1_c0_c0_c0_c0_c0_c0(inputColor), GaussianConvolution_Stage1_c0_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 RRectBlurEffect_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 translatedFragPos = gl_FragCoord.xy - uproxyRect_Stage1_c0_c0_c1_c0.xy;
    float threshold = ucornerRadius_Stage1_c0_c0_c1_c0 + 2.0 * ublurRadius_Stage1_c0_c0_c1_c0;
    vec2 middle = (uproxyRect_Stage1_c0_c0_c1_c0.zw - uproxyRect_Stage1_c0_c0_c1_c0.xy) - 2.0 * threshold;
    if (translatedFragPos.x >= threshold && translatedFragPos.x < middle.x + threshold) {
        translatedFragPos.x = threshold;
    } else if (translatedFragPos.x >= middle.x + threshold) {
        translatedFragPos.x -= middle.x - 1.0;
    }
    if (translatedFragPos.y > threshold && translatedFragPos.y < middle.y + threshold) {
        translatedFragPos.y = threshold;
    } else if (translatedFragPos.y >= middle.y + threshold) {
        translatedFragPos.y -= middle.y - 1.0;
    }
    vec2 proxyDims = vec2(2.0 * threshold + 1.0);
    vec2 texCoord = translatedFragPos / proxyDims;
    _output = _input * texture(uTextureSampler_1_Stage1, texCoord);
    return _output;
}
float _guarded_divide(float n, float d) {
    return n / d;
}
float _color_dodge_component(float sc, float sa, float dc, float da) {
    if (dc == 0.0) {
        return sc * (1.0 - da);
    } else {
        float d = sa - sc;
        if (d == 0.0) {
            return (sa * da + sc * (1.0 - da)) + dc * (1.0 - sa);
        }
        d = min(da, _guarded_divide(dc * sa, d));
        return (d * sa + sc * (1.0 - da)) + dc * (1.0 - sa);
    }
}
vec4 blend_color_dodge(vec4 src, vec4 dst) {
    return vec4(_color_dodge_component(src.x, src.w, dst.x, dst.w), _color_dodge_component(src.y, src.w, dst.y, dst.w), _color_dodge_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_color_dodge(ComposeTwo_Stage1_c0_c0_c0_c0(inputColor), RRectBlurEffect_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 EllipseEffect_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 d = gl_FragCoord.xy - uellipse_Stage1_c1_c0.xy;
    vec2 Z = d * uellipse_Stage1_c1_c0.zw;
    float implicit = dot(Z, d) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    {
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
    }
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha;
    {
        alpha = approx_dist > 0.0 ? 1.0 : 0.0;
    }
    _output = _input * alpha;
    return _output;
}
vec4 blend_src_over(vec4 src, vec4 dst) {
    return src + (1.0 - src.w) * dst;
}
vec4 blend_darken(vec4 src, vec4 dst) {
    vec4 result = blend_src_over(src, dst);
    result.xyz = min(result.xyz, (1.0 - dst.w) * src.xyz + dst.xyz);
    return result;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_darken(ComposeTwo_Stage1_c0_c0(inputColor), EllipseEffect_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

