[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform float ucontrast_Stage2;
uniform sampler2D uTextureSampler_0_Stage1;
noperspective in vec2 vTransformedCoords_0_Stage0;
flat in vec4 vcolor_Stage0;
vec4 TextureEffect_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    _output = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0) * _input;
    return _output;
}
float hue2rgb_Stage2(float p, float q, float t) {
    if (t < 0.0) t += 1.0;
    if (t > 1.0) t -= 1.0;
    if (t < 0.16666666666666666) return p + ((q - p) * 6.0) * t;
    if (t < 0.5) return q;
    if (t < 0.66666666666666663) return p + ((q - p) * (0.66666666666666663 - t)) * 6.0;
    return p;
}
void main() {
    vec4 output_Stage1;
    {
        output_Stage1 = TextureEffect_Stage1_c0_c0(vec4(1.0, 1.0, 1.0, 1.0));
    }
    vec4 output_Stage2;
    {
        vec4 color = output_Stage1;
        float nonZeroAlpha = max(color.w, 9.9999997473787516e-05);
        color = vec4(color.xyz / nonZeroAlpha, nonZeroAlpha);
        color.xyz = color.xyz * color.xyz;
        float fmax = max(color.x, max(color.y, color.z));
        float fmin = min(color.x, min(color.y, color.z));
        float l = (fmax + fmin) / 2.0;
        float h;
        float s;
        if (fmax == fmin) {
            h = 0.0;
            s = 0.0;
        } else {
            float d = fmax - fmin;
            s = l > 0.5 ? d / ((2.0 - fmax) - fmin) : d / (fmax + fmin);
            if (color.x >= color.y && color.x >= color.z) {
                h = (color.y - color.z) / d + float(color.y < color.z ? 6 : 0);
            } else if (color.y >= color.z) {
                h = (color.z - color.x) / d + 2.0;
            } else {
                h = (color.x - color.y) / d + 4.0;
            }
        }
        h /= 6.0;
        l = 1.0 - l;
        if (s == 0.0) {
            color = vec4(l, l, l, 0.0);
        } else {
            float q = l < 0.5 ? l * (1.0 + s) : (l + s) - l * s;
            float p = 2.0 * l - q;
            color.x = hue2rgb_Stage2(p, q, h + 0.33333333333333331);
            color.y = hue2rgb_Stage2(p, q, h);
            color.z = hue2rgb_Stage2(p, q, h - 0.33333333333333331);
        }
        if (ucontrast_Stage2 != 0.0) {
            float m = (1.0 + ucontrast_Stage2) / (1.0 - ucontrast_Stage2);
            float off = -0.5 * m + 0.5;
            color = m * color + off;
        }
        color = clamp(color, 0.0, 1.0);
        color.xyz = sqrt(color.xyz);
        color.w = output_Stage1.w;
        color.xyz *= color.w;
        output_Stage2 = color;
    }
    {
        sk_FragColor = output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 position;
in vec4 color;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
flat out vec4 vcolor_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vcolor_Stage0 = color;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

