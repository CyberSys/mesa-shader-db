[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 urectH_Stage1_c0_c0_c0_c0_c1_c0;
uniform float uinvSixSigma_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec4 urectUniform_Stage1_c0_c0_c1_c0;
uniform vec4 ucolor_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec2 uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec4 uKernel_Stage1_c1_c0_c0_c0_c1_c0[5];
uniform vec2 uKernelOffset_Stage1_c1_c0_c0_c0_c1_c0;
uniform float uGain_Stage1_c1_c0_c0_c0_c1_c0;
uniform float uBias_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec4 uTexDom_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec3 uDecalParams_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec2 ubaseFrequency_Stage1_c1_c0_c1_c0_c0_c0;
uniform float uz_Stage1_c1_c0_c1_c0_c0_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
uniform sampler2D uTextureSampler_3_Stage1;
noperspective in vec4 vinCircleEdge_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec3 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
vec4 ConfigConversionEffect_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    _output = floor(_input * 255.0 + 0.5) / 255.0;
    {
        _output.xyz = floor((_output.xyz * _output.w) * 255.0 + 0.5) / 255.0;
    }
    return _output;
}
vec4 RectBlurEffect_Stage1_c0_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float xCoverage, yCoverage;
    {
        float x, y;
        {
            x = max(urectH_Stage1_c0_c0_c0_c0_c1_c0.x - gl_FragCoord.x, gl_FragCoord.x - urectH_Stage1_c0_c0_c0_c0_c1_c0.z);
            y = max(urectH_Stage1_c0_c0_c0_c0_c1_c0.y - gl_FragCoord.y, gl_FragCoord.y - urectH_Stage1_c0_c0_c0_c0_c1_c0.w);
        }
        xCoverage = texture(uTextureSampler_0_Stage1, vec2(x * uinvSixSigma_Stage1_c0_c0_c0_c0_c1_c0, 0.5)).w;
        yCoverage = texture(uTextureSampler_0_Stage1, vec2(y * uinvSixSigma_Stage1_c0_c0_c0_c0_c1_c0, 0.5)).w;
        _output = (_input * xCoverage) * yCoverage;
    }
    _output = (_input * xCoverage) * yCoverage;
    return _output;
}
vec4 blend_xor(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + (1.0 - src.w) * dst;
}
vec4 ComposeTwo_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_xor(ConfigConversionEffect_Stage1_c0_c0_c0_c0_c0_c0(inputColor), RectBlurEffect_Stage1_c0_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 AARectEffect_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float alpha;
    {
        float xSub, ySub;
        xSub = min(gl_FragCoord.x - urectUniform_Stage1_c0_c0_c1_c0.x, 0.0);
        xSub += min(urectUniform_Stage1_c0_c0_c1_c0.z - gl_FragCoord.x, 0.0);
        ySub = min(gl_FragCoord.y - urectUniform_Stage1_c0_c0_c1_c0.y, 0.0);
        ySub += min(urectUniform_Stage1_c0_c0_c1_c0.w - gl_FragCoord.y, 0.0);
        alpha = (1.0 + max(xSub, -1.0)) * (1.0 + max(ySub, -1.0));
    }
    {
        alpha = 1.0 - alpha;
    }
    _output = _input * alpha;
    return _output;
}
vec4 blend_modulate(vec4 src, vec4 dst) {
    return src * dst;
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_modulate(ComposeTwo_Stage1_c0_c0_c0_c0(inputColor), AARectEffect_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ConstColorProcessor_Stage1_c1_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    {
        _output = ucolor_Stage1_c1_c0_c0_c0_c0_c0;
    }
    return _output;
}
vec4 MatrixConvolution_Stage1_c1_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_0_Stage0 - uKernelOffset_Stage1_c1_c0_c0_c0_c1_c0 * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    vec4 c;
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[0].x;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[0].y;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[0].z;
        {
            vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[0].w;
        {
            vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[1].x;
        {
            vec2 origCoord = coord + uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[1].y;
        {
            vec2 origCoord = coord + vec2(2.0, 1.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[1].z;
        {
            vec2 origCoord = coord + vec2(0.0, 2.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[1].w;
        {
            vec2 origCoord = coord + vec2(1.0, 2.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[2].x;
        {
            vec2 origCoord = coord + vec2(2.0, 2.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[2].y;
        {
            vec2 origCoord = coord + vec2(0.0, 3.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[2].z;
        {
            vec2 origCoord = coord + vec2(1.0, 3.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[2].w;
        {
            vec2 origCoord = coord + vec2(2.0, 3.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[3].x;
        {
            vec2 origCoord = coord + vec2(0.0, 4.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[3].y;
        {
            vec2 origCoord = coord + vec2(1.0, 4.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[3].z;
        {
            vec2 origCoord = coord + vec2(2.0, 4.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[3].w;
        {
            vec2 origCoord = coord + vec2(0.0, 5.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[4].x;
        {
            vec2 origCoord = coord + vec2(1.0, 5.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c1_c0[4].y;
        {
            vec2 origCoord = coord + vec2(2.0, 5.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    _output = sum * uGain_Stage1_c1_c0_c0_c0_c1_c0 + uBias_Stage1_c1_c0_c0_c0_c1_c0;
    _output.w = clamp(_output.w, 0.0, 1.0);
    _output.xyz = clamp(_output.xyz, 0.0, _output.w);
    _output *= _input;
    return _output;
}
vec4 blend_src_over(vec4 src, vec4 dst) {
    return src + (1.0 - src.w) * dst;
}
vec4 ComposeTwo_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_over(ConstColorProcessor_Stage1_c1_c0_c0_c0_c0_c0(inputColor), MatrixConvolution_Stage1_c1_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec3 fade_Stage1_c1_c0_c1_c0_c0_c0(vec3 t) {
    return ((t * t) * t) * (t * (t * 6.0 - 15.0) + 10.0);
}
float perm_Stage1_c1_c0_c1_c0_c0_c0(float x) {
    return texture(uTextureSampler_2_Stage1, vec2(fract(x / 256.0), 0.0)).x * 255.0;
}
float grad_Stage1_c1_c0_c1_c0_c0_c0(float x, vec3 p) {
    return dot(texture(uTextureSampler_3_Stage1, vec2(fract(x / 16.0), 0.0)).xyz * 255.0 - vec3(1.0), p);
}
float lerp_Stage1_c1_c0_c1_c0_c0_c0(float a, float b, float w) {
    return a + w * (b - a);
}
float noise_Stage1_c1_c0_c1_c0_c0_c0(vec3 p) {
    vec3 P = mod(floor(p), 256.0);
    p -= floor(p);
    vec3 f = fade_Stage1_c1_c0_c1_c0_c0_c0(p);
    float A = perm_Stage1_c1_c0_c1_c0_c0_c0(P.x) + P.y;
    float AA = perm_Stage1_c1_c0_c1_c0_c0_c0(A) + P.z;
    float AB = perm_Stage1_c1_c0_c1_c0_c0_c0(A + 1.0) + P.z;
    float B = perm_Stage1_c1_c0_c1_c0_c0_c0(P.x + 1.0) + P.y;
    float BA = perm_Stage1_c1_c0_c1_c0_c0_c0(B) + P.z;
    float BB = perm_Stage1_c1_c0_c1_c0_c0_c0(B + 1.0) + P.z;
    float result = lerp_Stage1_c1_c0_c1_c0_c0_c0(lerp_Stage1_c1_c0_c1_c0_c0_c0(lerp_Stage1_c1_c0_c1_c0_c0_c0(grad_Stage1_c1_c0_c1_c0_c0_c0(perm_Stage1_c1_c0_c1_c0_c0_c0(AA), p), grad_Stage1_c1_c0_c1_c0_c0_c0(perm_Stage1_c1_c0_c1_c0_c0_c0(BA), p + vec3(-1.0, 0.0, 0.0)), f.x), lerp_Stage1_c1_c0_c1_c0_c0_c0(grad_Stage1_c1_c0_c1_c0_c0_c0(perm_Stage1_c1_c0_c1_c0_c0_c0(AB), p + vec3(0.0, -1.0, 0.0)), grad_Stage1_c1_c0_c1_c0_c0_c0(perm_Stage1_c1_c0_c1_c0_c0_c0(BB), p + vec3(-1.0, -1.0, 0.0)), f.x), f.y), lerp_Stage1_c1_c0_c1_c0_c0_c0(lerp_Stage1_c1_c0_c1_c0_c0_c0(grad_Stage1_c1_c0_c1_c0_c0_c0(perm_Stage1_c1_c0_c1_c0_c0_c0(AA + 1.0), p + vec3(0.0, 0.0, -1.0)), grad_Stage1_c1_c0_c1_c0_c0_c0(perm_Stage1_c1_c0_c1_c0_c0_c0(BA + 1.0), p + vec3(-1.0, 0.0, -1.0)), f.x), lerp_Stage1_c1_c0_c1_c0_c0_c0(grad_Stage1_c1_c0_c1_c0_c0_c0(perm_Stage1_c1_c0_c1_c0_c0_c0(AB + 1.0), p + vec3(0.0, -1.0, -1.0)), grad_Stage1_c1_c0_c1_c0_c0_c0(perm_Stage1_c1_c0_c1_c0_c0_c0(BB + 1.0), p + vec3(-1.0, -1.0, -1.0)), f.x), f.y), f.z);
    return result;
}
float noiseOctaves_Stage1_c1_c0_c1_c0_c0_c0(vec3 p) {
    float result = 0.0;
    float ratio = 1.0;
    for (float i = 0.0;i < 3.0; i++) {
        result += noise_Stage1_c1_c0_c1_c0_c0_c0(p) / ratio;
        p *= 2.0;
        ratio *= 2.0;
    }
    return (result + 1.0) / 2.0;
}
vec4 ImprovedPerlinNoise_Stage1_c1_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 vTransformedCoords_1_Stage0_ensure2D = vTransformedCoords_1_Stage0.xy / vTransformedCoords_1_Stage0.z;
    vec2 coords = vTransformedCoords_1_Stage0_ensure2D * ubaseFrequency_Stage1_c1_c0_c1_c0_c0_c0;
    float r = noiseOctaves_Stage1_c1_c0_c1_c0_c0_c0(vec3(coords, uz_Stage1_c1_c0_c1_c0_c0_c0));
    float g = noiseOctaves_Stage1_c1_c0_c1_c0_c0_c0(vec3(coords, uz_Stage1_c1_c0_c1_c0_c0_c0));
    float b = noiseOctaves_Stage1_c1_c0_c1_c0_c0_c0(vec3(coords, uz_Stage1_c1_c0_c1_c0_c0_c0));
    float a = noiseOctaves_Stage1_c1_c0_c1_c0_c0_c0(vec3(coords, uz_Stage1_c1_c0_c1_c0_c0_c0));
    _output = vec4(r, g, b, a);
    _output = clamp(_output, 0.0, 1.0);
    _output = vec4(_output.xyz * _output.www, _output.w);
    return _output;
}
vec4 Dither_Stage1_c1_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = _input;
    float value;
    {
        uint x = uint(vTransformedCoords_2_Stage0.x);
        uint y = uint(vTransformedCoords_2_Stage0.y);
        uint m = (((((y & 1u) << 5u | (x & 1u) << 4u) | (y & 2u) << 2u) | (x & 2u) << 1u) | (y & 4u) >> 1u) | (x & 4u) >> 2u;
        value = float(m) / 64.0 - 0.4921875;
    }
    _output = vec4(clamp(_output.xyz + value * 0.0039215688593685627, 0.0, _output.w), _output.w);
    return _output;
}
vec4 blend_darken(vec4 src, vec4 dst) {
    vec4 result = blend_src_over(src, dst);
    result.xyz = min(result.xyz, (1.0 - dst.w) * src.xyz + dst.xyz);
    return result;
}
vec4 ComposeTwo_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_darken(ImprovedPerlinNoise_Stage1_c1_c0_c1_c0_c0_c0(inputColor), Dither_Stage1_c1_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_xor(ComposeTwo_Stage1_c1_c0_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_difference(vec4 src, vec4 dst) {
    return vec4((src.xyz + dst.xyz) - 2.0 * min(src.xyz * dst.w, dst.xyz * src.w), src.w + (1.0 - src.w) * dst.w);
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        vec4 circleEdge;
        circleEdge = vinCircleEdge_Stage0;
        outputColor_Stage0 = vinColor_Stage0;
        float d = length(circleEdge.xy);
        float distanceToOuterEdge = circleEdge.z * (1.0 - d);
        float edgeAlpha = clamp(distanceToOuterEdge, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_difference(ComposeTwo_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1 * outputCoverage_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec4 inCircleEdge;
noperspective out vec4 vinCircleEdge_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec3 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
void main() {
    vinCircleEdge_Stage0 = inCircleEdge;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0);
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

