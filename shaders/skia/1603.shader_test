[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 ucolor0_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec4 ucolor1_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec4 ucolor2_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec4 ucolor3_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec4 ucolor4_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec4 ucolor5_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec2 uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec2 uBounds_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec4 uKernel_Stage1_c0_c0_c1_c0_c0_c0[6];
uniform vec4 uinnerRect_Stage1_c0_c0_c1_c0_c1_c0;
uniform vec4 uinvRadiiLTRB_Stage1_c0_c0_c1_c0_c1_c0;
uniform vec2 uImageIncrement_Stage1_c1_c0;
uniform float uSurfaceScale_Stage1_c1_c0;
uniform vec3 uLightColor_Stage1_c1_c0;
uniform float uKS_Stage1_c1_c0;
uniform float uShininess_Stage1_c1_c0;
uniform vec4 uTexDom_Stage1_c1_c0;
uniform vec3 uDecalParams_Stage1_c1_c0;
uniform vec3 uLightLocation_Stage1_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
noperspective in vec4 vQuadEdge_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
vec4 ColorTableEffect_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float nonZeroAlpha = max(_input.w, 9.9999997473787516e-05);
    vec4 coord = vec4(_input.xyz / nonZeroAlpha, nonZeroAlpha);
    coord = coord * 0.9960939884185791 + vec4(0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579);
    _output.w = texture(uTextureSampler_0_Stage1, vec2(coord.w, 0.125)).w;
    _output.x = texture(uTextureSampler_0_Stage1, vec2(coord.x, 0.375)).w;
    _output.y = texture(uTextureSampler_0_Stage1, vec2(coord.y, 0.625)).w;
    _output.z = texture(uTextureSampler_0_Stage1, vec2(coord.z, 0.875)).w;
    _output.xyz *= _output.w;
    return _output;
}
vec4 Overdraw_Stage1_c0_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = _input;
    float alpha = 255.0 * _output.w;
    if (alpha < 0.5) {
        _output = ucolor0_Stage1_c0_c0_c0_c0_c1_c0;
    } else if (alpha < 1.5) {
        _output = ucolor1_Stage1_c0_c0_c0_c0_c1_c0;
    } else if (alpha < 2.5) {
        _output = ucolor2_Stage1_c0_c0_c0_c0_c1_c0;
    } else if (alpha < 3.5) {
        _output = ucolor3_Stage1_c0_c0_c0_c0_c1_c0;
    } else if (alpha < 4.5) {
        _output = ucolor4_Stage1_c0_c0_c0_c0_c1_c0;
    } else {
        _output = ucolor5_Stage1_c0_c0_c0_c0_c1_c0;
    }
    return _output;
}
float _guarded_divide(float n, float d) {
    return n / d;
}
float _color_burn_component(float sc, float sa, float dc, float da) {
    if (da == dc) {
        return (sa * da + sc * (1.0 - da)) + dc * (1.0 - sa);
    } else if (sc == 0.0) {
        return dc * (1.0 - sa);
    }
    float d = max(0.0, da - _guarded_divide((da - dc) * sa, sc));
    return (d * sa + sc * (1.0 - da)) + dc * (1.0 - sa);
}
vec4 blend_color_burn(vec4 src, vec4 dst) {
    return vec4(_color_burn_component(src.x, src.w, dst.x, dst.w), _color_burn_component(src.y, src.w, dst.y, dst.w), _color_burn_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_color_burn(ColorTableEffect_Stage1_c0_c0_c0_c0_c0_c0(inputColor), Overdraw_Stage1_c0_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 GaussianConvolution_Stage1_c0_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_1_Stage0 - 11.0 * uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    vec2 coordSampled = vec2(0.0, 0.0);
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[0].x;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[0].y;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[0].z;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[0].w;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[1].x;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[1].y;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[1].z;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[1].w;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[2].x;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[2].y;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[2].z;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[2].w;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[3].x;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[3].y;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[3].z;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[3].w;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[4].x;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[4].y;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[4].z;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[4].w;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[5].x;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[5].y;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[5].z;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    _output *= _input;
    return _output;
}
vec4 EllipticalRRect_Stage1_c0_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c0_c0_c1_c0_c1_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c0_c0_c1_c0_c1_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    vec2 Z = max(max(dxy0 * uinvRadiiLTRB_Stage1_c0_c0_c1_c0_c1_c0.xy, dxy1 * uinvRadiiLTRB_Stage1_c0_c0_c1_c0_c1_c0.zw), 0.0);
    float implicit = dot(Z, dxy) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    grad_dot = max(grad_dot, 9.9999997473787516e-05);
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha = clamp(0.5 - approx_dist, 0.0, 1.0);
    _output = _input * alpha;
    return _output;
}
vec4 blend_src_over(vec4 src, vec4 dst) {
    return src + (1.0 - src.w) * dst;
}
vec4 ComposeTwo_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_over(GaussianConvolution_Stage1_c0_c0_c1_c0_c0_c0(inputColor), EllipticalRRect_Stage1_c0_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_modulate(vec4 src, vec4 dst) {
    return src * dst;
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_modulate(ComposeTwo_Stage1_c0_c0_c0_c0(inputColor), ComposeTwo_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 light_Stage1_c1_c0(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    vec3 halfDir = normalize(surfaceToLight + vec3(0.0, 0.0, 1.0));
    float colorScale = uKS_Stage1_c1_c0 * pow(dot(normal, halfDir), uShininess_Stage1_c1_c0);
    vec3 color = lightColor * clamp(colorScale, 0.0, 1.0);
    return vec4(color, max(max(color.x, color.y), color.z));
}
float sobel_Stage1_c1_c0(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage1_c1_c0(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage1_c1_c0(float m[9], float surfaceScale) {
    return pointToNormal_Stage1_c1_c0(sobel_Stage1_c1_c0(m[0], m[2], m[3], m[5], m[6], m[8], 0.25), sobel_Stage1_c1_c0(m[0], m[6], m[1], m[7], m[2], m[8], 0.25), surfaceScale);
}
vec4 SpecularLighting_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_2_Stage0;
    float m[9];
    vec4 temp0;
    {
        vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage1_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[0] = temp0.w;
    vec4 temp1;
    {
        vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage1_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[1] = temp1.w;
    vec4 temp2;
    {
        vec2 origCoord = coord + uImageIncrement_Stage1_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[2] = temp2.w;
    vec4 temp3;
    {
        vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage1_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[3] = temp3.w;
    vec4 temp4;
    {
        vec2 origCoord = coord;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[4] = temp4.w;
    vec4 temp5;
    {
        vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[5] = temp5.w;
    vec4 temp6;
    {
        vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage1_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[6] = temp6.w;
    vec4 temp7;
    {
        vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage1_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[7] = temp7.w;
    vec4 temp8;
    {
        vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage1_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0.xy, uTexDom_Stage1_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[8] = temp8.w;
    vec3 surfaceToLight = normalize(uLightLocation_Stage1_c1_c0 - vec3(gl_FragCoord.xy, uSurfaceScale_Stage1_c1_c0 * m[4]));
    _output = light_Stage1_c1_c0(normal_Stage1_c1_c0(m, uSurfaceScale_Stage1_c1_c0), surfaceToLight, uLightColor_Stage1_c1_c0);
    _output *= _input;
    return _output;
}
vec4 blend_exclusion(vec4 src, vec4 dst) {
    return vec4((dst.xyz + src.xyz) - (2.0 * dst.xyz) * src.xyz, src.w + (1.0 - src.w) * dst.w);
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vinColor_Stage0;
        float edgeAlpha;
        vec2 duvdx = dFdx(vQuadEdge_Stage0.xy);
        vec2 duvdy = -dFdy(vQuadEdge_Stage0.xy);
        if (vQuadEdge_Stage0.z > 0.0 && vQuadEdge_Stage0.w > 0.0) {
            edgeAlpha = min(min(vQuadEdge_Stage0.z, vQuadEdge_Stage0.w) + 0.5, 1.0);
        } else {
            vec2 gF = vec2((2.0 * vQuadEdge_Stage0.x) * duvdx.x - duvdx.y, (2.0 * vQuadEdge_Stage0.x) * duvdy.x - duvdy.y);
            edgeAlpha = vQuadEdge_Stage0.x * vQuadEdge_Stage0.x - vQuadEdge_Stage0.y;
            edgeAlpha = clamp(0.5 - edgeAlpha / length(gF), 0.0, 1.0);
        }
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_exclusion(ComposeTwo_Stage1_c0_c0(inputColor), SpecularLighting_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = (1.0 - output_Stage1.w) * outputCoverage_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec4 inQuadEdge;
noperspective out vec4 vQuadEdge_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
void main() {
    vQuadEdge_Stage0 = inQuadEdge;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

