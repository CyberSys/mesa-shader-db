[require]
GLSL >= 1.40
GL_KHR_blend_equation_advanced

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uColor_Stage0;
uniform vec2 uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec2 uBounds_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec4 uKernel_Stage1_c0_c0_c0_c0_c0_c0[4];
uniform float uinnerThreshold_Stage1_c0_c0_c0_c0_c1_c0;
uniform float uouterThreshold_Stage1_c0_c0_c0_c0_c1_c0;
uniform float ucornerRadius_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec4 uproxyRect_Stage1_c0_c0_c1_c0_c0_c0;
uniform float ublurRadius_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec4 ucircle_Stage1_c0_c0_c1_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
vec4 GaussianConvolution_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_0_Stage0 - 6.0 * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
    vec2 coordSampled = vec2(0.0, 0.0);
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x, uBounds_Stage1_c0_c0_c0_c0_c0_c0.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c0_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c0_c0[0].x;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x, uBounds_Stage1_c0_c0_c0_c0_c0_c0.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c0_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c0_c0[0].y;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x, uBounds_Stage1_c0_c0_c0_c0_c0_c0.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c0_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c0_c0[0].z;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x, uBounds_Stage1_c0_c0_c0_c0_c0_c0.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c0_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c0_c0[0].w;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x, uBounds_Stage1_c0_c0_c0_c0_c0_c0.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c0_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c0_c0[1].x;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x, uBounds_Stage1_c0_c0_c0_c0_c0_c0.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c0_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c0_c0[1].y;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x, uBounds_Stage1_c0_c0_c0_c0_c0_c0.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c0_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c0_c0[1].z;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x, uBounds_Stage1_c0_c0_c0_c0_c0_c0.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c0_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c0_c0[1].w;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x, uBounds_Stage1_c0_c0_c0_c0_c0_c0.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c0_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c0_c0[2].x;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x, uBounds_Stage1_c0_c0_c0_c0_c0_c0.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c0_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c0_c0[2].y;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x, uBounds_Stage1_c0_c0_c0_c0_c0_c0.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c0_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c0_c0[2].z;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x, uBounds_Stage1_c0_c0_c0_c0_c0_c0.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c0_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c0_c0[2].w;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x, uBounds_Stage1_c0_c0_c0_c0_c0_c0.y - uBounds_Stage1_c0_c0_c0_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c0_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c0_c0[3].x;
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
    _output *= _input;
    return _output;
}
vec4 AlphaThresholdFragmentProcessor_Stage1_c0_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 color = _input;
    vec4 mask_color = texture(uTextureSampler_1_Stage1, vTransformedCoords_1_Stage0);
    if (mask_color.w < 0.5) {
        if (color.w > uouterThreshold_Stage1_c0_c0_c0_c0_c1_c0) {
            float scale = uouterThreshold_Stage1_c0_c0_c0_c0_c1_c0 / color.w;
            color.xyz *= scale;
            color.w = uouterThreshold_Stage1_c0_c0_c0_c0_c1_c0;
        }
    } else if (color.w < uinnerThreshold_Stage1_c0_c0_c0_c0_c1_c0) {
        float scale = uinnerThreshold_Stage1_c0_c0_c0_c0_c1_c0 / max(0.0010000000474974513, color.w);
        color.xyz *= scale;
        color.w = uinnerThreshold_Stage1_c0_c0_c0_c0_c1_c0;
    }
    _output = color;
    return _output;
}
vec4 blend_screen(vec4 src, vec4 dst) {
    return src + (1.0 - src) * dst;
}
vec4 ComposeTwo_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_screen(GaussianConvolution_Stage1_c0_c0_c0_c0_c0_c0(inputColor), AlphaThresholdFragmentProcessor_Stage1_c0_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 RRectBlurEffect_Stage1_c0_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 translatedFragPos = gl_FragCoord.xy - uproxyRect_Stage1_c0_c0_c1_c0_c0_c0.xy;
    float threshold = ucornerRadius_Stage1_c0_c0_c1_c0_c0_c0 + 2.0 * ublurRadius_Stage1_c0_c0_c1_c0_c0_c0;
    vec2 middle = (uproxyRect_Stage1_c0_c0_c1_c0_c0_c0.zw - uproxyRect_Stage1_c0_c0_c1_c0_c0_c0.xy) - 2.0 * threshold;
    if (translatedFragPos.x >= threshold && translatedFragPos.x < middle.x + threshold) {
        translatedFragPos.x = threshold;
    } else if (translatedFragPos.x >= middle.x + threshold) {
        translatedFragPos.x -= middle.x - 1.0;
    }
    if (translatedFragPos.y > threshold && translatedFragPos.y < middle.y + threshold) {
        translatedFragPos.y = threshold;
    } else if (translatedFragPos.y >= middle.y + threshold) {
        translatedFragPos.y -= middle.y - 1.0;
    }
    vec2 proxyDims = vec2(2.0 * threshold + 1.0);
    vec2 texCoord = translatedFragPos / proxyDims;
    _output = _input * texture(uTextureSampler_2_Stage1, texCoord);
    return _output;
}
vec4 CircleEffect_Stage1_c0_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float d;
    {
        d = (1.0 - length((ucircle_Stage1_c0_c0_c1_c0_c1_c0.xy - gl_FragCoord.xy) * ucircle_Stage1_c0_c0_c1_c0_c1_c0.w)) * ucircle_Stage1_c0_c0_c1_c0_c1_c0.z;
    }
    {
        _output = d > 0.5 ? _input : vec4(0.0);
    }
    return _output;
}
float _blend_color_saturation(vec3 color) {
    return max(max(color.x, color.y), color.z) - min(min(color.x, color.y), color.z);
}
vec3 _blend_set_color_saturation_helper(vec3 minMidMax, float sat) {
    if (minMidMax.x < minMidMax.z) {
        return vec3(0.0, (sat * (minMidMax.y - minMidMax.x)) / (minMidMax.z - minMidMax.x), sat);
    }
    return vec3(0.0);
}
vec3 _blend_set_color_saturation(vec3 hueLumColor, vec3 satColor) {
    float sat = _blend_color_saturation(satColor);
    if (hueLumColor.x <= hueLumColor.y) {
        if (hueLumColor.y <= hueLumColor.z) {
            hueLumColor.xyz = _blend_set_color_saturation_helper(hueLumColor, sat);
        } else if (hueLumColor.x <= hueLumColor.z) {
            hueLumColor.xzy = _blend_set_color_saturation_helper(hueLumColor.xzy, sat);
        } else {
            hueLumColor.zxy = _blend_set_color_saturation_helper(hueLumColor.zxy, sat);
        }
    } else if (hueLumColor.x <= hueLumColor.z) {
        hueLumColor.yxz = _blend_set_color_saturation_helper(hueLumColor.yxz, sat);
    } else if (hueLumColor.y <= hueLumColor.z) {
        hueLumColor.yzx = _blend_set_color_saturation_helper(hueLumColor.yzx, sat);
    } else {
        hueLumColor.zyx = _blend_set_color_saturation_helper(hueLumColor.zyx, sat);
    }
    return hueLumColor;
}
float _blend_color_luminance(vec3 color) {
    return dot(vec3(0.30000001192092896, 0.5899999737739563, 0.10999999940395355), color);
}
vec3 _blend_set_color_luminance(vec3 hueSatColor, float alpha, vec3 lumColor) {
    float lum = _blend_color_luminance(lumColor);
    vec3 result = (lum - _blend_color_luminance(hueSatColor)) + hueSatColor;
    float minComp = min(min(result.x, result.y), result.z);
    float maxComp = max(max(result.x, result.y), result.z);
    if (minComp < 0.0 && lum != minComp) {
        result = lum + ((result - lum) * lum) / (lum - minComp);
    }
    if (maxComp > alpha && maxComp != lum) {
        return lum + ((result - lum) * (alpha - lum)) / (maxComp - lum);
    }
    return result;
}
vec4 blend_saturation(vec4 src, vec4 dst) {
    float alpha = dst.w * src.w;
    vec3 sda = src.xyz * dst.w;
    vec3 dsa = dst.xyz * src.w;
    return vec4((((_blend_set_color_luminance(_blend_set_color_saturation(dsa, sda), alpha, dsa) + dst.xyz) - dsa) + src.xyz) - sda, (src.w + dst.w) - alpha);
}
vec4 ComposeTwo_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_saturation(RRectBlurEffect_Stage1_c0_c0_c1_c0_c0_c0(inputColor), CircleEffect_Stage1_c0_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_plus(vec4 src, vec4 dst) {
    return min(src + dst, 1.0);
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_plus(ComposeTwo_Stage1_c0_c0_c0_c0(inputColor), ComposeTwo_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ClampFragmentProcessor_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    {
        _output = clamp(_input, 0.0, 1.0);
    }
    return _output;
}
vec4 blend_dst_atop(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + src.w * dst;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_dst_atop(ComposeTwo_Stage1_c0_c0(inputColor), ClampFragmentProcessor_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 inPosition;
in vec2 inLocalCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

