[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform float ucornerRadius_Stage2;
uniform vec4 uproxyRect_Stage2;
uniform float ublurRadius_Stage2;
uniform vec2 uImageIncrement_Stage3;
uniform vec2 uBounds_Stage3;
uniform vec4 uKernel_Stage3[3];
uniform vec4 ucircle_Stage4;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
uniform sampler2D uTextureSampler_0_Stage3;
in vec2 vTransformedCoords_0_Stage0;
in vec2 vTransformedCoords_1_Stage0;
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        output_Stage1 = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
    }
    vec4 output_Stage2;
    {
        vec2 translatedFragPos = gl_FragCoord.xy - uproxyRect_Stage2.xy;
        float threshold = ucornerRadius_Stage2 + 2.0 * ublurRadius_Stage2;
        vec2 middle = (uproxyRect_Stage2.zw - uproxyRect_Stage2.xy) - 2.0 * threshold;
        if (translatedFragPos.x >= threshold && translatedFragPos.x < middle.x + threshold) {
            translatedFragPos.x = threshold;
        } else if (translatedFragPos.x >= middle.x + threshold) {
            translatedFragPos.x -= middle.x - 1.0;
        }
        if (translatedFragPos.y > threshold && translatedFragPos.y < middle.y + threshold) {
            translatedFragPos.y = threshold;
        } else if (translatedFragPos.y >= middle.y + threshold) {
            translatedFragPos.y -= middle.y - 1.0;
        }
        vec2 proxyDims = vec2(2.0 * threshold + 1.0);
        vec2 texCoord = translatedFragPos / proxyDims;
        output_Stage2 = output_Stage1 * texture(uTextureSampler_0_Stage2, texCoord);
    }
    vec4 output_Stage3;
    {
        output_Stage3 = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_1_Stage0 - 5.0 * uImageIncrement_Stage3;
        vec2 coordSampled = vec2(0.0, 0.0);
        coordSampled = coord;
        coordSampled.x = clamp(coord.x, uBounds_Stage3.x, uBounds_Stage3.y);
        output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[0].x;
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        coordSampled.x = clamp(coord.x, uBounds_Stage3.x, uBounds_Stage3.y);
        output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[0].y;
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        coordSampled.x = clamp(coord.x, uBounds_Stage3.x, uBounds_Stage3.y);
        output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[0].z;
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        coordSampled.x = clamp(coord.x, uBounds_Stage3.x, uBounds_Stage3.y);
        output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[0].w;
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        coordSampled.x = clamp(coord.x, uBounds_Stage3.x, uBounds_Stage3.y);
        output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[1].x;
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        coordSampled.x = clamp(coord.x, uBounds_Stage3.x, uBounds_Stage3.y);
        output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[1].y;
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        coordSampled.x = clamp(coord.x, uBounds_Stage3.x, uBounds_Stage3.y);
        output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[1].z;
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        coordSampled.x = clamp(coord.x, uBounds_Stage3.x, uBounds_Stage3.y);
        output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[1].w;
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        coordSampled.x = clamp(coord.x, uBounds_Stage3.x, uBounds_Stage3.y);
        output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[2].x;
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        coordSampled.x = clamp(coord.x, uBounds_Stage3.x, uBounds_Stage3.y);
        output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[2].y;
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        coordSampled.x = clamp(coord.x, uBounds_Stage3.x, uBounds_Stage3.y);
        output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[2].z;
        coord += uImageIncrement_Stage3;
        output_Stage3 *= output_Stage2;
    }
    vec4 output_Stage4;
    {
        float d;
        {
            d = (1.0 - length((ucircle_Stage4.xy - gl_FragCoord.xy) * ucircle_Stage4.w)) * ucircle_Stage4.z;
        }
        {
            output_Stage4 = output_Stage3 * clamp(d, 0.0, 1.0);
        }
    }
    {
        sk_FragColor = (vec4(1.0) - outputColor_Stage0) * output_Stage4;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 inPosition;
out vec2 vTransformedCoords_0_Stage0;
out vec2 vTransformedCoords_1_Stage0;
void main() {
    vec3 pos3 = uViewM_Stage0 * vec3(inPosition, 1.0);
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos3.x, pos3.y, 0.0, pos3.z);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

