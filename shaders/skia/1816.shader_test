[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec2 uScale_Stage1_c0_c0_c0_c0;
uniform vec4 uTexDom_Stage1_c0_c0_c0_c0;
uniform vec3 uDecalParams_Stage1_c0_c0_c0_c0;
uniform vec4 uboundsUniform_Stage1_c0_c0_c1_c0;
uniform float uxInvZoom_Stage1_c0_c0_c1_c0;
uniform float uyInvZoom_Stage1_c0_c0_c1_c0;
uniform float uxInvInset_Stage1_c0_c0_c1_c0;
uniform float uyInvInset_Stage1_c0_c0_c1_c0;
uniform vec2 uoffset_Stage1_c0_c0_c1_c0;
uniform vec2 uImageIncrement_Stage1_c1_c0_c0_c0;
uniform vec2 uBounds_Stage1_c1_c0_c0_c0;
uniform vec4 uKernel_Stage1_c1_c0_c0_c0[5];
uniform vec3 uedges_Stage1_c1_c0_c1_c0_c0_c0[2];
uniform vec4 uinnerRect_Stage1_c1_c0_c1_c0_c1_c0;
uniform vec2 uradiusPlusHalf_Stage1_c1_c0_c1_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
uniform sampler2D uTextureSampler_3_Stage1;
noperspective in vec2 vTextureCoords_Stage0;
flat in int vTexIndex_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vTransformedCoords_3_Stage0;
vec4 DisplacementMap_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 dColor = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
    dColor.xyz = dColor.w < 9.9999999747524271e-07 ? vec3(0.0) : clamp(dColor.xyz / dColor.w, 0.0, 1.0);
    vec2 cCoords = vTransformedCoords_1_Stage0 + uScale_Stage1_c0_c0_c0_c0 * (dColor.wz - vec2(0.5));
    {
        vec2 origCoord = cCoords;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        _output = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    return _output;
}
vec4 MagnifierEffect_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_2_Stage0;
    vec2 zoom_coord = uoffset_Stage1_c0_c0_c1_c0 + coord * vec2(uxInvZoom_Stage1_c0_c0_c1_c0, uyInvZoom_Stage1_c0_c0_c1_c0);
    vec2 delta = (coord - uboundsUniform_Stage1_c0_c0_c1_c0.xy) * uboundsUniform_Stage1_c0_c0_c1_c0.zw;
    delta = min(delta, vec2(1.0, 1.0) - delta);
    delta *= vec2(uxInvInset_Stage1_c0_c0_c1_c0, uyInvInset_Stage1_c0_c0_c1_c0);
    float weight = 0.0;
    if (delta.x < 2.0 && delta.y < 2.0) {
        delta = vec2(2.0, 2.0) - delta;
        float dist = length(delta);
        dist = max(2.0 - dist, 0.0);
        weight = min(dist * dist, 1.0);
    } else {
        vec2 delta_squared = delta * delta;
        weight = min(min(delta_squared.x, delta_squared.y), 1.0);
    }
    _output = texture(uTextureSampler_2_Stage1, mix(coord, zoom_coord, weight));
    return _output;
}
vec4 blend_multiply(vec4 src, vec4 dst) {
    return vec4(((1.0 - src.w) * dst.xyz + (1.0 - dst.w) * src.xyz) + src.xyz * dst.xyz, src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_multiply(DisplacementMap_Stage1_c0_c0_c0_c0(inputColor), MagnifierEffect_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 GaussianConvolution_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_3_Stage0 - 9.0 * uImageIncrement_Stage1_c1_c0_c0_c0;
    vec2 coordSampled = vec2(0.0, 0.0);
    coordSampled = coord;
    coordSampled.y = clamp(coord.y, uBounds_Stage1_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0.y);
    _output += texture(uTextureSampler_3_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0[0].x;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = clamp(coord.y, uBounds_Stage1_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0.y);
    _output += texture(uTextureSampler_3_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0[0].y;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = clamp(coord.y, uBounds_Stage1_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0.y);
    _output += texture(uTextureSampler_3_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0[0].z;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = clamp(coord.y, uBounds_Stage1_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0.y);
    _output += texture(uTextureSampler_3_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0[0].w;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = clamp(coord.y, uBounds_Stage1_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0.y);
    _output += texture(uTextureSampler_3_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0[1].x;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = clamp(coord.y, uBounds_Stage1_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0.y);
    _output += texture(uTextureSampler_3_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0[1].y;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = clamp(coord.y, uBounds_Stage1_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0.y);
    _output += texture(uTextureSampler_3_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0[1].z;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = clamp(coord.y, uBounds_Stage1_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0.y);
    _output += texture(uTextureSampler_3_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0[1].w;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = clamp(coord.y, uBounds_Stage1_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0.y);
    _output += texture(uTextureSampler_3_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0[2].x;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = clamp(coord.y, uBounds_Stage1_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0.y);
    _output += texture(uTextureSampler_3_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0[2].y;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = clamp(coord.y, uBounds_Stage1_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0.y);
    _output += texture(uTextureSampler_3_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0[2].z;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = clamp(coord.y, uBounds_Stage1_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0.y);
    _output += texture(uTextureSampler_3_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0[2].w;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = clamp(coord.y, uBounds_Stage1_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0.y);
    _output += texture(uTextureSampler_3_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0[3].x;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = clamp(coord.y, uBounds_Stage1_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0.y);
    _output += texture(uTextureSampler_3_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0[3].y;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = clamp(coord.y, uBounds_Stage1_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0.y);
    _output += texture(uTextureSampler_3_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0[3].z;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = clamp(coord.y, uBounds_Stage1_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0.y);
    _output += texture(uTextureSampler_3_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0[3].w;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = clamp(coord.y, uBounds_Stage1_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0.y);
    _output += texture(uTextureSampler_3_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0[4].x;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = clamp(coord.y, uBounds_Stage1_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0.y);
    _output += texture(uTextureSampler_3_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0[4].y;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = clamp(coord.y, uBounds_Stage1_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0.y);
    _output += texture(uTextureSampler_3_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0[4].z;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0;
    _output *= _input;
    return _output;
}
vec4 ConvexPoly_Stage1_c1_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float alpha = 1.0;
    float edge;
    edge = dot(uedges_Stage1_c1_c0_c1_c0_c0_c0[0], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0_c1_c0_c0_c0[1], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    alpha = 1.0 - alpha;
    _output = _input * alpha;
    return _output;
}
vec4 CircularRRect_Stage1_c1_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c1_c0_c1_c0_c1_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c1_c0_c1_c0_c1_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    float alpha = clamp(uradiusPlusHalf_Stage1_c1_c0_c1_c0_c1_c0.x - length(dxy), 0.0, 1.0);
    alpha = 1.0 - alpha;
    _output = _input * alpha;
    return _output;
}
vec4 blend_dst_over(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + dst;
}
vec4 ComposeTwo_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_dst_over(ConvexPoly_Stage1_c1_c0_c1_c0_c0_c0(inputColor), CircularRRect_Stage1_c1_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_src_over(vec4 src, vec4 dst) {
    return src + (1.0 - src.w) * dst;
}
vec4 blend_darken(vec4 src, vec4 dst) {
    vec4 result = blend_src_over(src, dst);
    result.xyz = min(result.xyz, (1.0 - dst.w) * src.xyz + dst.xyz);
    return result;
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_darken(GaussianConvolution_Stage1_c1_c0_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
float _blend_color_luminance(vec3 color) {
    return dot(vec3(0.30000001192092896, 0.5899999737739563, 0.10999999940395355), color);
}
vec3 _blend_set_color_luminance(vec3 hueSatColor, float alpha, vec3 lumColor) {
    float lum = _blend_color_luminance(lumColor);
    vec3 result = (lum - _blend_color_luminance(hueSatColor)) + hueSatColor;
    float minComp = min(min(result.x, result.y), result.z);
    float maxComp = max(max(result.x, result.y), result.z);
    if (minComp < 0.0 && lum != minComp) {
        result = lum + ((result - lum) * lum) / (lum - minComp);
    }
    if (maxComp > alpha && maxComp != lum) {
        return lum + ((result - lum) * (alpha - lum)) / (maxComp - lum);
    }
    return result;
}
vec4 blend_color(vec4 src, vec4 dst) {
    float alpha = dst.w * src.w;
    vec3 sda = src.xyz * dst.w;
    vec3 dsa = dst.xyz * src.w;
    return vec4((((_blend_set_color_luminance(sda, alpha, dsa) + dst.xyz) - dsa) + src.xyz) - sda, (src.w + dst.w) - alpha);
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vinColor_Stage0;
        vec4 texColor;
        {
            texColor = texture(uTextureSampler_0_Stage0, vTextureCoords_Stage0);
        }
        outputCoverage_Stage0 = texColor;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_color(ComposeTwo_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1 * outputCoverage_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform vec2 uAtlasSizeInv_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
in vec2 inPosition;
in vec4 inColor;
in uvec2 inTextureCoords;
noperspective out vec2 vTextureCoords_Stage0;
flat out int vTexIndex_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vTransformedCoords_3_Stage0;
void main() {
    ivec2 signedCoords = ivec2(int(inTextureCoords.x), int(inTextureCoords.y));
    vec2 unormTexCoords = vec2(float(signedCoords.x / 2), float(signedCoords.y / 2));
    vTextureCoords_Stage0 = unormTexCoords * uAtlasSizeInv_Stage0;
    vTexIndex_Stage0 = 0;
    vinColor_Stage0 = inColor;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(inPosition.x, inPosition.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

