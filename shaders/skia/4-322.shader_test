[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uleftBorderColor_Stage1_c0_c0;
uniform vec4 urightBorderColor_Stage1_c0_c0;
uniform vec4 ustart_Stage1_c0_c0_c1_c0;
uniform vec4 uend_Stage1_c0_c0_c1_c0;
flat in vec4 vcolor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec4 varccoord_Stage0;
vec4 RadialGradientLayout_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float t = length(vTransformedCoords_0_Stage0);
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 SingleIntervalGradientColorizer_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    _output = (1.0 - t) * ustart_Stage1_c0_c0_c1_c0 + t * uend_Stage1_c0_c0_c1_c0;
    return _output;
}
vec4 ClampedGradientEffect_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = RadialGradientLayout_Stage1_c0_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage1_c0_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage1_c0_c0;
    } else {
        _output = SingleIntervalGradientColorizer_Stage1_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
void main() {
    vec4 outputCoverage_Stage0;
    {
        outputCoverage_Stage0 = vec4(1.0);
        if (vec2(0.0) != varccoord_Stage0.xy) {
            float fn = dot(varccoord_Stage0.xy, varccoord_Stage0.xy) - 1.0;
            if (fn > 0.0) {
                outputCoverage_Stage0 = vec4(0.0);
            }
        }
    }
    vec4 output_Stage1;
    {
        output_Stage1 = ClampedGradientEffect_Stage1_c0_c0(vec4(1.0, 1.0, 1.0, 1.0));
    }
    vec4 output_Stage2;
    {
        output_Stage2 = output_Stage1;
        float value;
        {
            uint x = uint(vTransformedCoords_1_Stage0.x);
            uint y = uint(vTransformedCoords_1_Stage0.y);
            uint m = (((((y & 1u) << 5u | (x & 1u) << 4u) | (y & 2u) << 2u) | (x & 2u) << 1u) | (y & 4u) >> 1u) | (x & 4u) >> 2u;
            value = float(m) / 64.0 - 0.4921875;
        }
        output_Stage2 = vec4(clamp(output_Stage2.xyz + value * 0.0039215688593685627, 0.0, output_Stage2.w), output_Stage2.w);
    }
    {
        sk_FragColor = output_Stage2 * outputCoverage_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec4 radii_selector;
in vec4 corner_and_radius_outsets;
in vec4 skew;
in vec2 translate;
in vec4 radii_x;
in vec4 radii_y;
in vec4 color;
in vec4 local_rect;
flat out vec4 vcolor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec4 varccoord_Stage0;
void main() {
    vcolor_Stage0 = color;
    vec2 corner = corner_and_radius_outsets.xy;
    vec2 radius_outset = corner_and_radius_outsets.zw;
    vec2 radii;
    radii.x = dot(radii_selector, radii_x);
    radii.y = dot(radii_selector, radii_y);
    bool is_arc_section = radii.x > 0.0;
    radii = abs(radii);
    vec2 vertexpos = corner + radius_outset * radii;
    vec2 localcoord = (local_rect.xy * (1.0 - vertexpos) + local_rect.zw * (1.0 + vertexpos)) * 0.5;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localcoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(localcoord, 1.0)).xy;
    mat2 skewmatrix = mat2(skew.xy, skew.zw);
    vec2 devcoord = vertexpos * skewmatrix + translate;
    if (is_arc_section) {
        varccoord_Stage0.xy = 1.0 - abs(radius_outset);
        mat2 derivatives = inverse(skewmatrix);
        varccoord_Stage0.zw = derivatives * (((varccoord_Stage0.xy / radii) * corner) * 2.0);
    } else {
        varccoord_Stage0 = vec4(0.0);
    }
    gl_Position = vec4(devcoord.x, devcoord.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

