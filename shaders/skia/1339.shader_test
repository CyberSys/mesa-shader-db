[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec2 uImageIncrement_Stage2;
uniform vec2 uBounds_Stage2;
uniform vec4 uKernel_Stage2[2];
uniform sampler2D uTextureSampler_0_Stage2;
noperspective in vec2 vEllipseOffsets_Stage0;
noperspective in vec4 vEllipseRadii_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vinColor_Stage0;
        vec2 offset = vEllipseOffsets_Stage0;
        float test = dot(offset, offset) - 1.0;
        vec2 grad = (2.0 * offset) * vEllipseRadii_Stage0.xy;
        float grad_dot = dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        output_Stage1 = outputCoverage_Stage0;
    }
    vec4 output_Stage2;
    {
        output_Stage2 = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_0_Stage0 - 3.0 * uImageIncrement_Stage2;
        vec2 coordSampled = vec2(0.0, 0.0);
        coordSampled = coord;
        coordSampled.y = clamp(coord.y, uBounds_Stage2.x, uBounds_Stage2.y);
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[0].x;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.y = clamp(coord.y, uBounds_Stage2.x, uBounds_Stage2.y);
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[0].y;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.y = clamp(coord.y, uBounds_Stage2.x, uBounds_Stage2.y);
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[0].z;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.y = clamp(coord.y, uBounds_Stage2.x, uBounds_Stage2.y);
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[0].w;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.y = clamp(coord.y, uBounds_Stage2.x, uBounds_Stage2.y);
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[1].x;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.y = clamp(coord.y, uBounds_Stage2.x, uBounds_Stage2.y);
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[1].y;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.y = clamp(coord.y, uBounds_Stage2.x, uBounds_Stage2.y);
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[1].z;
        coord += uImageIncrement_Stage2;
        output_Stage2 *= output_Stage1;
    }
    {
        sk_FragColor = output_Stage2 * outputColor_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffset;
in vec4 inEllipseRadii;
noperspective out vec2 vEllipseOffsets_Stage0;
noperspective out vec4 vEllipseRadii_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vEllipseOffsets_Stage0 = inEllipseOffset;
    vEllipseRadii_Stage0 = inEllipseRadii;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

