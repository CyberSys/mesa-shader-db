[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uboundsUniform_Stage1;
uniform float uxInvZoom_Stage1;
uniform float uyInvZoom_Stage1;
uniform float uxInvInset_Stage1;
uniform float uyInvInset_Stage1;
uniform vec2 uoffset_Stage1;
uniform vec4 uscale0_1_Stage2_c0_c0_c1_c0;
uniform vec4 uscale2_3_Stage2_c0_c0_c1_c0;
uniform vec4 uscale4_5_Stage2_c0_c0_c1_c0;
uniform vec4 ubias0_1_Stage2_c0_c0_c1_c0;
uniform vec4 ubias2_3_Stage2_c0_c0_c1_c0;
uniform vec4 ubias4_5_Stage2_c0_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage2_c0_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage2_c0_c0_c1_c0;
uniform vec4 uleftBorderColor_Stage3_c1_c0;
uniform vec4 urightBorderColor_Stage3_c1_c0;
uniform vec4 uscale0_1_Stage3_c1_c0_c1_c0;
uniform vec4 uscale2_3_Stage3_c1_c0_c1_c0;
uniform vec4 uscale4_5_Stage3_c1_c0_c1_c0;
uniform vec4 uscale6_7_Stage3_c1_c0_c1_c0;
uniform vec4 ubias0_1_Stage3_c1_c0_c1_c0;
uniform vec4 ubias2_3_Stage3_c1_c0_c1_c0;
uniform vec4 ubias4_5_Stage3_c1_c0_c1_c0;
uniform vec4 ubias6_7_Stage3_c1_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage3_c1_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage3_c1_c0_c1_c0;
uniform vec2 uDstTextureUpperLeft_Stage6;
uniform vec2 uDstTextureCoordScale_Stage6;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uDstTextureSampler_Stage6;
noperspective in vec4 vcolor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
vec4 LinearGradientLayout_Stage2_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float t = vTransformedCoords_1_Stage0.x + 9.9999997473787516e-06;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage2_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.x) {
                scale = uscale0_1_Stage2_c0_c0_c1_c0;
                bias = ubias0_1_Stage2_c0_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage2_c0_c0_c1_c0;
                bias = ubias2_3_Stage2_c0_c0_c1_c0;
            }
        } else {
            {
                scale = uscale4_5_Stage2_c0_c0_c1_c0;
                bias = ubias4_5_Stage2_c0_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 TiledGradientEffect_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = LinearGradientLayout_Stage2_c0_c0_c0_c0(vec4(1.0));
    {
        {
            t.x = fract(t.x);
        }
        _output = UnrolledBinaryGradientColorizer_Stage2_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 LinearGradientLayout_Stage3_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float t = vTransformedCoords_2_Stage0.x + 9.9999997473787516e-06;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage3_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage3_c1_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage3_c1_c0_c1_c0.x) {
                scale = uscale0_1_Stage3_c1_c0_c1_c0;
                bias = ubias0_1_Stage3_c1_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage3_c1_c0_c1_c0;
                bias = ubias2_3_Stage3_c1_c0_c1_c0;
            }
        } else {
            if (t < uthresholds1_7_Stage3_c1_c0_c1_c0.z) {
                scale = uscale4_5_Stage3_c1_c0_c1_c0;
                bias = ubias4_5_Stage3_c1_c0_c1_c0;
            } else {
                scale = uscale6_7_Stage3_c1_c0_c1_c0;
                bias = ubias6_7_Stage3_c1_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 ClampedGradientEffect_Stage3_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 t = LinearGradientLayout_Stage3_c1_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage3_c1_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage3_c1_c0;
    } else {
        _output = UnrolledBinaryGradientColorizer_Stage3_c1_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
vec4 blend_src_out(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src;
}
void main() {
    vec4 output_Stage1;
    {
        vec2 coord = vTransformedCoords_0_Stage0;
        vec2 zoom_coord = uoffset_Stage1 + coord * vec2(uxInvZoom_Stage1, uyInvZoom_Stage1);
        vec2 delta = (coord - uboundsUniform_Stage1.xy) * uboundsUniform_Stage1.zw;
        delta = min(delta, vec2(1.0, 1.0) - delta);
        delta *= vec2(uxInvInset_Stage1, uyInvInset_Stage1);
        float weight = 0.0;
        if (delta.x < 2.0 && delta.y < 2.0) {
            delta = vec2(2.0, 2.0) - delta;
            float dist = length(delta);
            dist = max(2.0 - dist, 0.0);
            weight = min(dist * dist, 1.0);
        } else {
            vec2 delta_squared = delta * delta;
            weight = min(min(delta_squared.x, delta_squared.y), 1.0);
        }
        output_Stage1 = texture(uTextureSampler_0_Stage1, mix(coord, zoom_coord, weight));
    }
    vec4 output_Stage2;
    {
        output_Stage2 = blend_dst_in(output_Stage1, TiledGradientEffect_Stage2_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage3;
    {
        output_Stage3 = blend_dst_in(output_Stage2, ClampedGradientEffect_Stage3_c1_c0(vec4(1.0)));
    }
    vec4 output_Stage4;
    {
        output_Stage4 = floor(vec4(255.0) + 0.5) / 255.0;
        {
            output_Stage4.xyz = floor((output_Stage4.xyz * output_Stage4.w) * 255.0 + 0.5) / 255.0;
        }
    }
    vec4 output_Stage5;
    {
        {
            float alpha = clamp(output_Stage4.w, 0.0, 1.0);
            output_Stage5 = vec4(clamp(output_Stage4.xyz, 0.0, alpha), alpha);
        }
    }
    {
        if (all(lessThanEqual(output_Stage5.xyz, vec3(0.0)))) {
            discard;
        }
        vec2 _dstTexCoord = (gl_FragCoord.xy - uDstTextureUpperLeft_Stage6) * uDstTextureCoordScale_Stage6;
        vec4 _dstColor = texture(uDstTextureSampler_Stage6, _dstTexCoord);
        sk_FragColor = blend_src_out(output_Stage3, _dstColor);
        sk_FragColor = output_Stage5 * sk_FragColor + (vec4(1.0) - output_Stage5) * _dstColor;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inLocalCoord;
noperspective out vec4 vcolor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

