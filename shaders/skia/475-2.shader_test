[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform float ucornerRadius_Stage1_c0_c0;
uniform vec4 uproxyRect_Stage1_c0_c0;
uniform float ublurRadius_Stage1_c0_c0;
uniform sampler2D uTextureSampler_0_Stage1;
vec4 RRectBlurEffect_Stage1_c0_c0(vec4 _input, vec2 _coords) {
    vec4 _output;
    vec2 translatedFragPos = gl_FragCoord.xy - uproxyRect_Stage1_c0_c0.xy;
    float threshold = ucornerRadius_Stage1_c0_c0 + 2.0 * ublurRadius_Stage1_c0_c0;
    vec2 middle = (uproxyRect_Stage1_c0_c0.zw - uproxyRect_Stage1_c0_c0.xy) - 2.0 * threshold;
    if (translatedFragPos.x >= threshold && translatedFragPos.x < middle.x + threshold) {
        translatedFragPos.x = threshold;
    } else if (translatedFragPos.x >= middle.x + threshold) {
        translatedFragPos.x -= middle.x - 1.0;
    }
    if (translatedFragPos.y > threshold && translatedFragPos.y < middle.y + threshold) {
        translatedFragPos.y = threshold;
    } else if (translatedFragPos.y >= middle.y + threshold) {
        translatedFragPos.y -= middle.y - 1.0;
    }
    vec2 proxyDims = vec2(2.0 * threshold + 1.0);
    vec2 texCoord = translatedFragPos / proxyDims;
    _output = _input * texture(uTextureSampler_0_Stage1, texCoord);
    return _output;
}
void main() {
    vec4 output_Stage1;
    {
        output_Stage1 = RRectBlurEffect_Stage1_c0_c0(vec4(1.0), gl_FragCoord.xy);
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
in vec2 position;
void main() {
    vec2 pos2 = (uViewM_Stage0 * vec3(position, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

