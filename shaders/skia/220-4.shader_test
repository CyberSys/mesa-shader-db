[require]
GLSL >= 1.40
GL_KHR_blend_equation_advanced

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uColor_Stage0;
uniform float ucornerRadius_Stage1_c0_c0;
uniform vec4 uproxyRect_Stage1_c0_c0;
uniform float ublurRadius_Stage1_c0_c0;
uniform vec2 uImageIncrement_Stage2;
uniform vec4 uKernel_Stage2[6];
uniform vec2 uKernelOffset_Stage2;
uniform float uGain_Stage2;
uniform float uBias_Stage2;
uniform vec4 uTexDom_Stage2;
uniform vec3 uDecalParams_Stage2;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
noperspective in vec2 vTransformedCoords_0_Stage0;
vec4 RRectBlurEffect_Stage1_c0_c0(vec4 _input, vec2 _coords) {
    vec4 _output;
    vec2 translatedFragPos = gl_FragCoord.xy - uproxyRect_Stage1_c0_c0.xy;
    float threshold = ucornerRadius_Stage1_c0_c0 + 2.0 * ublurRadius_Stage1_c0_c0;
    vec2 middle = (uproxyRect_Stage1_c0_c0.zw - uproxyRect_Stage1_c0_c0.xy) - 2.0 * threshold;
    if (translatedFragPos.x >= threshold && translatedFragPos.x < middle.x + threshold) {
        translatedFragPos.x = threshold;
    } else if (translatedFragPos.x >= middle.x + threshold) {
        translatedFragPos.x -= middle.x - 1.0;
    }
    if (translatedFragPos.y > threshold && translatedFragPos.y < middle.y + threshold) {
        translatedFragPos.y = threshold;
    } else if (translatedFragPos.y >= middle.y + threshold) {
        translatedFragPos.y -= middle.y - 1.0;
    }
    vec2 proxyDims = vec2(2.0 * threshold + 1.0);
    vec2 texCoord = translatedFragPos / proxyDims;
    _output = _input * texture(uTextureSampler_0_Stage1, texCoord);
    return _output;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        output_Stage1 = RRectBlurEffect_Stage1_c0_c0(outputColor_Stage0, gl_FragCoord.xy);
    }
    vec4 output_Stage2;
    {
        vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_0_Stage0 - uKernelOffset_Stage2 * uImageIncrement_Stage2;
        vec4 c;
        {
            float k = uKernel_Stage2[0].x;
            {
                vec2 origCoord = coord;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[0].y;
            {
                vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[0].z;
            {
                vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[0].w;
            {
                vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[1].x;
            {
                vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[1].y;
            {
                vec2 origCoord = coord + vec2(5.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[1].z;
            {
                vec2 origCoord = coord + vec2(6.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[1].w;
            {
                vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[2].x;
            {
                vec2 origCoord = coord + uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[2].y;
            {
                vec2 origCoord = coord + vec2(2.0, 1.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[2].z;
            {
                vec2 origCoord = coord + vec2(3.0, 1.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[2].w;
            {
                vec2 origCoord = coord + vec2(4.0, 1.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[3].x;
            {
                vec2 origCoord = coord + vec2(5.0, 1.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[3].y;
            {
                vec2 origCoord = coord + vec2(6.0, 1.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[3].z;
            {
                vec2 origCoord = coord + vec2(0.0, 2.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[3].w;
            {
                vec2 origCoord = coord + vec2(1.0, 2.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[4].x;
            {
                vec2 origCoord = coord + vec2(2.0, 2.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[4].y;
            {
                vec2 origCoord = coord + vec2(3.0, 2.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[4].z;
            {
                vec2 origCoord = coord + vec2(4.0, 2.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[4].w;
            {
                vec2 origCoord = coord + vec2(5.0, 2.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[5].x;
            {
                vec2 origCoord = coord + vec2(6.0, 2.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
                if (err > uDecalParams_Stage2.z) {
                    err = 1.0;
                } else if (uDecalParams_Stage2.z < 1.0) {
                    err = 0.0;
                }
                c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
            }
            c.xyz /= c.w;
            c.xyz = clamp(c.xyz, 0.0, 1.0);
            sum += c * k;
        }
        {
            vec2 origCoord = vTransformedCoords_0_Stage0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
            if (err > uDecalParams_Stage2.z) {
                err = 1.0;
            } else if (uDecalParams_Stage2.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        output_Stage2.w = c.w;
        output_Stage2.xyz = clamp(sum.xyz * uGain_Stage2 + uBias_Stage2, 0.0, 1.0);
        output_Stage2.xyz *= output_Stage2.w;
    }
    {
        sk_FragColor = output_Stage2 * output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

