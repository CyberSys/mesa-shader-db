[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform float ubias_Stage1_c0_c0_c0_c0;
uniform float uscale_Stage1_c0_c0_c0_c0;
uniform vec4 uscale0_1_Stage1_c0_c0_c1_c0;
uniform vec4 uscale2_3_Stage1_c0_c0_c1_c0;
uniform vec4 uscale4_5_Stage1_c0_c0_c1_c0;
uniform vec4 ubias0_1_Stage1_c0_c0_c1_c0;
uniform vec4 ubias2_3_Stage1_c0_c0_c1_c0;
uniform vec4 ubias4_5_Stage1_c0_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage1_c0_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage1_c0_c0_c1_c0;
uniform mat4 um_Stage2_c2_c0;
uniform vec4 uv_Stage2_c2_c0;
noperspective in vec2 vTransformedCoords_0_Stage0;
flat in vec4 vcolor_Stage0;
vec4 SweepGradientLayout_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float angle;
    {
        angle = atan(-vTransformedCoords_0_Stage0.y, -vTransformedCoords_0_Stage0.x);
    }
    float t = ((angle * 0.15915493667125702 + 0.5) + ubias_Stage1_c0_c0_c0_c0) * uscale_Stage1_c0_c0_c0_c0;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage1_c0_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage1_c0_c0_c1_c0.x) {
                scale = uscale0_1_Stage1_c0_c0_c1_c0;
                bias = ubias0_1_Stage1_c0_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage1_c0_c0_c1_c0;
                bias = ubias2_3_Stage1_c0_c0_c1_c0;
            }
        } else {
            {
                scale = uscale4_5_Stage1_c0_c0_c1_c0;
                bias = ubias4_5_Stage1_c0_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 TiledGradientEffect_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = SweepGradientLayout_Stage1_c0_c0_c0_c0(vec4(1.0));
    {
        {
            t.x = fract(t.x);
        }
        _output = UnrolledBinaryGradientColorizer_Stage1_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 RGBToHSLFilterEffect_Stage2_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 c = _input;
    vec4 p = c.y < c.z ? vec4(c.zy, -1.0, 0.66666668653488159) : vec4(c.yz, 0.0, -0.3333333432674408);
    vec4 q = c.x < p.x ? vec4(p.x, c.x, p.yw) : vec4(c.x, p.x, p.yz);
    float pmV = q.x;
    float pmC = pmV - min(q.y, q.z);
    float pmL = pmV - pmC * 0.5;
    float H = abs(q.w + (q.y - q.z) / (pmC * 6.0 + 9.9999997473787516e-05));
    float S = pmC / ((c.w + 9.9999997473787516e-05) - abs(pmL * 2.0 - c.w));
    float L = pmL / (c.w + 9.9999997473787516e-05);
    _output = vec4(H, S, L, c.w);
    return _output;
}
vec4 ColorMatrixFragmentProcessor_Stage2_c2_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = _input;
    _output = um_Stage2_c2_c0 * inputColor + uv_Stage2_c2_c0;
    {
        _output.w = clamp(_output.w, 0.0, 1.0);
    }
    return _output;
}
vec4 HSLToRGBFilterEffect_Stage2_c3_c0(vec4 _input) {
    vec4 _output;
    vec3 hsl = _input.xyz;
    float C = (1.0 - abs(2.0 * hsl.z - 1.0)) * hsl.y;
    vec3 p = hsl.xxx + vec3(0.0, 0.66666668653488159, 0.3333333432674408);
    vec3 q = clamp(abs(fract(p) * 6.0 - 3.0) - 1.0, 0.0, 1.0);
    vec3 rgb = (q - 0.5) * C + hsl.z;
    _output = clamp(vec4(rgb, _input.w), 0.0, 1.0);
    _output.xyz *= _output.w;
    return _output;
}
void main() {
    vec4 output_Stage1;
    {
        output_Stage1 = TiledGradientEffect_Stage1_c0_c0(vec4(1.0, 1.0, 1.0, 1.0));
    }
    vec4 output_Stage2;
    {
        output_Stage2 = HSLToRGBFilterEffect_Stage2_c3_c0(ColorMatrixFragmentProcessor_Stage2_c2_c0(RGBToHSLFilterEffect_Stage2_c1_c0(output_Stage1)));
    }
    {
        sk_FragColor = output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 position;
in vec4 color;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
flat out vec4 vcolor_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vcolor_Stage0 = color;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

