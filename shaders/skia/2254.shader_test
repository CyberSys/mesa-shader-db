[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 ucolor0_Stage1_c0_c0;
uniform vec4 ucolor1_Stage1_c0_c0;
uniform vec4 ucolor2_Stage1_c0_c0;
uniform vec4 ucolor3_Stage1_c0_c0;
uniform vec4 ucolor4_Stage1_c0_c0;
uniform vec4 ucolor5_Stage1_c0_c0;
in vec4 vcolor_Stage0;
in vec2 vTransformedCoords_0_Stage0;
vec4 Overdraw_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    _output = _input;
    float alpha = 255.0 * _output.w;
    if (alpha < 0.5) {
        _output = ucolor0_Stage1_c0_c0;
    } else if (alpha < 1.5) {
        _output = ucolor1_Stage1_c0_c0;
    } else if (alpha < 2.5) {
        _output = ucolor2_Stage1_c0_c0;
    } else if (alpha < 3.5) {
        _output = ucolor3_Stage1_c0_c0;
    } else if (alpha < 4.5) {
        _output = ucolor4_Stage1_c0_c0;
    } else {
        _output = ucolor5_Stage1_c0_c0;
    }
    return _output;
}
void main() {
    vec4 output_Stage1;
    {
        output_Stage1 = Overdraw_Stage1_c0_c0(vec4(1.0));
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec4 inColor;
out vec4 vcolor_Stage0;
out vec2 vTransformedCoords_0_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec3 pos3 = uViewM_Stage0 * vec3(inPosition, 1.0);
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos3.x, pos3.y, 0.0, pos3.z);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

