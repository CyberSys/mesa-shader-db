[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 ucircle_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec4 urectH_Stage1_c0_c0_c1_c0_c0_c0;
uniform float uinvSixSigma_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec4 ucircleData_Stage1_c0_c0_c1_c0_c1_c0;
uniform vec2 uScale_Stage1_c1_c0_c0_c0;
uniform vec4 uTexDom_Stage1_c1_c0_c0_c0;
uniform vec3 uDecalParams_Stage1_c1_c0_c0_c0;
uniform float uPixelSize_Stage1_c1_c0_c1_c0;
uniform vec2 uRange_Stage1_c1_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
uniform sampler2D uTextureSampler_3_Stage1;
uniform sampler2D uTextureSampler_4_Stage1;
noperspective in vec4 vcolor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
vec4 CircleEffect_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float d;
    {
        d = (length((ucircle_Stage1_c0_c0_c0_c0_c0_c0.xy - gl_FragCoord.xy) * ucircle_Stage1_c0_c0_c0_c0_c0_c0.w) - 1.0) * ucircle_Stage1_c0_c0_c0_c0_c0_c0.z;
    }
    {
        _output = _input * clamp(d, 0.0, 1.0);
    }
    return _output;
}
vec4 ConfigConversionEffect_Stage1_c0_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = floor(_input * 255.0 + 0.5) / 255.0;
    {
        _output.xyz = floor((_output.xyz * _output.w) * 255.0 + 0.5) / 255.0;
    }
    return _output;
}
float _blend_color_luminance(vec3 color) {
    return dot(vec3(0.30000001192092896, 0.5899999737739563, 0.10999999940395355), color);
}
vec3 _blend_set_color_luminance(vec3 hueSatColor, float alpha, vec3 lumColor) {
    float lum = _blend_color_luminance(lumColor);
    vec3 result = (lum - _blend_color_luminance(hueSatColor)) + hueSatColor;
    float minComp = min(min(result.x, result.y), result.z);
    float maxComp = max(max(result.x, result.y), result.z);
    if (minComp < 0.0 && lum != minComp) {
        result = lum + ((result - lum) * lum) / (lum - minComp);
    }
    if (maxComp > alpha && maxComp != lum) {
        return lum + ((result - lum) * (alpha - lum)) / (maxComp - lum);
    }
    return result;
}
vec4 blend_color(vec4 src, vec4 dst) {
    float alpha = dst.w * src.w;
    vec3 sda = src.xyz * dst.w;
    vec3 dsa = dst.xyz * src.w;
    return vec4((((_blend_set_color_luminance(sda, alpha, dsa) + dst.xyz) - dsa) + src.xyz) - sda, (src.w + dst.w) - alpha);
}
vec4 ComposeTwo_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_color(CircleEffect_Stage1_c0_c0_c0_c0_c0_c0(inputColor), ConfigConversionEffect_Stage1_c0_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 RectBlurEffect_Stage1_c0_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float xCoverage, yCoverage;
    {
        float x, y;
        {
            x = max(urectH_Stage1_c0_c0_c1_c0_c0_c0.x - gl_FragCoord.x, gl_FragCoord.x - urectH_Stage1_c0_c0_c1_c0_c0_c0.z);
            y = max(urectH_Stage1_c0_c0_c1_c0_c0_c0.y - gl_FragCoord.y, gl_FragCoord.y - urectH_Stage1_c0_c0_c1_c0_c0_c0.w);
        }
        xCoverage = texture(uTextureSampler_0_Stage1, vec2(x * uinvSixSigma_Stage1_c0_c0_c1_c0_c0_c0, 0.5)).w;
        yCoverage = texture(uTextureSampler_0_Stage1, vec2(y * uinvSixSigma_Stage1_c0_c0_c1_c0_c0_c0, 0.5)).w;
        _output = (_input * xCoverage) * yCoverage;
    }
    _output = (_input * xCoverage) * yCoverage;
    return _output;
}
vec4 CircleBlurFragmentProcessor_Stage1_c0_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 vec = vec2((gl_FragCoord.x - ucircleData_Stage1_c0_c0_c1_c0_c1_c0.x) * ucircleData_Stage1_c0_c0_c1_c0_c1_c0.w, (gl_FragCoord.y - ucircleData_Stage1_c0_c0_c1_c0_c1_c0.y) * ucircleData_Stage1_c0_c0_c1_c0_c1_c0.w);
    float dist = length(vec) + (0.5 - ucircleData_Stage1_c0_c0_c1_c0_c1_c0.z) * ucircleData_Stage1_c0_c0_c1_c0_c1_c0.w;
    _output = _input * texture(uTextureSampler_1_Stage1, vec2(dist, 0.5)).w;
    return _output;
}
vec4 blend_dst_over(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + dst;
}
vec4 ComposeTwo_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_dst_over(RectBlurEffect_Stage1_c0_c0_c1_c0_c0_c0(inputColor), CircleBlurFragmentProcessor_Stage1_c0_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_multiply(vec4 src, vec4 dst) {
    return vec4(((1.0 - src.w) * dst.xyz + (1.0 - dst.w) * src.xyz) + src.xyz * dst.xyz, src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_multiply(ComposeTwo_Stage1_c0_c0_c0_c0(inputColor), ComposeTwo_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 DisplacementMap_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 dColor = texture(uTextureSampler_2_Stage1, vTransformedCoords_0_Stage0);
    dColor.xyz = dColor.w < 9.9999999747524271e-07 ? vec3(0.0) : clamp(dColor.xyz / dColor.w, 0.0, 1.0);
    vec2 cCoords = vTransformedCoords_1_Stage0 + uScale_Stage1_c1_c0_c0_c0 * (dColor.zz - vec2(0.5));
    {
        vec2 origCoord = cCoords;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_3_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        _output = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    return _output;
}
vec4 Morphology_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_2_Stage0;
    coord.x -= 5.0 * uPixelSize_Stage1_c1_c0_c1_c0;
    for (int i = 0;i < 11; i++) {
        _output = max(_output, texture(uTextureSampler_4_Stage1, coord));
        coord.x += uPixelSize_Stage1_c1_c0_c1_c0;
    }
    _output *= _input;
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_dst_in(DisplacementMap_Stage1_c1_c0_c0_c0(inputColor), Morphology_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
float _blend_overlay_component(float sc, float sa, float dc, float da) {
    if (2.0 * dc <= da) {
        return (2.0 * sc) * dc;
    }
    return sa * da - (2.0 * (da - dc)) * (sa - sc);
}
vec4 blend_overlay(vec4 src, vec4 dst) {
    vec4 result = vec4(_blend_overlay_component(src.x, src.w, dst.x, dst.w), _blend_overlay_component(src.y, src.w, dst.y, dst.w), _blend_overlay_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
    result.xyz += dst.xyz * (1.0 - src.w) + src.xyz * (1.0 - dst.w);
    return result;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_overlay(ComposeTwo_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inLocalCoord;
noperspective out vec4 vcolor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

