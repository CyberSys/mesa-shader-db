[require]
GLSL >= 1.40
GL_KHR_blend_equation_advanced

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec2 uImageIncrement_Stage1_c0_c0;
uniform vec2 uBounds_Stage1_c0_c0;
uniform vec4 uKernel_Stage1_c0_c0[4];
uniform vec2 uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
uniform vec4 uKernel_Stage1_c1_c0_c1_c0_c0_c0[4];
uniform vec4 ucolor_Stage1_c1_c0_c1_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
in vec4 vcolor_Stage0;
in vec2 vTransformedCoords_0_Stage0;
in vec2 vTransformedCoords_1_Stage0;
in vec2 vTransformedCoords_2_Stage0;
vec4 GaussianConvolution_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_0_Stage0 - 7.0 * uImageIncrement_Stage1_c0_c0;
    vec2 coordSampled = vec2(0.0, 0.0);
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c0_c0.x, uBounds_Stage1_c0_c0.y);
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0[0].x;
    coord += uImageIncrement_Stage1_c0_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c0_c0.x, uBounds_Stage1_c0_c0.y);
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0[0].y;
    coord += uImageIncrement_Stage1_c0_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c0_c0.x, uBounds_Stage1_c0_c0.y);
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0[0].z;
    coord += uImageIncrement_Stage1_c0_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c0_c0.x, uBounds_Stage1_c0_c0.y);
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0[0].w;
    coord += uImageIncrement_Stage1_c0_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c0_c0.x, uBounds_Stage1_c0_c0.y);
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0[1].x;
    coord += uImageIncrement_Stage1_c0_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c0_c0.x, uBounds_Stage1_c0_c0.y);
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0[1].y;
    coord += uImageIncrement_Stage1_c0_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c0_c0.x, uBounds_Stage1_c0_c0.y);
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0[1].z;
    coord += uImageIncrement_Stage1_c0_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c0_c0.x, uBounds_Stage1_c0_c0.y);
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0[1].w;
    coord += uImageIncrement_Stage1_c0_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c0_c0.x, uBounds_Stage1_c0_c0.y);
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0[2].x;
    coord += uImageIncrement_Stage1_c0_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c0_c0.x, uBounds_Stage1_c0_c0.y);
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0[2].y;
    coord += uImageIncrement_Stage1_c0_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c0_c0.x, uBounds_Stage1_c0_c0.y);
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0[2].z;
    coord += uImageIncrement_Stage1_c0_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c0_c0.x, uBounds_Stage1_c0_c0.y);
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0[2].w;
    coord += uImageIncrement_Stage1_c0_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c0_c0.x, uBounds_Stage1_c0_c0.y);
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0[3].x;
    coord += uImageIncrement_Stage1_c0_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c0_c0.x, uBounds_Stage1_c0_c0.y);
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0[3].y;
    coord += uImageIncrement_Stage1_c0_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c0_c0.x, uBounds_Stage1_c0_c0.y);
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0[3].z;
    coord += uImageIncrement_Stage1_c0_c0;
    _output *= _input;
    return _output;
}
vec4 TextureEffect_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    _output = texture(uTextureSampler_1_Stage1, vTransformedCoords_1_Stage0) * _input;
    return _output;
}
vec4 GaussianConvolution_Stage1_c1_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_2_Stage0 - 7.0 * uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    vec2 coordSampled = vec2(0.0, 0.0);
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[0].x;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[0].y;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[0].z;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[0].w;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[1].x;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[1].y;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[1].z;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[1].w;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[2].x;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[2].y;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[2].z;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[2].w;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[3].x;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[3].y;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[3].z;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    _output *= _input;
    return _output;
}
vec4 ConstColorProcessor_Stage1_c1_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    {
        _output = _input * ucolor_Stage1_c1_c0_c1_c0_c1_c0;
    }
    return _output;
}
vec4 blend_xor(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + (1.0 - src.w) * dst;
}
vec4 ComposeTwo_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_xor(GaussianConvolution_Stage1_c1_c0_c1_c0_c0_c0(inputColor), ConstColorProcessor_Stage1_c1_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
float _blend_color_luminance(vec3 color) {
    return dot(vec3(0.30000001192092896, 0.5899999737739563, 0.10999999940395355), color);
}
vec3 _blend_set_color_luminance(vec3 hueSatColor, float alpha, vec3 lumColor) {
    float lum = _blend_color_luminance(lumColor);
    vec3 result = (lum - _blend_color_luminance(hueSatColor)) + hueSatColor;
    float minComp = min(min(result.x, result.y), result.z);
    float maxComp = max(max(result.x, result.y), result.z);
    if (minComp < 0.0 && lum != minComp) {
        result = lum + ((result - lum) * lum) / (lum - minComp);
    }
    if (maxComp > alpha && maxComp != lum) {
        return lum + ((result - lum) * (alpha - lum)) / (maxComp - lum);
    }
    return result;
}
vec4 blend_luminosity(vec4 src, vec4 dst) {
    float alpha = dst.w * src.w;
    vec3 sda = src.xyz * dst.w;
    vec3 dsa = dst.xyz * src.w;
    return vec4((((_blend_set_color_luminance(dsa, alpha, sda) + dst.xyz) - dsa) + src.xyz) - sda, (src.w + dst.w) - alpha);
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_luminosity(TextureEffect_Stage1_c1_c0_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_src_out(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_src_out(GaussianConvolution_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
in vec4 inColor;
out vec4 vcolor_Stage0;
out vec2 vTransformedCoords_0_Stage0;
out vec2 vTransformedCoords_1_Stage0;
out vec2 vTransformedCoords_2_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec3 pos3 = uViewM_Stage0 * vec3(inPosition, 1.0);
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos3.x, pos3.y, 0.0, pos3.z);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

