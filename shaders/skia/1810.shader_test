[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 urectH_Stage2;
uniform float uinvSixSigma_Stage2;
uniform vec4 ucolor_Stage3;
uniform vec4 uleftBorderColor_Stage4_c1_c0;
uniform vec4 urightBorderColor_Stage4_c1_c0;
uniform float ubias_Stage4_c1_c0_c0_c0;
uniform float uscale_Stage4_c1_c0_c0_c0;
uniform vec4 uscale0_1_Stage4_c1_c0_c1_c0;
uniform vec4 uscale2_3_Stage4_c1_c0_c1_c0;
uniform vec4 uscale4_5_Stage4_c1_c0_c1_c0;
uniform vec4 ubias0_1_Stage4_c1_c0_c1_c0;
uniform vec4 ubias2_3_Stage4_c1_c0_c1_c0;
uniform vec4 ubias4_5_Stage4_c1_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage4_c1_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage4_c1_c0_c1_c0;
uniform vec4 uellipse_Stage5;
uniform vec4 uinnerRect_Stage6;
uniform vec4 uinvRadiiLTRB_Stage6;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
noperspective in vec2 vEllipseOffsets_Stage0;
noperspective in vec4 vEllipseRadii_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
vec4 ColorTableEffect_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    float nonZeroAlpha = max(_input.w, 9.9999997473787516e-05);
    vec4 coord = vec4(_input.xyz / nonZeroAlpha, nonZeroAlpha);
    coord = coord * 0.9960939884185791 + vec4(0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579);
    _output.w = texture(uTextureSampler_0_Stage1, vec2(coord.w, 0.125)).w;
    _output.x = texture(uTextureSampler_0_Stage1, vec2(coord.x, 0.375)).w;
    _output.y = texture(uTextureSampler_0_Stage1, vec2(coord.y, 0.625)).w;
    _output.z = texture(uTextureSampler_0_Stage1, vec2(coord.z, 0.875)).w;
    _output.xyz *= _output.w;
    return _output;
}
vec4 SweepGradientLayout_Stage4_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float angle;
    {
        angle = atan(-vTransformedCoords_0_Stage0.y, -vTransformedCoords_0_Stage0.x);
    }
    float t = ((angle * 0.15915493667125702 + 0.5) + ubias_Stage4_c1_c0_c0_c0) * uscale_Stage4_c1_c0_c0_c0;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage4_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage4_c1_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage4_c1_c0_c1_c0.x) {
                scale = uscale0_1_Stage4_c1_c0_c1_c0;
                bias = ubias0_1_Stage4_c1_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage4_c1_c0_c1_c0;
                bias = ubias2_3_Stage4_c1_c0_c1_c0;
            }
        } else {
            {
                scale = uscale4_5_Stage4_c1_c0_c1_c0;
                bias = ubias4_5_Stage4_c1_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 ClampedGradientEffect_Stage4_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 t = SweepGradientLayout_Stage4_c1_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage4_c1_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage4_c1_c0;
    } else {
        _output = UnrolledBinaryGradientColorizer_Stage4_c1_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
float _blend_overlay_component(float sc, float sa, float dc, float da) {
    if (2.0 * dc <= da) {
        return (2.0 * sc) * dc;
    }
    return sa * da - (2.0 * (da - dc)) * (sa - sc);
}
vec4 blend_overlay(vec4 src, vec4 dst) {
    vec4 result = vec4(_blend_overlay_component(src.x, src.w, dst.x, dst.w), _blend_overlay_component(src.y, src.w, dst.y, dst.w), _blend_overlay_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
    result.xyz += dst.xyz * (1.0 - src.w) + src.xyz * (1.0 - dst.w);
    return result;
}
vec4 blend_hard_light(vec4 src, vec4 dst) {
    return blend_overlay(dst, src);
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = vinColor_Stage0;
        vec2 offset = vEllipseOffsets_Stage0;
        offset *= vEllipseRadii_Stage0.xy;
        float test = dot(offset, offset) - 1.0;
        vec2 grad = (2.0 * offset) * vEllipseRadii_Stage0.xy;
        float grad_dot = dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        offset = vEllipseOffsets_Stage0 * vEllipseRadii_Stage0.zw;
        test = dot(offset, offset) - 1.0;
        grad = (2.0 * offset) * vEllipseRadii_Stage0.zw;
        grad_dot = dot(grad, grad);
        invlen = inversesqrt(grad_dot);
        edgeAlpha *= clamp(0.5 + test * invlen, 0.0, 1.0);
    }
    vec4 output_Stage1;
    {
        output_Stage1 = blend_hard_light(outputColor_Stage0, ColorTableEffect_Stage1_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage2;
    {
        float xCoverage, yCoverage;
        {
            float x, y;
            {
                x = max(urectH_Stage2.x - gl_FragCoord.x, gl_FragCoord.x - urectH_Stage2.z);
                y = max(urectH_Stage2.y - gl_FragCoord.y, gl_FragCoord.y - urectH_Stage2.w);
            }
            xCoverage = texture(uTextureSampler_0_Stage2, vec2(x * uinvSixSigma_Stage2, 0.5)).w;
            yCoverage = texture(uTextureSampler_0_Stage2, vec2(y * uinvSixSigma_Stage2, 0.5)).w;
            output_Stage2 = (output_Stage1 * xCoverage) * yCoverage;
        }
        output_Stage2 = (output_Stage1 * xCoverage) * yCoverage;
    }
    vec4 output_Stage3;
    {
        {
            output_Stage3 = ucolor_Stage3;
        }
    }
    vec4 output_Stage4;
    {
        output_Stage4 = blend_dst_in(output_Stage3, ClampedGradientEffect_Stage4_c1_c0(vec4(1.0)));
    }
    vec4 output_Stage5;
    {
        vec2 d = gl_FragCoord.xy - uellipse_Stage5.xy;
        vec2 Z = d * uellipse_Stage5.zw;
        float implicit = dot(Z, d) - 1.0;
        float grad_dot = 4.0 * dot(Z, Z);
        {
            grad_dot = max(grad_dot, 1.1754999560161448e-38);
        }
        float approx_dist = implicit * inversesqrt(grad_dot);
        float alpha;
        {
            alpha = clamp(0.5 + approx_dist, 0.0, 1.0);
        }
        output_Stage5 = output_Stage4 * alpha;
    }
    vec4 output_Stage6;
    {
        vec2 dxy0 = uinnerRect_Stage6.xy - gl_FragCoord.xy;
        vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage6.zw;
        vec2 dxy = max(max(dxy0, dxy1), 0.0);
        vec2 Z = max(max(dxy0 * uinvRadiiLTRB_Stage6.xy, dxy1 * uinvRadiiLTRB_Stage6.zw), 0.0);
        float implicit = dot(Z, dxy) - 1.0;
        float grad_dot = 4.0 * dot(Z, Z);
        grad_dot = max(grad_dot, 9.9999997473787516e-05);
        float approx_dist = implicit * inversesqrt(grad_dot);
        float alpha = clamp(0.5 - approx_dist, 0.0, 1.0);
        output_Stage6 = output_Stage5 * alpha;
    }
    {
        sk_FragColor = output_Stage2 * output_Stage6;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffset;
in vec4 inEllipseRadii;
noperspective out vec2 vEllipseOffsets_Stage0;
noperspective out vec4 vEllipseRadii_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vEllipseOffsets_Stage0 = inEllipseOffset;
    vEllipseRadii_Stage0 = inEllipseRadii;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

