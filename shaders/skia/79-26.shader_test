[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uniformColor_Stage1_c0_c0;
uniform sampler2D uTextureSampler_0_Stage1;
noperspective in vec4 vcolor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
vec4 TextureEffect_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    _output = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0) * _input;
    return _output;
}
vec4 OverrideInputFragmentProcessor_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    _output = TextureEffect_Stage1_c0_c0_c0_c0_c0_c0(vec4(1.0, 1.0, 1.0, 1.0));
    return _output;
}
vec4 OverrideInputFragmentProcessor_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 constColor;
    {
        constColor = uniformColor_Stage1_c0_c0;
    }
    _output = OverrideInputFragmentProcessor_Stage1_c0_c0_c0_c0(constColor);
    return _output;
}
vec4 blend_multiply(vec4 src, vec4 dst) {
    return vec4(((1.0 - src.w) * dst.xyz + (1.0 - dst.w) * src.xyz) + src.xyz * dst.xyz, src.w + (1.0 - src.w) * dst.w);
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
    }
    vec4 output_Stage1;
    {
        output_Stage1 = blend_multiply(OverrideInputFragmentProcessor_Stage1_c0_c0(vec4(1.0)), outputColor_Stage0);
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inLocalCoord;
noperspective out vec4 vcolor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

