[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 ucircle_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec4 uboundsUniform_Stage1_c0_c0_c0_c0_c1_c0;
uniform float uxInvZoom_Stage1_c0_c0_c0_c0_c1_c0;
uniform float uyInvZoom_Stage1_c0_c0_c0_c0_c1_c0;
uniform float uxInvInset_Stage1_c0_c0_c0_c0_c1_c0;
uniform float uyInvInset_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec2 uoffset_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec4 uinnerRect_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec4 uinvRadiiLTRB_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec4 ucircle_Stage1_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
noperspective in vec4 vinCircleEdge_Stage0;
noperspective in vec3 vinClipPlane_Stage0;
noperspective in vec3 vinUnionPlane_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
vec4 CircleEffect_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float d;
    {
        d = (1.0 - length((ucircle_Stage1_c0_c0_c0_c0_c0_c0.xy - gl_FragCoord.xy) * ucircle_Stage1_c0_c0_c0_c0_c0_c0.w)) * ucircle_Stage1_c0_c0_c0_c0_c0_c0.z;
    }
    {
        _output = _input * clamp(d, 0.0, 1.0);
    }
    return _output;
}
vec4 MagnifierEffect_Stage1_c0_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_0_Stage0;
    vec2 zoom_coord = uoffset_Stage1_c0_c0_c0_c0_c1_c0 + coord * vec2(uxInvZoom_Stage1_c0_c0_c0_c0_c1_c0, uyInvZoom_Stage1_c0_c0_c0_c0_c1_c0);
    vec2 delta = (coord - uboundsUniform_Stage1_c0_c0_c0_c0_c1_c0.xy) * uboundsUniform_Stage1_c0_c0_c0_c0_c1_c0.zw;
    delta = min(delta, vec2(1.0, 1.0) - delta);
    delta *= vec2(uxInvInset_Stage1_c0_c0_c0_c0_c1_c0, uyInvInset_Stage1_c0_c0_c0_c0_c1_c0);
    float weight = 0.0;
    if (delta.x < 2.0 && delta.y < 2.0) {
        delta = vec2(2.0, 2.0) - delta;
        float dist = length(delta);
        dist = max(2.0 - dist, 0.0);
        weight = min(dist * dist, 1.0);
    } else {
        vec2 delta_squared = delta * delta;
        weight = min(min(delta_squared.x, delta_squared.y), 1.0);
    }
    _output = texture(uTextureSampler_0_Stage1, mix(coord, zoom_coord, weight));
    return _output;
}
float _blend_overlay_component(float sc, float sa, float dc, float da) {
    if (2.0 * dc <= da) {
        return (2.0 * sc) * dc;
    }
    return sa * da - (2.0 * (da - dc)) * (sa - sc);
}
vec4 blend_overlay(vec4 src, vec4 dst) {
    vec4 result = vec4(_blend_overlay_component(src.x, src.w, dst.x, dst.w), _blend_overlay_component(src.y, src.w, dst.y, dst.w), _blend_overlay_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
    result.xyz += dst.xyz * (1.0 - src.w) + src.xyz * (1.0 - dst.w);
    return result;
}
vec4 ComposeTwo_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_overlay(CircleEffect_Stage1_c0_c0_c0_c0_c0_c0(inputColor), MagnifierEffect_Stage1_c0_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 EllipticalRRect_Stage1_c0_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c0_c0_c1_c0_c0_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c0_c0_c1_c0_c0_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    vec2 Z = max(max(dxy0 * uinvRadiiLTRB_Stage1_c0_c0_c1_c0_c0_c0.xy, dxy1 * uinvRadiiLTRB_Stage1_c0_c0_c1_c0_c0_c0.zw), 0.0);
    float implicit = dot(Z, dxy) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    grad_dot = max(grad_dot, 9.9999997473787516e-05);
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha = clamp(0.5 - approx_dist, 0.0, 1.0);
    _output = _input * alpha;
    return _output;
}
vec4 Big_Ole_Key_Stage1_c0_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = _input;
    return _output;
}
vec4 blend_src_atop(vec4 src, vec4 dst) {
    return dst.w * src + (1.0 - src.w) * dst;
}
vec4 ComposeTwo_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_atop(EllipticalRRect_Stage1_c0_c0_c1_c0_c0_c0(inputColor), Big_Ole_Key_Stage1_c0_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_multiply(vec4 src, vec4 dst) {
    return vec4(((1.0 - src.w) * dst.xyz + (1.0 - dst.w) * src.xyz) + src.xyz * dst.xyz, src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_multiply(ComposeTwo_Stage1_c0_c0_c0_c0(inputColor), ComposeTwo_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 CircleEffect_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    float d;
    {
        d = (length((ucircle_Stage1_c1_c0.xy - gl_FragCoord.xy) * ucircle_Stage1_c1_c0.w) - 1.0) * ucircle_Stage1_c1_c0.z;
    }
    {
        _output = _input * clamp(d, 0.0, 1.0);
    }
    return _output;
}
vec4 blend_screen(vec4 src, vec4 dst) {
    return src + (1.0 - src) * dst;
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        vec4 circleEdge;
        circleEdge = vinCircleEdge_Stage0;
        vec3 clipPlane;
        clipPlane = vinClipPlane_Stage0;
        vec3 unionPlane;
        unionPlane = vinUnionPlane_Stage0;
        outputColor_Stage0 = vinColor_Stage0;
        float d = length(circleEdge.xy);
        float distanceToOuterEdge = circleEdge.z * (1.0 - d);
        float edgeAlpha = clamp(distanceToOuterEdge, 0.0, 1.0);
        float clip = clamp(circleEdge.z * dot(circleEdge.xy, clipPlane.xy) + clipPlane.z, 0.0, 1.0);
        clip = clamp(clip + clamp(circleEdge.z * dot(circleEdge.xy, unionPlane.xy) + unionPlane.z, 0.0, 1.0), 0.0, 1.0);
        edgeAlpha *= clip;
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_screen(ComposeTwo_Stage1_c0_c0(inputColor), CircleEffect_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = outputCoverage_Stage0 * output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec4 inCircleEdge;
in vec3 inClipPlane;
in vec3 inUnionPlane;
noperspective out vec4 vinCircleEdge_Stage0;
noperspective out vec3 vinClipPlane_Stage0;
noperspective out vec3 vinUnionPlane_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vinCircleEdge_Stage0 = inCircleEdge;
    vinClipPlane_Stage0 = inClipPlane;
    vinUnionPlane_Stage0 = inUnionPlane;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

