[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform vec4 uinnerRect_Stage1_c0_c0;
uniform vec2 uradiusPlusHalf_Stage1_c0_c0;
uniform vec4 urectUniform_Stage1_c1_c0;
noperspective in vec3 vDashParam_Stage0;
noperspective in vec2 vCircleParams_Stage0;
vec4 CircularRRect_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c0_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c0_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    float alpha = clamp(uradiusPlusHalf_Stage1_c0_c0.x - length(dxy), 0.0, 1.0);
    alpha = 1.0 - alpha;
    _output = _input * alpha;
    return _output;
}
vec4 AARectEffect_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    float alpha;
    {
        alpha = float(all(greaterThan(vec4(gl_FragCoord.xy, urectUniform_Stage1_c1_c0.zw), vec4(urectUniform_Stage1_c1_c0.xy, gl_FragCoord.xy))) ? 1 : 0);
    }
    _output = _input * alpha;
    return _output;
}
float _blend_overlay_component(float sc, float sa, float dc, float da) {
    if (2.0 * dc <= da) {
        return (2.0 * sc) * dc;
    }
    return sa * da - (2.0 * (da - dc)) * (sa - sc);
}
vec4 blend_overlay(vec4 src, vec4 dst) {
    vec4 result = vec4(_blend_overlay_component(src.x, src.w, dst.x, dst.w), _blend_overlay_component(src.y, src.w, dst.y, dst.w), _blend_overlay_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
    result.xyz += dst.xyz * (1.0 - src.w) + src.xyz * (1.0 - dst.w);
    return result;
}
vec4 blend_hard_light(vec4 src, vec4 dst) {
    return blend_overlay(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
        float xShifted = vDashParam_Stage0.x - floor(vDashParam_Stage0.x / vDashParam_Stage0.z) * vDashParam_Stage0.z;
        vec2 fragPosShifted = vec2(xShifted, vDashParam_Stage0.y);
        vec2 center = vec2(vCircleParams_Stage0.y, 0.0);
        float dist = length(center - fragPosShifted);
        float diff = dist - vCircleParams_Stage0.x;
        diff = 1.0 - diff;
        float alpha = clamp(diff, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(alpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_hard_light(CircularRRect_Stage1_c0_c0(inputColor), AARectEffect_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1 * outputCoverage_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
in vec2 inPosition;
in vec3 inDashParams;
in vec2 inCircleParams;
noperspective out vec3 vDashParam_Stage0;
noperspective out vec2 vCircleParams_Stage0;
void main() {
    vDashParam_Stage0 = inDashParams;
    vCircleParams_Stage0 = inCircleParams;
    vec2 pos2 = inPosition;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

