[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uCoordTransformMatrix_2_Stage0;
uniform vec2 uImageIncrement_Stage2;
uniform vec2 uBounds_Stage2;
uniform vec4 uKernel_Stage2[3];
uniform vec4 uboundsUniform_Stage4;
uniform float uxInvZoom_Stage4;
uniform float uyInvZoom_Stage4;
uniform float uxInvInset_Stage4;
uniform float uyInvInset_Stage4;
uniform vec2 uoffset_Stage4;
uniform sampler2D uTextureSampler_0_Stage2;
uniform sampler2D uTextureSampler_0_Stage3;
uniform sampler2D uTextureSampler_0_Stage4;
in vec2 vEllipseOffsets0_Stage0;
in vec2 vEllipseOffsets1_Stage0;
in vec4 vinColor_Stage0;
in vec2 vTransformedCoords_0_Stage0;
in vec2 vTransformedCoords_1_Stage0;
in vec2 vTransformedCoords_3_Stage0;
vec4 ClampFragmentProcessor_Stage1_c0_c0(vec4 _input, vec2 _coords) {
    vec4 _output;
    {
        float alpha = clamp(_input.w, 0.0, 1.0);
        _output = vec4(clamp(_input.xyz, 0.0, alpha), alpha);
    }
    return _output;
}
vec4 TextureEffect_Stage3_c1_c0(vec4 _input, vec2 _coords) {
    _coords = _coords * uCoordTransformMatrix_2_Stage0.xz + uCoordTransformMatrix_2_Stage0.yw;
    vec4 _output;
    _output = texture(uTextureSampler_0_Stage3, _coords) * _input;
    return _output;
}
void main() {
    vec4 outputCoverage_Stage0;
    {
        vec2 scaledOffset = vEllipseOffsets0_Stage0;
        float test = dot(scaledOffset, scaledOffset) - 1.0;
        vec2 duvdx = dFdx(vEllipseOffsets0_Stage0);
        vec2 duvdy = dFdy(vEllipseOffsets0_Stage0);
        vec2 grad = vec2(vEllipseOffsets0_Stage0.x * duvdx.x + vEllipseOffsets0_Stage0.y * duvdx.y, vEllipseOffsets0_Stage0.x * duvdy.x + vEllipseOffsets0_Stage0.y * duvdy.y);
        float grad_dot = 4.0 * dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        scaledOffset = vEllipseOffsets1_Stage0;
        test = dot(scaledOffset, scaledOffset) - 1.0;
        duvdx = dFdx(vEllipseOffsets1_Stage0);
        duvdy = dFdy(vEllipseOffsets1_Stage0);
        grad = vec2(vEllipseOffsets1_Stage0.x * duvdx.x + vEllipseOffsets1_Stage0.y * duvdx.y, vEllipseOffsets1_Stage0.x * duvdy.x + vEllipseOffsets1_Stage0.y * duvdy.y);
        grad_dot = 4.0 * dot(grad, grad);
        invlen = inversesqrt(grad_dot);
        edgeAlpha *= clamp(0.5 + test * invlen, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        output_Stage1 = ClampFragmentProcessor_Stage1_c0_c0(outputCoverage_Stage0, gl_FragCoord.xy);
    }
    vec4 output_Stage2;
    {
        output_Stage2 = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_0_Stage0 - 5.0 * uImageIncrement_Stage2;
        vec2 coordSampled = vec2(0.0, 0.0);
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[0].x;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[0].y;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[0].z;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[0].w;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[1].x;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[1].y;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[1].z;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[1].w;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[2].x;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[2].y;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[2].z;
        coord += uImageIncrement_Stage2;
        output_Stage2 *= output_Stage1;
    }
    {
        vec2 coord = vTransformedCoords_1_Stage0 - vec2(0.5);
        vec2 f = fract(coord);
        coord += 0.5 - f;
        vec4 wx = mat4(0.055555555555555552, 0.88888888888888884, 0.055555555555555552, 0.0, -0.5, 0.0, 0.5, 0.0, 0.83333333333333337, -2.0, 1.5, -0.33333333333333331, -0.3888888888888889, 1.1666666666666667, -1.1666666666666667, 0.3888888888888889) * vec4(1.0, f.x, f.x * f.x, (f.x * f.x) * f.x);
        vec4 wy = mat4(0.055555555555555552, 0.88888888888888884, 0.055555555555555552, 0.0, -0.5, 0.0, 0.5, 0.0, 0.83333333333333337, -2.0, 1.5, -0.33333333333333331, -0.3888888888888889, 1.1666666666666667, -1.1666666666666667, 0.3888888888888889) * vec4(1.0, f.y, f.y * f.y, (f.y * f.y) * f.y);
        vec4 rowColors[4];
        rowColors[0] = TextureEffect_Stage3_c1_c0(vec4(1.0), coord + vec2(-1.0, -1.0));
        rowColors[1] = TextureEffect_Stage3_c1_c0(vec4(1.0), coord + vec2(0.0, -1.0));
        rowColors[2] = TextureEffect_Stage3_c1_c0(vec4(1.0), coord + vec2(1.0, -1.0));
        rowColors[3] = TextureEffect_Stage3_c1_c0(vec4(1.0), coord + vec2(2.0, -1.0));
        vec4 s0 = ((wx.x * rowColors[0] + wx.y * rowColors[1]) + wx.z * rowColors[2]) + wx.w * rowColors[3];
        rowColors[0] = TextureEffect_Stage3_c1_c0(vec4(1.0), coord + vec2(-1.0, 0.0));
        rowColors[1] = TextureEffect_Stage3_c1_c0(vec4(1.0), coord);
        rowColors[2] = TextureEffect_Stage3_c1_c0(vec4(1.0), coord + vec2(1.0, 0.0));
        rowColors[3] = TextureEffect_Stage3_c1_c0(vec4(1.0), coord + vec2(2.0, 0.0));
        vec4 s1 = ((wx.x * rowColors[0] + wx.y * rowColors[1]) + wx.z * rowColors[2]) + wx.w * rowColors[3];
        rowColors[0] = TextureEffect_Stage3_c1_c0(vec4(1.0), coord + vec2(-1.0, 1.0));
        rowColors[1] = TextureEffect_Stage3_c1_c0(vec4(1.0), coord + vec2(0.0, 1.0));
        rowColors[2] = TextureEffect_Stage3_c1_c0(vec4(1.0), coord + vec2(1.0, 1.0));
        rowColors[3] = TextureEffect_Stage3_c1_c0(vec4(1.0), coord + vec2(2.0, 1.0));
        vec4 s2 = ((wx.x * rowColors[0] + wx.y * rowColors[1]) + wx.z * rowColors[2]) + wx.w * rowColors[3];
        rowColors[0] = TextureEffect_Stage3_c1_c0(vec4(1.0), coord + vec2(-1.0, 2.0));
        rowColors[1] = TextureEffect_Stage3_c1_c0(vec4(1.0), coord + vec2(0.0, 2.0));
        rowColors[2] = TextureEffect_Stage3_c1_c0(vec4(1.0), coord + vec2(1.0, 2.0));
        rowColors[3] = TextureEffect_Stage3_c1_c0(vec4(1.0), coord + vec2(2.0, 2.0));
        vec4 s3 = ((wx.x * rowColors[0] + wx.y * rowColors[1]) + wx.z * rowColors[2]) + wx.w * rowColors[3];
        vec4 bicubicColor = ((wy.x * s0 + wy.y * s1) + wy.z * s2) + wy.w * s3;
        bicubicColor.xyz = max(vec3(0.0), min(bicubicColor.xyz, bicubicColor.www));
    }
    vec4 output_Stage4;
    {
        vec2 coord = vTransformedCoords_3_Stage0;
        vec2 zoom_coord = uoffset_Stage4 + coord * vec2(uxInvZoom_Stage4, uyInvZoom_Stage4);
        vec2 delta = (coord - uboundsUniform_Stage4.xy) * uboundsUniform_Stage4.zw;
        delta = min(delta, vec2(1.0, 1.0) - delta);
        delta *= vec2(uxInvInset_Stage4, uyInvInset_Stage4);
        float weight = 0.0;
        if (delta.x < 2.0 && delta.y < 2.0) {
            delta = vec2(2.0, 2.0) - delta;
            float dist = length(delta);
            dist = max(2.0 - dist, 0.0);
            weight = min(dist * dist, 1.0);
        } else {
            vec2 delta_squared = delta * delta;
            weight = min(min(delta_squared.x, delta_squared.y), 1.0);
        }
        output_Stage4 = texture(uTextureSampler_0_Stage4, mix(coord, zoom_coord, weight));
    }
    {
        sk_FragColor = output_Stage4;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffsets0;
in vec2 inEllipseOffsets1;
out vec2 vEllipseOffsets0_Stage0;
out vec2 vEllipseOffsets1_Stage0;
out vec4 vinColor_Stage0;
out vec2 vTransformedCoords_0_Stage0;
out vec2 vTransformedCoords_1_Stage0;
out vec2 vTransformedCoords_3_Stage0;
void main() {
    vEllipseOffsets0_Stage0 = inEllipseOffsets0;
    vEllipseOffsets1_Stage0 = inEllipseOffsets1;
    vinColor_Stage0 = inColor;
    vec3 pos3 = uViewM_Stage0 * vec3(inPosition, 1.0);
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos3.x, pos3.y, 0.0, pos3.z);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

