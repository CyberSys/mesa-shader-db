[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec2 ubaseFrequency_Stage1;
uniform float uz_Stage1;
uniform float uPixelSize_Stage2;
uniform vec2 uRange_Stage2;
uniform vec2 uImageIncrement_Stage3;
uniform vec2 uBounds_Stage3;
uniform vec4 uKernel_Stage3[3];
uniform mat4 um_Stage4;
uniform vec4 uv_Stage4;
uniform vec2 ubaseFrequency_Stage6;
uniform float uz_Stage6;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
uniform sampler2D uTextureSampler_0_Stage3;
uniform sampler2D uTextureSampler_0_Stage6;
uniform sampler2D uTextureSampler_1_Stage6;
noperspective in vec3 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vTransformedCoords_3_Stage0;
noperspective in vec2 vTransformedCoords_4_Stage0;
flat in vec4 vcolor_Stage0;
vec3 fade_Stage1(vec3 t) {
    return ((t * t) * t) * (t * (t * 6.0 - 15.0) + 10.0);
}
float perm_Stage1(float x) {
    return texture(uTextureSampler_0_Stage1, vec2(fract(x / 256.0), 0.0)).x * 255.0;
}
float grad_Stage1(float x, vec3 p) {
    return dot(texture(uTextureSampler_1_Stage1, vec2(fract(x / 16.0), 0.0)).xyz * 255.0 - vec3(1.0), p);
}
float lerp_Stage1(float a, float b, float w) {
    return a + w * (b - a);
}
float noise_Stage1(vec3 p) {
    vec3 P = mod(floor(p), 256.0);
    p -= floor(p);
    vec3 f = fade_Stage1(p);
    float A = perm_Stage1(P.x) + P.y;
    float AA = perm_Stage1(A) + P.z;
    float AB = perm_Stage1(A + 1.0) + P.z;
    float B = perm_Stage1(P.x + 1.0) + P.y;
    float BA = perm_Stage1(B) + P.z;
    float BB = perm_Stage1(B + 1.0) + P.z;
    float result = lerp_Stage1(lerp_Stage1(lerp_Stage1(grad_Stage1(perm_Stage1(AA), p), grad_Stage1(perm_Stage1(BA), p + vec3(-1.0, 0.0, 0.0)), f.x), lerp_Stage1(grad_Stage1(perm_Stage1(AB), p + vec3(0.0, -1.0, 0.0)), grad_Stage1(perm_Stage1(BB), p + vec3(-1.0, -1.0, 0.0)), f.x), f.y), lerp_Stage1(lerp_Stage1(grad_Stage1(perm_Stage1(AA + 1.0), p + vec3(0.0, 0.0, -1.0)), grad_Stage1(perm_Stage1(BA + 1.0), p + vec3(-1.0, 0.0, -1.0)), f.x), lerp_Stage1(grad_Stage1(perm_Stage1(AB + 1.0), p + vec3(0.0, -1.0, -1.0)), grad_Stage1(perm_Stage1(BB + 1.0), p + vec3(-1.0, -1.0, -1.0)), f.x), f.y), f.z);
    return result;
}
float noiseOctaves_Stage1(vec3 p) {
    float result = 0.0;
    float ratio = 1.0;
    for (float i = 0.0;i < 9.0; i++) {
        result += noise_Stage1(p) / ratio;
        p *= 2.0;
        ratio *= 2.0;
    }
    return (result + 1.0) / 2.0;
}
vec3 fade_Stage6(vec3 t) {
    return ((t * t) * t) * (t * (t * 6.0 - 15.0) + 10.0);
}
float perm_Stage6(float x) {
    return texture(uTextureSampler_0_Stage6, vec2(fract(x / 256.0), 0.0)).x * 255.0;
}
float grad_Stage6(float x, vec3 p) {
    return dot(texture(uTextureSampler_1_Stage6, vec2(fract(x / 16.0), 0.0)).xyz * 255.0 - vec3(1.0), p);
}
float lerp_Stage6(float a, float b, float w) {
    return a + w * (b - a);
}
float noise_Stage6(vec3 p) {
    vec3 P = mod(floor(p), 256.0);
    p -= floor(p);
    vec3 f = fade_Stage6(p);
    float A = perm_Stage6(P.x) + P.y;
    float AA = perm_Stage6(A) + P.z;
    float AB = perm_Stage6(A + 1.0) + P.z;
    float B = perm_Stage6(P.x + 1.0) + P.y;
    float BA = perm_Stage6(B) + P.z;
    float BB = perm_Stage6(B + 1.0) + P.z;
    float result = lerp_Stage6(lerp_Stage6(lerp_Stage6(grad_Stage6(perm_Stage6(AA), p), grad_Stage6(perm_Stage6(BA), p + vec3(-1.0, 0.0, 0.0)), f.x), lerp_Stage6(grad_Stage6(perm_Stage6(AB), p + vec3(0.0, -1.0, 0.0)), grad_Stage6(perm_Stage6(BB), p + vec3(-1.0, -1.0, 0.0)), f.x), f.y), lerp_Stage6(lerp_Stage6(grad_Stage6(perm_Stage6(AA + 1.0), p + vec3(0.0, 0.0, -1.0)), grad_Stage6(perm_Stage6(BA + 1.0), p + vec3(-1.0, 0.0, -1.0)), f.x), lerp_Stage6(grad_Stage6(perm_Stage6(AB + 1.0), p + vec3(0.0, -1.0, -1.0)), grad_Stage6(perm_Stage6(BB + 1.0), p + vec3(-1.0, -1.0, -1.0)), f.x), f.y), f.z);
    return result;
}
float noiseOctaves_Stage6(vec3 p) {
    float result = 0.0;
    float ratio = 1.0;
    for (float i = 0.0;i < 2.0; i++) {
        result += noise_Stage6(p) / ratio;
        p *= 2.0;
        ratio *= 2.0;
    }
    return (result + 1.0) / 2.0;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec2 vTransformedCoords_0_Stage0_ensure2D = vTransformedCoords_0_Stage0.xy / vTransformedCoords_0_Stage0.z;
        vec2 coords = vTransformedCoords_0_Stage0_ensure2D * ubaseFrequency_Stage1;
        float r = noiseOctaves_Stage1(vec3(coords, uz_Stage1));
        float g = noiseOctaves_Stage1(vec3(coords, uz_Stage1));
        float b = noiseOctaves_Stage1(vec3(coords, uz_Stage1));
        float a = noiseOctaves_Stage1(vec3(coords, uz_Stage1));
        output_Stage1 = vec4(r, g, b, a);
        output_Stage1 = clamp(output_Stage1, 0.0, 1.0);
        output_Stage1 = vec4(output_Stage1.xyz * output_Stage1.www, output_Stage1.w);
    }
    vec4 output_Stage2;
    {
        output_Stage2 = vec4(1.0, 1.0, 1.0, 1.0);
        vec2 coord = vTransformedCoords_1_Stage0;
        coord.x -= 2.0 * uPixelSize_Stage2;
        for (int i = 0;i < 5; i++) {
            output_Stage2 = min(output_Stage2, texture(uTextureSampler_0_Stage2, coord));
            coord.x += uPixelSize_Stage2;
        }
        output_Stage2 *= output_Stage1;
    }
    vec4 output_Stage3;
    {
        output_Stage3 = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_2_Stage0 - 4.0 * uImageIncrement_Stage3;
        vec2 coordSampled = vec2(0.0, 0.0);
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage3.x, uBounds_Stage3.y - uBounds_Stage3.x) + uBounds_Stage3.x;
        output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[0].x;
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage3.x, uBounds_Stage3.y - uBounds_Stage3.x) + uBounds_Stage3.x;
        output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[0].y;
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage3.x, uBounds_Stage3.y - uBounds_Stage3.x) + uBounds_Stage3.x;
        output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[0].z;
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage3.x, uBounds_Stage3.y - uBounds_Stage3.x) + uBounds_Stage3.x;
        output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[0].w;
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage3.x, uBounds_Stage3.y - uBounds_Stage3.x) + uBounds_Stage3.x;
        output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[1].x;
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage3.x, uBounds_Stage3.y - uBounds_Stage3.x) + uBounds_Stage3.x;
        output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[1].y;
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage3.x, uBounds_Stage3.y - uBounds_Stage3.x) + uBounds_Stage3.x;
        output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[1].z;
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage3.x, uBounds_Stage3.y - uBounds_Stage3.x) + uBounds_Stage3.x;
        output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[1].w;
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage3.x, uBounds_Stage3.y - uBounds_Stage3.x) + uBounds_Stage3.x;
        output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[2].x;
        coord += uImageIncrement_Stage3;
        output_Stage3 *= output_Stage2;
    }
    vec4 output_Stage4;
    {
        vec4 inputColor = output_Stage3;
        {
            float nonZeroAlpha = max(inputColor.w, 9.9999997473787516e-05);
            inputColor = vec4(inputColor.xyz / nonZeroAlpha, inputColor.w);
        }
        output_Stage4 = um_Stage4 * inputColor + uv_Stage4;
        {
            output_Stage4 = clamp(output_Stage4, 0.0, 1.0);
        }
    }
    vec4 output_Stage5;
    {
        output_Stage5 = output_Stage4;
        float value;
        {
            uint x = uint(vTransformedCoords_3_Stage0.x);
            uint y = uint(vTransformedCoords_3_Stage0.y);
            uint m = (((((y & 1u) << 5u | (x & 1u) << 4u) | (y & 2u) << 2u) | (x & 2u) << 1u) | (y & 4u) >> 1u) | (x & 4u) >> 2u;
            value = float(m) / 64.0 - 0.4921875;
        }
        output_Stage5 = vec4(clamp(output_Stage5.xyz + value * 0.0039215688593685627, 0.0, output_Stage5.w), output_Stage5.w);
    }
    vec4 output_Stage6;
    {
        vec2 coords = vTransformedCoords_4_Stage0 * ubaseFrequency_Stage6;
        float r = noiseOctaves_Stage6(vec3(coords, uz_Stage6));
        float g = noiseOctaves_Stage6(vec3(coords, uz_Stage6));
        float b = noiseOctaves_Stage6(vec3(coords, uz_Stage6));
        float a = noiseOctaves_Stage6(vec3(coords, uz_Stage6));
        output_Stage6 = vec4(r, g, b, a);
        output_Stage6 = clamp(output_Stage6, 0.0, 1.0);
        output_Stage6 = vec4(output_Stage6.xyz * output_Stage6.www, output_Stage6.w);
    }
    {
        sk_FragColor = output_Stage6 * outputColor_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
uniform mat3 uCoordTransformMatrix_4_Stage0;
in vec2 position;
in vec4 color;
in vec2 localCoord;
noperspective out vec3 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vTransformedCoords_3_Stage0;
noperspective out vec2 vTransformedCoords_4_Stage0;
flat out vec4 vcolor_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0);
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_4_Stage0 = (uCoordTransformMatrix_4_Stage0 * vec3(localCoord, 1.0)).xy;
    vcolor_Stage0 = color;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

