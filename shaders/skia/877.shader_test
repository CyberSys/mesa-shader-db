[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 urectH_Stage1_c0_c0_c0_c0_c0_c0;
uniform float uinvSixSigma_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec3 uedges_Stage1_c0_c0_c0_c0_c1_c0[8];
uniform vec4 urectH_Stage1_c0_c0_c1_c0_c1_c0;
uniform float uinvSixSigma_Stage1_c0_c0_c1_c0_c1_c0;
uniform mat4 um_Stage1_c1_c0_c0_c0;
uniform vec4 uv_Stage1_c1_c0_c0_c0;
uniform vec4 ucircleData_Stage1_c1_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
uniform sampler2D uTextureSampler_3_Stage1;
noperspective in vec4 vinCircleEdge_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
vec4 RectBlurEffect_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float xCoverage, yCoverage;
    {
        float x, y;
        {
            x = max(urectH_Stage1_c0_c0_c0_c0_c0_c0.x - gl_FragCoord.x, gl_FragCoord.x - urectH_Stage1_c0_c0_c0_c0_c0_c0.z);
            y = max(urectH_Stage1_c0_c0_c0_c0_c0_c0.y - gl_FragCoord.y, gl_FragCoord.y - urectH_Stage1_c0_c0_c0_c0_c0_c0.w);
        }
        xCoverage = texture(uTextureSampler_0_Stage1, vec2(x * uinvSixSigma_Stage1_c0_c0_c0_c0_c0_c0, 0.5)).w;
        yCoverage = texture(uTextureSampler_0_Stage1, vec2(y * uinvSixSigma_Stage1_c0_c0_c0_c0_c0_c0, 0.5)).w;
        _output = (_input * xCoverage) * yCoverage;
    }
    _output = (_input * xCoverage) * yCoverage;
    return _output;
}
vec4 ConvexPoly_Stage1_c0_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float alpha = 1.0;
    float edge;
    edge = dot(uedges_Stage1_c0_c0_c0_c0_c1_c0[0], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage1_c0_c0_c0_c0_c1_c0[1], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage1_c0_c0_c0_c0_c1_c0[2], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage1_c0_c0_c0_c0_c1_c0[3], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage1_c0_c0_c0_c0_c1_c0[4], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage1_c0_c0_c0_c0_c1_c0[5], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage1_c0_c0_c0_c0_c1_c0[6], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage1_c0_c0_c0_c0_c1_c0[7], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    alpha = 1.0 - alpha;
    _output = _input * alpha;
    return _output;
}
vec4 blend_dst_out(vec4 src, vec4 dst) {
    return (1.0 - src.w) * dst;
}
vec4 ComposeTwo_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_dst_out(RectBlurEffect_Stage1_c0_c0_c0_c0_c0_c0(inputColor), ConvexPoly_Stage1_c0_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 TextureEffect_Stage1_c0_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    _output = texture(uTextureSampler_1_Stage1, vTransformedCoords_0_Stage0) * _input;
    return _output;
}
vec4 RectBlurEffect_Stage1_c0_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float xCoverage, yCoverage;
    {
        float x, y;
        {
            x = max(urectH_Stage1_c0_c0_c1_c0_c1_c0.x - gl_FragCoord.x, gl_FragCoord.x - urectH_Stage1_c0_c0_c1_c0_c1_c0.z);
            y = max(urectH_Stage1_c0_c0_c1_c0_c1_c0.y - gl_FragCoord.y, gl_FragCoord.y - urectH_Stage1_c0_c0_c1_c0_c1_c0.w);
        }
        xCoverage = texture(uTextureSampler_2_Stage1, vec2(x * uinvSixSigma_Stage1_c0_c0_c1_c0_c1_c0, 0.5)).w;
        yCoverage = texture(uTextureSampler_2_Stage1, vec2(y * uinvSixSigma_Stage1_c0_c0_c1_c0_c1_c0, 0.5)).w;
        _output = (_input * xCoverage) * yCoverage;
    }
    _output = (_input * xCoverage) * yCoverage;
    return _output;
}
float _guarded_divide(float n, float d) {
    return n / d;
}
float _color_dodge_component(float sc, float sa, float dc, float da) {
    if (dc == 0.0) {
        return sc * (1.0 - da);
    } else {
        float d = sa - sc;
        if (d == 0.0) {
            return (sa * da + sc * (1.0 - da)) + dc * (1.0 - sa);
        }
        d = min(da, _guarded_divide(dc * sa, d));
        return (d * sa + sc * (1.0 - da)) + dc * (1.0 - sa);
    }
}
vec4 blend_color_dodge(vec4 src, vec4 dst) {
    return vec4(_color_dodge_component(src.x, src.w, dst.x, dst.w), _color_dodge_component(src.y, src.w, dst.y, dst.w), _color_dodge_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_color_dodge(TextureEffect_Stage1_c0_c0_c1_c0_c0_c0(inputColor), RectBlurEffect_Stage1_c0_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
float _color_burn_component(float sc, float sa, float dc, float da) {
    if (da == dc) {
        return (sa * da + sc * (1.0 - da)) + dc * (1.0 - sa);
    } else if (sc == 0.0) {
        return dc * (1.0 - sa);
    }
    float d = max(0.0, da - _guarded_divide((da - dc) * sa, sc));
    return (d * sa + sc * (1.0 - da)) + dc * (1.0 - sa);
}
vec4 blend_color_burn(vec4 src, vec4 dst) {
    return vec4(_color_burn_component(src.x, src.w, dst.x, dst.w), _color_burn_component(src.y, src.w, dst.y, dst.w), _color_burn_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_color_burn(ComposeTwo_Stage1_c0_c0_c0_c0(inputColor), ComposeTwo_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ColorMatrixFragmentProcessor_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = _input;
    {
        float nonZeroAlpha = max(inputColor.w, 9.9999997473787516e-05);
        inputColor = vec4(inputColor.xyz / nonZeroAlpha, inputColor.w);
    }
    _output = um_Stage1_c1_c0_c0_c0 * inputColor + uv_Stage1_c1_c0_c0_c0;
    {
        _output = clamp(_output, 0.0, 1.0);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 CircleBlurFragmentProcessor_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 vec = vec2((gl_FragCoord.x - ucircleData_Stage1_c1_c0_c1_c0.x) * ucircleData_Stage1_c1_c0_c1_c0.w, (gl_FragCoord.y - ucircleData_Stage1_c1_c0_c1_c0.y) * ucircleData_Stage1_c1_c0_c1_c0.w);
    float dist = length(vec) + (0.5 - ucircleData_Stage1_c1_c0_c1_c0.z) * ucircleData_Stage1_c1_c0_c1_c0.w;
    _output = _input * texture(uTextureSampler_3_Stage1, vec2(dist, 0.5)).w;
    return _output;
}
float _blend_overlay_component(float sc, float sa, float dc, float da) {
    if (2.0 * dc <= da) {
        return (2.0 * sc) * dc;
    }
    return sa * da - (2.0 * (da - dc)) * (sa - sc);
}
vec4 blend_overlay(vec4 src, vec4 dst) {
    vec4 result = vec4(_blend_overlay_component(src.x, src.w, dst.x, dst.w), _blend_overlay_component(src.y, src.w, dst.y, dst.w), _blend_overlay_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
    result.xyz += dst.xyz * (1.0 - src.w) + src.xyz * (1.0 - dst.w);
    return result;
}
vec4 blend_hard_light(vec4 src, vec4 dst) {
    return blend_overlay(dst, src);
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_hard_light(ColorMatrixFragmentProcessor_Stage1_c1_c0_c0_c0(inputColor), CircleBlurFragmentProcessor_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        vec4 circleEdge;
        circleEdge = vinCircleEdge_Stage0;
        outputColor_Stage0 = vinColor_Stage0;
        float d = length(circleEdge.xy);
        float distanceToOuterEdge = circleEdge.z * (1.0 - d);
        float edgeAlpha = clamp(distanceToOuterEdge, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_color_dodge(ComposeTwo_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1 * outputCoverage_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec4 inCircleEdge;
noperspective out vec4 vinCircleEdge_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vinCircleEdge_Stage0 = inCircleEdge;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

