[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform mat3 uCoordTransformMatrix_3_Stage0;
uniform vec2 uImageIncrement_Stage1;
uniform float uSurfaceScale_Stage1;
uniform vec3 uLightColor_Stage1;
uniform float uKD_Stage1;
uniform vec4 uTexDom_Stage1;
uniform vec3 uDecalParams_Stage1;
uniform vec3 uLightDirection_Stage1;
uniform vec2 ufocalParams_Stage2_c0_c0_c0_c0;
uniform vec4 uscale0_1_Stage2_c0_c0_c1_c0;
uniform vec4 uscale2_3_Stage2_c0_c0_c1_c0;
uniform vec4 uscale4_5_Stage2_c0_c0_c1_c0;
uniform vec4 uscale6_7_Stage2_c0_c0_c1_c0;
uniform vec4 ubias0_1_Stage2_c0_c0_c1_c0;
uniform vec4 ubias2_3_Stage2_c0_c0_c1_c0;
uniform vec4 ubias4_5_Stage2_c0_c0_c1_c0;
uniform vec4 ubias6_7_Stage2_c0_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage2_c0_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage2_c0_c0_c1_c0;
uniform vec4 ucircleData_Stage3;
uniform vec4 uinnerRect_Stage4;
uniform vec2 uradiusPlusHalf_Stage4;
uniform vec2 ubaseFrequency_Stage5_c1_c0;
uniform float uz_Stage5_c1_c0;
uniform float ucornerRadius_Stage6;
uniform vec4 uproxyRect_Stage6;
uniform float ublurRadius_Stage6;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage3;
uniform sampler2D uTextureSampler_0_Stage5;
uniform sampler2D uTextureSampler_1_Stage5;
uniform sampler2D uTextureSampler_0_Stage6;
noperspective in vec4 vinCircleEdge_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
vec4 light_Stage1(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    float colorScale = uKD_Stage1 * dot(normal, surfaceToLight);
    return vec4(lightColor * clamp(colorScale, 0.0, 1.0), 1.0);
}
float sobel_Stage1(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage1(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage1(float m[9], float surfaceScale) {
    return pointToNormal_Stage1(sobel_Stage1(0.0, 0.0, m[4], m[5], m[7], m[8], 0.66666698455810547), sobel_Stage1(0.0, 0.0, m[4], m[7], m[5], m[8], 0.66666698455810547), surfaceScale);
}
vec4 TwoPointConicalGradientLayout_Stage2_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 p = vTransformedCoords_1_Stage0;
    float t = -1.0;
    {
        {
            float r0 = ufocalParams_Stage2_c0_c0_c0_c0.x;
            {
                t = -length(p) - r0;
            }
        }
    }
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage2_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.x) {
                scale = uscale0_1_Stage2_c0_c0_c1_c0;
                bias = ubias0_1_Stage2_c0_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage2_c0_c0_c1_c0;
                bias = ubias2_3_Stage2_c0_c0_c1_c0;
            }
        } else {
            if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.z) {
                scale = uscale4_5_Stage2_c0_c0_c1_c0;
                bias = ubias4_5_Stage2_c0_c0_c1_c0;
            } else {
                scale = uscale6_7_Stage2_c0_c0_c1_c0;
                bias = ubias6_7_Stage2_c0_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 TiledGradientEffect_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = TwoPointConicalGradientLayout_Stage2_c0_c0_c0_c0(vec4(1.0));
    if (t.y < 0.0) {
        _output = vec4(0.0);
    } else {
        {
            float t_1 = t.x - 1.0;
            float tiled_t = (t_1 - 2.0 * floor(t_1 * 0.5)) - 1.0;
            t.x = abs(tiled_t);
        }
        _output = UnrolledBinaryGradientColorizer_Stage2_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec3 fade_Stage5_c1_c0(vec3 t) {
    return ((t * t) * t) * (t * (t * 6.0 - 15.0) + 10.0);
}
float perm_Stage5_c1_c0(float x) {
    return texture(uTextureSampler_0_Stage5, vec2(fract(x / 256.0), 0.0)).x * 255.0;
}
float grad_Stage5_c1_c0(float x, vec3 p) {
    return dot(texture(uTextureSampler_1_Stage5, vec2(fract(x / 16.0), 0.0)).xyz * 255.0 - vec3(1.0), p);
}
float lerp_Stage5_c1_c0(float a, float b, float w) {
    return a + w * (b - a);
}
float noise_Stage5_c1_c0(vec3 p) {
    vec3 P = mod(floor(p), 256.0);
    p -= floor(p);
    vec3 f = fade_Stage5_c1_c0(p);
    float A = perm_Stage5_c1_c0(P.x) + P.y;
    float AA = perm_Stage5_c1_c0(A) + P.z;
    float AB = perm_Stage5_c1_c0(A + 1.0) + P.z;
    float B = perm_Stage5_c1_c0(P.x + 1.0) + P.y;
    float BA = perm_Stage5_c1_c0(B) + P.z;
    float BB = perm_Stage5_c1_c0(B + 1.0) + P.z;
    float result = lerp_Stage5_c1_c0(lerp_Stage5_c1_c0(lerp_Stage5_c1_c0(grad_Stage5_c1_c0(perm_Stage5_c1_c0(AA), p), grad_Stage5_c1_c0(perm_Stage5_c1_c0(BA), p + vec3(-1.0, 0.0, 0.0)), f.x), lerp_Stage5_c1_c0(grad_Stage5_c1_c0(perm_Stage5_c1_c0(AB), p + vec3(0.0, -1.0, 0.0)), grad_Stage5_c1_c0(perm_Stage5_c1_c0(BB), p + vec3(-1.0, -1.0, 0.0)), f.x), f.y), lerp_Stage5_c1_c0(lerp_Stage5_c1_c0(grad_Stage5_c1_c0(perm_Stage5_c1_c0(AA + 1.0), p + vec3(0.0, 0.0, -1.0)), grad_Stage5_c1_c0(perm_Stage5_c1_c0(BA + 1.0), p + vec3(-1.0, 0.0, -1.0)), f.x), lerp_Stage5_c1_c0(grad_Stage5_c1_c0(perm_Stage5_c1_c0(AB + 1.0), p + vec3(0.0, -1.0, -1.0)), grad_Stage5_c1_c0(perm_Stage5_c1_c0(BB + 1.0), p + vec3(-1.0, -1.0, -1.0)), f.x), f.y), f.z);
    return result;
}
float noiseOctaves_Stage5_c1_c0(vec3 p) {
    float result = 0.0;
    float ratio = 1.0;
    for (float i = 0.0;i < 5.0; i++) {
        result += noise_Stage5_c1_c0(p) / ratio;
        p *= 2.0;
        ratio *= 2.0;
    }
    return (result + 1.0) / 2.0;
}
vec4 ImprovedPerlinNoise_Stage5_c1_c0(vec4 _input, vec2 _coords) {
    _coords = (uCoordTransformMatrix_3_Stage0 * vec3(_coords, 1.0)).xy;
    vec4 _output;
    vec2 coords = _coords * ubaseFrequency_Stage5_c1_c0;
    float r = noiseOctaves_Stage5_c1_c0(vec3(coords, uz_Stage5_c1_c0));
    float g = noiseOctaves_Stage5_c1_c0(vec3(coords, uz_Stage5_c1_c0));
    float b = noiseOctaves_Stage5_c1_c0(vec3(coords, uz_Stage5_c1_c0));
    float a = noiseOctaves_Stage5_c1_c0(vec3(coords, uz_Stage5_c1_c0));
    _output = vec4(r, g, b, a);
    _output = clamp(_output, 0.0, 1.0);
    _output = vec4(_output.xyz * _output.www, _output.w);
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        vec4 circleEdge;
        circleEdge = vinCircleEdge_Stage0;
        outputColor_Stage0 = vinColor_Stage0;
        float d = length(circleEdge.xy);
        float distanceToOuterEdge = circleEdge.z * (1.0 - d);
        float edgeAlpha = clamp(distanceToOuterEdge, 0.0, 1.0);
        float distanceToInnerEdge = circleEdge.z * (d - circleEdge.w);
        float innerAlpha = clamp(distanceToInnerEdge, 0.0, 1.0);
        edgeAlpha *= innerAlpha;
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec2 coord = vTransformedCoords_0_Stage0;
        float m[9];
        vec4 temp0;
        {
            vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage1;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1.xy, uTexDom_Stage1.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1.y);
            if (err > uDecalParams_Stage1.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1.z < 1.0) {
                err = 0.0;
            }
            temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[0] = temp0.w;
        vec4 temp1;
        {
            vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage1;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1.xy, uTexDom_Stage1.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1.y);
            if (err > uDecalParams_Stage1.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1.z < 1.0) {
                err = 0.0;
            }
            temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[1] = temp1.w;
        vec4 temp2;
        {
            vec2 origCoord = coord + uImageIncrement_Stage1;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1.xy, uTexDom_Stage1.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1.y);
            if (err > uDecalParams_Stage1.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1.z < 1.0) {
                err = 0.0;
            }
            temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[2] = temp2.w;
        vec4 temp3;
        {
            vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage1;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1.xy, uTexDom_Stage1.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1.y);
            if (err > uDecalParams_Stage1.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1.z < 1.0) {
                err = 0.0;
            }
            temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[3] = temp3.w;
        vec4 temp4;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1.xy, uTexDom_Stage1.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1.y);
            if (err > uDecalParams_Stage1.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1.z < 1.0) {
                err = 0.0;
            }
            temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[4] = temp4.w;
        vec4 temp5;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1.xy, uTexDom_Stage1.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1.y);
            if (err > uDecalParams_Stage1.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1.z < 1.0) {
                err = 0.0;
            }
            temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[5] = temp5.w;
        vec4 temp6;
        {
            vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage1;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1.xy, uTexDom_Stage1.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1.y);
            if (err > uDecalParams_Stage1.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1.z < 1.0) {
                err = 0.0;
            }
            temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[6] = temp6.w;
        vec4 temp7;
        {
            vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage1;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1.xy, uTexDom_Stage1.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1.y);
            if (err > uDecalParams_Stage1.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1.z < 1.0) {
                err = 0.0;
            }
            temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[7] = temp7.w;
        vec4 temp8;
        {
            vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage1;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1.xy, uTexDom_Stage1.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1.y);
            if (err > uDecalParams_Stage1.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1.z < 1.0) {
                err = 0.0;
            }
            temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[8] = temp8.w;
        vec3 surfaceToLight = uLightDirection_Stage1;
        output_Stage1 = light_Stage1(normal_Stage1(m, uSurfaceScale_Stage1), surfaceToLight, uLightColor_Stage1);
        output_Stage1 *= outputColor_Stage0;
    }
    vec4 output_Stage2;
    {
        output_Stage2 = blend_dst_in(output_Stage1, TiledGradientEffect_Stage2_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage3;
    {
        vec2 vec = vec2((gl_FragCoord.x - ucircleData_Stage3.x) * ucircleData_Stage3.w, (gl_FragCoord.y - ucircleData_Stage3.y) * ucircleData_Stage3.w);
        float dist = length(vec) + (0.5 - ucircleData_Stage3.z) * ucircleData_Stage3.w;
        output_Stage3 = output_Stage2 * texture(uTextureSampler_0_Stage3, vec2(dist, 0.5)).w;
    }
    vec4 output_Stage4;
    {
        vec2 dxy0 = uinnerRect_Stage4.xy - gl_FragCoord.xy;
        vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage4.zw;
        vec2 dxy = max(max(dxy0, dxy1), 0.0);
        float alpha = clamp(uradiusPlusHalf_Stage4.x - length(dxy), 0.0, 1.0);
        alpha = 1.0 - alpha;
        output_Stage4 = output_Stage3 * alpha;
    }
    vec4 output_Stage5;
    {
        vec2 coord = vTransformedCoords_2_Stage0 - vec2(0.5);
        vec2 f = fract(coord);
        coord += 0.5 - f;
        vec4 wx = mat4(0.055555555555555552, 0.88888888888888884, 0.055555555555555552, 0.0, -0.5, 0.0, 0.5, 0.0, 0.83333333333333337, -2.0, 1.5, -0.33333333333333331, -0.3888888888888889, 1.1666666666666667, -1.1666666666666667, 0.3888888888888889) * vec4(1.0, f.x, f.x * f.x, (f.x * f.x) * f.x);
        vec4 wy = mat4(0.055555555555555552, 0.88888888888888884, 0.055555555555555552, 0.0, -0.5, 0.0, 0.5, 0.0, 0.83333333333333337, -2.0, 1.5, -0.33333333333333331, -0.3888888888888889, 1.1666666666666667, -1.1666666666666667, 0.3888888888888889) * vec4(1.0, f.y, f.y * f.y, (f.y * f.y) * f.y);
        vec4 rowColors[4];
        rowColors[0] = ImprovedPerlinNoise_Stage5_c1_c0(vec4(1.0), coord + vec2(-1.0, -1.0));
        rowColors[1] = ImprovedPerlinNoise_Stage5_c1_c0(vec4(1.0), coord + vec2(0.0, -1.0));
        rowColors[2] = ImprovedPerlinNoise_Stage5_c1_c0(vec4(1.0), coord + vec2(1.0, -1.0));
        rowColors[3] = ImprovedPerlinNoise_Stage5_c1_c0(vec4(1.0), coord + vec2(2.0, -1.0));
        vec4 s0 = ((wx.x * rowColors[0] + wx.y * rowColors[1]) + wx.z * rowColors[2]) + wx.w * rowColors[3];
        rowColors[0] = ImprovedPerlinNoise_Stage5_c1_c0(vec4(1.0), coord + vec2(-1.0, 0.0));
        rowColors[1] = ImprovedPerlinNoise_Stage5_c1_c0(vec4(1.0), coord);
        rowColors[2] = ImprovedPerlinNoise_Stage5_c1_c0(vec4(1.0), coord + vec2(1.0, 0.0));
        rowColors[3] = ImprovedPerlinNoise_Stage5_c1_c0(vec4(1.0), coord + vec2(2.0, 0.0));
        vec4 s1 = ((wx.x * rowColors[0] + wx.y * rowColors[1]) + wx.z * rowColors[2]) + wx.w * rowColors[3];
        rowColors[0] = ImprovedPerlinNoise_Stage5_c1_c0(vec4(1.0), coord + vec2(-1.0, 1.0));
        rowColors[1] = ImprovedPerlinNoise_Stage5_c1_c0(vec4(1.0), coord + vec2(0.0, 1.0));
        rowColors[2] = ImprovedPerlinNoise_Stage5_c1_c0(vec4(1.0), coord + vec2(1.0, 1.0));
        rowColors[3] = ImprovedPerlinNoise_Stage5_c1_c0(vec4(1.0), coord + vec2(2.0, 1.0));
        vec4 s2 = ((wx.x * rowColors[0] + wx.y * rowColors[1]) + wx.z * rowColors[2]) + wx.w * rowColors[3];
        rowColors[0] = ImprovedPerlinNoise_Stage5_c1_c0(vec4(1.0), coord + vec2(-1.0, 2.0));
        rowColors[1] = ImprovedPerlinNoise_Stage5_c1_c0(vec4(1.0), coord + vec2(0.0, 2.0));
        rowColors[2] = ImprovedPerlinNoise_Stage5_c1_c0(vec4(1.0), coord + vec2(1.0, 2.0));
        rowColors[3] = ImprovedPerlinNoise_Stage5_c1_c0(vec4(1.0), coord + vec2(2.0, 2.0));
        vec4 s3 = ((wx.x * rowColors[0] + wx.y * rowColors[1]) + wx.z * rowColors[2]) + wx.w * rowColors[3];
        vec4 bicubicColor = ((wy.x * s0 + wy.y * s1) + wy.z * s2) + wy.w * s3;
        bicubicColor = clamp(bicubicColor, 0.0, 1.0);
        output_Stage5 = bicubicColor * output_Stage4;
    }
    vec4 output_Stage6;
    {
        vec2 translatedFragPos = gl_FragCoord.xy - uproxyRect_Stage6.xy;
        float threshold = ucornerRadius_Stage6 + 2.0 * ublurRadius_Stage6;
        vec2 middle = (uproxyRect_Stage6.zw - uproxyRect_Stage6.xy) - 2.0 * threshold;
        if (translatedFragPos.x >= threshold && translatedFragPos.x < middle.x + threshold) {
            translatedFragPos.x = threshold;
        } else if (translatedFragPos.x >= middle.x + threshold) {
            translatedFragPos.x -= middle.x - 1.0;
        }
        if (translatedFragPos.y > threshold && translatedFragPos.y < middle.y + threshold) {
            translatedFragPos.y = threshold;
        } else if (translatedFragPos.y >= middle.y + threshold) {
            translatedFragPos.y -= middle.y - 1.0;
        }
        vec2 proxyDims = vec2(2.0 * threshold + 1.0);
        vec2 texCoord = translatedFragPos / proxyDims;
        output_Stage6 = output_Stage5 * texture(uTextureSampler_0_Stage6, texCoord);
    }
    {
        sk_FragColor = output_Stage6 * outputCoverage_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec4 inCircleEdge;
noperspective out vec4 vinCircleEdge_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
void main() {
    vinCircleEdge_Stage0 = inCircleEdge;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

