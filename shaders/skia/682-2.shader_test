[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform float ucornerRadius_Stage1;
uniform vec4 uproxyRect_Stage1;
uniform float ublurRadius_Stage1;
uniform vec4 ucircle_Stage3;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
noperspective in vec2 vEllipseOffsets_Stage0;
noperspective in vec4 vEllipseRadii_Stage0;
noperspective in vec4 vinColor_Stage0;
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vinColor_Stage0;
        vec2 offset = vEllipseOffsets_Stage0;
        float test = dot(offset, offset) - 1.0;
        vec2 grad = (2.0 * offset) * vEllipseRadii_Stage0.xy;
        float grad_dot = dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec2 translatedFragPos = gl_FragCoord.xy - uproxyRect_Stage1.xy;
        float threshold = ucornerRadius_Stage1 + 2.0 * ublurRadius_Stage1;
        vec2 middle = (uproxyRect_Stage1.zw - uproxyRect_Stage1.xy) - 2.0 * threshold;
        if (translatedFragPos.x >= threshold && translatedFragPos.x < middle.x + threshold) {
            translatedFragPos.x = threshold;
        } else if (translatedFragPos.x >= middle.x + threshold) {
            translatedFragPos.x -= middle.x - 1.0;
        }
        if (translatedFragPos.y > threshold && translatedFragPos.y < middle.y + threshold) {
            translatedFragPos.y = threshold;
        } else if (translatedFragPos.y >= middle.y + threshold) {
            translatedFragPos.y -= middle.y - 1.0;
        }
        vec2 proxyDims = vec2(2.0 * threshold + 1.0);
        vec2 texCoord = translatedFragPos / proxyDims;
        output_Stage1 = outputCoverage_Stage0 * texture(uTextureSampler_0_Stage1, texCoord);
    }
    vec4 output_Stage2;
    {
        float nonZeroAlpha = max(output_Stage1.w, 9.9999997473787516e-05);
        vec4 coord = vec4(output_Stage1.xyz / nonZeroAlpha, nonZeroAlpha);
        coord = coord * 0.9960939884185791 + vec4(0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579);
        output_Stage2.w = texture(uTextureSampler_0_Stage2, vec2(coord.w, 0.125)).w;
        output_Stage2.x = texture(uTextureSampler_0_Stage2, vec2(coord.x, 0.375)).w;
        output_Stage2.y = texture(uTextureSampler_0_Stage2, vec2(coord.y, 0.625)).w;
        output_Stage2.z = texture(uTextureSampler_0_Stage2, vec2(coord.z, 0.875)).w;
        output_Stage2.xyz *= output_Stage2.w;
    }
    vec4 output_Stage3;
    {
        float d;
        {
            d = (1.0 - length((ucircle_Stage3.xy - gl_FragCoord.xy) * ucircle_Stage3.w)) * ucircle_Stage3.z;
        }
        {
            output_Stage3 = d > 0.5 ? output_Stage2 : vec4(0.0);
        }
    }
    vec4 output_Stage4;
    {
        output_Stage4 = floor(output_Stage3 * 255.0 + 0.5) / 255.0;
        {
            output_Stage4.xyz = output_Stage4.w <= 0.0 ? vec3(0.0) : floor((output_Stage4.xyz / output_Stage4.w) * 255.0 + 0.5) / 255.0;
        }
    }
    {
        sk_FragColor = (vec4(1.0) - outputColor_Stage0) * output_Stage4;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffset;
in vec4 inEllipseRadii;
noperspective out vec2 vEllipseOffsets_Stage0;
noperspective out vec4 vEllipseRadii_Stage0;
noperspective out vec4 vinColor_Stage0;
void main() {
    vEllipseOffsets_Stage0 = inEllipseOffset;
    vEllipseRadii_Stage0 = inEllipseRadii;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

