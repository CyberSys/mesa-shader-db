[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform float ucornerRadius_Stage1;
uniform vec4 uproxyRect_Stage1;
uniform float ublurRadius_Stage1;
uniform vec4 urectUniform_Stage2;
uniform vec4 ucolor_Stage3;
uniform vec4 uboundsUniform_Stage4;
uniform float uxInvZoom_Stage4;
uniform float uyInvZoom_Stage4;
uniform float uxInvInset_Stage4;
uniform float uyInvInset_Stage4;
uniform vec2 uoffset_Stage4;
uniform vec4 uinnerRect_Stage5;
uniform vec2 uinvRadiiXY_Stage5;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage4;
noperspective in vec2 vTransformedCoords_0_Stage0;
void main() {
    {
        vec2 translatedFragPos = gl_FragCoord.xy - uproxyRect_Stage1.xy;
        float threshold = ucornerRadius_Stage1 + 2.0 * ublurRadius_Stage1;
        vec2 middle = (uproxyRect_Stage1.zw - uproxyRect_Stage1.xy) - 2.0 * threshold;
        if (translatedFragPos.x >= threshold && translatedFragPos.x < middle.x + threshold) {
            translatedFragPos.x = threshold;
        } else if (translatedFragPos.x >= middle.x + threshold) {
            translatedFragPos.x -= middle.x - 1.0;
        }
        if (translatedFragPos.y > threshold && translatedFragPos.y < middle.y + threshold) {
            translatedFragPos.y = threshold;
        } else if (translatedFragPos.y >= middle.y + threshold) {
            translatedFragPos.y -= middle.y - 1.0;
        }
    }
    vec4 output_Stage4;
    {
        vec2 coord = vTransformedCoords_0_Stage0;
        vec2 zoom_coord = uoffset_Stage4 + coord * vec2(uxInvZoom_Stage4, uyInvZoom_Stage4);
        vec2 delta = (coord - uboundsUniform_Stage4.xy) * uboundsUniform_Stage4.zw;
        delta = min(delta, vec2(1.0, 1.0) - delta);
        delta *= vec2(uxInvInset_Stage4, uyInvInset_Stage4);
        float weight = 0.0;
        if (delta.x < 2.0 && delta.y < 2.0) {
            delta = vec2(2.0, 2.0) - delta;
            float dist = length(delta);
            dist = max(2.0 - dist, 0.0);
            weight = min(dist * dist, 1.0);
        } else {
            vec2 delta_squared = delta * delta;
            weight = min(min(delta_squared.x, delta_squared.y), 1.0);
        }
        output_Stage4 = texture(uTextureSampler_0_Stage4, mix(coord, zoom_coord, weight));
    }
    vec4 output_Stage5;
    {
        vec2 dxy0 = uinnerRect_Stage5.xy - gl_FragCoord.xy;
        vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage5.zw;
        vec2 dxy = max(max(dxy0, dxy1), 0.0);
        vec2 Z = dxy * uinvRadiiXY_Stage5;
        float implicit = dot(Z, dxy) - 1.0;
        float grad_dot = 4.0 * dot(Z, Z);
        grad_dot = max(grad_dot, 9.9999997473787516e-05);
        float approx_dist = implicit * inversesqrt(grad_dot);
        float alpha = clamp(0.5 + approx_dist, 0.0, 1.0);
        output_Stage5 = output_Stage4 * alpha;
    }
    {
        sk_FragColor = output_Stage5;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 position;
in vec2 inLocalCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vec2 pos2 = position;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_PointSize = 1.0;
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

