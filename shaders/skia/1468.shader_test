[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uCoordTransformMatrix_0_Stage0;
uniform vec4 uboundsUniform_Stage1_c0_c0;
uniform float uxInvZoom_Stage1_c0_c0;
uniform float uyInvZoom_Stage1_c0_c0;
uniform float uxInvInset_Stage1_c0_c0;
uniform float uyInvInset_Stage1_c0_c0;
uniform vec2 uoffset_Stage1_c0_c0;
uniform vec4 uscale0_1_Stage2_c1_c0_c1_c0;
uniform vec4 uscale2_3_Stage2_c1_c0_c1_c0;
uniform vec4 uscale4_5_Stage2_c1_c0_c1_c0;
uniform vec4 uscale6_7_Stage2_c1_c0_c1_c0;
uniform vec4 ubias0_1_Stage2_c1_c0_c1_c0;
uniform vec4 ubias2_3_Stage2_c1_c0_c1_c0;
uniform vec4 ubias4_5_Stage2_c1_c0_c1_c0;
uniform vec4 ubias6_7_Stage2_c1_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage2_c1_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage2_c1_c0_c1_c0;
uniform float uinnerThreshold_Stage3;
uniform float uouterThreshold_Stage3;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage3;
noperspective in vec4 vcolor_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in float vinCoverage_Stage0;
vec4 MagnifierEffect_Stage1_c0_c0(vec4 _input, vec2 _coords) {
    _coords = _coords * uCoordTransformMatrix_0_Stage0.xz + uCoordTransformMatrix_0_Stage0.yw;
    vec4 _output;
    vec2 coord = _coords;
    vec2 zoom_coord = uoffset_Stage1_c0_c0 + coord * vec2(uxInvZoom_Stage1_c0_c0, uyInvZoom_Stage1_c0_c0);
    vec2 delta = (coord - uboundsUniform_Stage1_c0_c0.xy) * uboundsUniform_Stage1_c0_c0.zw;
    delta = min(delta, vec2(1.0, 1.0) - delta);
    delta *= vec2(uxInvInset_Stage1_c0_c0, uyInvInset_Stage1_c0_c0);
    float weight = 0.0;
    if (delta.x < 2.0 && delta.y < 2.0) {
        delta = vec2(2.0, 2.0) - delta;
        float dist = length(delta);
        dist = max(2.0 - dist, 0.0);
        weight = min(dist * dist, 1.0);
    } else {
        vec2 delta_squared = delta * delta;
        weight = min(min(delta_squared.x, delta_squared.y), 1.0);
    }
    _output = texture(uTextureSampler_0_Stage1, mix(coord, zoom_coord, weight));
    return _output;
}
vec4 RadialGradientLayout_Stage2_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float t = length(vTransformedCoords_1_Stage0);
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage2_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage2_c1_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage2_c1_c0_c1_c0.x) {
                scale = uscale0_1_Stage2_c1_c0_c1_c0;
                bias = ubias0_1_Stage2_c1_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage2_c1_c0_c1_c0;
                bias = ubias2_3_Stage2_c1_c0_c1_c0;
            }
        } else {
            if (t < uthresholds1_7_Stage2_c1_c0_c1_c0.z) {
                scale = uscale4_5_Stage2_c1_c0_c1_c0;
                bias = ubias4_5_Stage2_c1_c0_c1_c0;
            } else {
                scale = uscale6_7_Stage2_c1_c0_c1_c0;
                bias = ubias6_7_Stage2_c1_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 TiledGradientEffect_Stage2_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 t = RadialGradientLayout_Stage2_c1_c0_c0_c0(vec4(1.0));
    {
        {
            t.x = fract(t.x);
        }
        _output = UnrolledBinaryGradientColorizer_Stage2_c1_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
        float alpha = 1.0;
        alpha = vinCoverage_Stage0;
        outputCoverage_Stage0 = vec4(alpha);
    }
    vec4 output_Stage1;
    {
        output_Stage1 = MagnifierEffect_Stage1_c0_c0(outputColor_Stage0, gl_FragCoord.xy);
    }
    vec4 output_Stage2;
    {
        output_Stage2 = blend_dst_in(output_Stage1, TiledGradientEffect_Stage2_c1_c0(vec4(1.0)));
    }
    vec4 output_Stage3;
    {
        vec4 color = outputCoverage_Stage0;
        vec4 mask_color = texture(uTextureSampler_0_Stage3, vTransformedCoords_2_Stage0);
        if (mask_color.w < 0.5) {
            if (color.w > uouterThreshold_Stage3) {
                float scale = uouterThreshold_Stage3 / color.w;
                color.xyz *= scale;
                color.w = uouterThreshold_Stage3;
            }
        } else if (color.w < uinnerThreshold_Stage3) {
            float scale = uinnerThreshold_Stage3 / max(0.0010000000474974513, color.w);
            color.xyz *= scale;
            color.w = uinnerThreshold_Stage3;
        }
        output_Stage3 = color;
    }
    {
        sk_FragColor = output_Stage3 * output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
in vec4 inColor;
in float inCoverage;
noperspective out vec4 vcolor_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out float vinCoverage_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = inPosition;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    vinCoverage_Stage0 = inCoverage;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

