[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uColor_Stage0;
uniform vec4 ucircleData_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec2 ubaseFrequency_Stage1_c1_c0_c0_c0_c1_c0;
uniform float uz_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec2 uImageIncrement_Stage1_c1_c0_c1_c0;
uniform float uSurfaceScale_Stage1_c1_c0_c1_c0;
uniform vec3 uLightColor_Stage1_c1_c0_c1_c0;
uniform float uKS_Stage1_c1_c0_c1_c0;
uniform float uShininess_Stage1_c1_c0_c1_c0;
uniform vec4 uTexDom_Stage1_c1_c0_c1_c0;
uniform vec3 uDecalParams_Stage1_c1_c0_c1_c0;
uniform vec3 uLightDirection_Stage1_c1_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
uniform sampler2D uTextureSampler_3_Stage1;
uniform sampler2D uTextureSampler_4_Stage1;
noperspective in vec3 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
vec4 ColorTableEffect_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    float nonZeroAlpha = max(_input.w, 9.9999997473787516e-05);
    vec4 coord = vec4(_input.xyz / nonZeroAlpha, nonZeroAlpha);
    coord = coord * 0.9960939884185791 + vec4(0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579);
    _output.w = texture(uTextureSampler_0_Stage1, vec2(coord.w, 0.125)).w;
    _output.x = texture(uTextureSampler_0_Stage1, vec2(coord.x, 0.375)).w;
    _output.y = texture(uTextureSampler_0_Stage1, vec2(coord.y, 0.625)).w;
    _output.z = texture(uTextureSampler_0_Stage1, vec2(coord.z, 0.875)).w;
    _output.xyz *= _output.w;
    return _output;
}
vec4 CircleBlurFragmentProcessor_Stage1_c1_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 vec = vec2((gl_FragCoord.x - ucircleData_Stage1_c1_c0_c0_c0_c0_c0.x) * ucircleData_Stage1_c1_c0_c0_c0_c0_c0.w, (gl_FragCoord.y - ucircleData_Stage1_c1_c0_c0_c0_c0_c0.y) * ucircleData_Stage1_c1_c0_c0_c0_c0_c0.w);
    float dist = length(vec) + (0.5 - ucircleData_Stage1_c1_c0_c0_c0_c0_c0.z) * ucircleData_Stage1_c1_c0_c0_c0_c0_c0.w;
    _output = _input * texture(uTextureSampler_1_Stage1, vec2(dist, 0.5)).w;
    return _output;
}
vec3 fade_Stage1_c1_c0_c0_c0_c1_c0(vec3 t) {
    return ((t * t) * t) * (t * (t * 6.0 - 15.0) + 10.0);
}
float perm_Stage1_c1_c0_c0_c0_c1_c0(float x) {
    return texture(uTextureSampler_2_Stage1, vec2(fract(x / 256.0), 0.0)).x * 255.0;
}
float grad_Stage1_c1_c0_c0_c0_c1_c0(float x, vec3 p) {
    return dot(texture(uTextureSampler_3_Stage1, vec2(fract(x / 16.0), 0.0)).xyz * 255.0 - vec3(1.0), p);
}
float lerp_Stage1_c1_c0_c0_c0_c1_c0(float a, float b, float w) {
    return a + w * (b - a);
}
float noise_Stage1_c1_c0_c0_c0_c1_c0(vec3 p) {
    vec3 P = mod(floor(p), 256.0);
    p -= floor(p);
    vec3 f = fade_Stage1_c1_c0_c0_c0_c1_c0(p);
    float A = perm_Stage1_c1_c0_c0_c0_c1_c0(P.x) + P.y;
    float AA = perm_Stage1_c1_c0_c0_c0_c1_c0(A) + P.z;
    float AB = perm_Stage1_c1_c0_c0_c0_c1_c0(A + 1.0) + P.z;
    float B = perm_Stage1_c1_c0_c0_c0_c1_c0(P.x + 1.0) + P.y;
    float BA = perm_Stage1_c1_c0_c0_c0_c1_c0(B) + P.z;
    float BB = perm_Stage1_c1_c0_c0_c0_c1_c0(B + 1.0) + P.z;
    float result = lerp_Stage1_c1_c0_c0_c0_c1_c0(lerp_Stage1_c1_c0_c0_c0_c1_c0(lerp_Stage1_c1_c0_c0_c0_c1_c0(grad_Stage1_c1_c0_c0_c0_c1_c0(perm_Stage1_c1_c0_c0_c0_c1_c0(AA), p), grad_Stage1_c1_c0_c0_c0_c1_c0(perm_Stage1_c1_c0_c0_c0_c1_c0(BA), p + vec3(-1.0, 0.0, 0.0)), f.x), lerp_Stage1_c1_c0_c0_c0_c1_c0(grad_Stage1_c1_c0_c0_c0_c1_c0(perm_Stage1_c1_c0_c0_c0_c1_c0(AB), p + vec3(0.0, -1.0, 0.0)), grad_Stage1_c1_c0_c0_c0_c1_c0(perm_Stage1_c1_c0_c0_c0_c1_c0(BB), p + vec3(-1.0, -1.0, 0.0)), f.x), f.y), lerp_Stage1_c1_c0_c0_c0_c1_c0(lerp_Stage1_c1_c0_c0_c0_c1_c0(grad_Stage1_c1_c0_c0_c0_c1_c0(perm_Stage1_c1_c0_c0_c0_c1_c0(AA + 1.0), p + vec3(0.0, 0.0, -1.0)), grad_Stage1_c1_c0_c0_c0_c1_c0(perm_Stage1_c1_c0_c0_c0_c1_c0(BA + 1.0), p + vec3(-1.0, 0.0, -1.0)), f.x), lerp_Stage1_c1_c0_c0_c0_c1_c0(grad_Stage1_c1_c0_c0_c0_c1_c0(perm_Stage1_c1_c0_c0_c0_c1_c0(AB + 1.0), p + vec3(0.0, -1.0, -1.0)), grad_Stage1_c1_c0_c0_c0_c1_c0(perm_Stage1_c1_c0_c0_c0_c1_c0(BB + 1.0), p + vec3(-1.0, -1.0, -1.0)), f.x), f.y), f.z);
    return result;
}
float noiseOctaves_Stage1_c1_c0_c0_c0_c1_c0(vec3 p) {
    float result = 0.0;
    float ratio = 1.0;
    for (float i = 0.0;i < 3.0; i++) {
        result += noise_Stage1_c1_c0_c0_c0_c1_c0(p) / ratio;
        p *= 2.0;
        ratio *= 2.0;
    }
    return (result + 1.0) / 2.0;
}
vec4 ImprovedPerlinNoise_Stage1_c1_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 vTransformedCoords_0_Stage0_ensure2D = vTransformedCoords_0_Stage0.xy / vTransformedCoords_0_Stage0.z;
    vec2 coords = vTransformedCoords_0_Stage0_ensure2D * ubaseFrequency_Stage1_c1_c0_c0_c0_c1_c0;
    float r = noiseOctaves_Stage1_c1_c0_c0_c0_c1_c0(vec3(coords, uz_Stage1_c1_c0_c0_c0_c1_c0));
    float g = noiseOctaves_Stage1_c1_c0_c0_c0_c1_c0(vec3(coords, uz_Stage1_c1_c0_c0_c0_c1_c0));
    float b = noiseOctaves_Stage1_c1_c0_c0_c0_c1_c0(vec3(coords, uz_Stage1_c1_c0_c0_c0_c1_c0));
    float a = noiseOctaves_Stage1_c1_c0_c0_c0_c1_c0(vec3(coords, uz_Stage1_c1_c0_c0_c0_c1_c0));
    _output = vec4(r, g, b, a);
    _output = clamp(_output, 0.0, 1.0);
    _output = vec4(_output.xyz * _output.www, _output.w);
    return _output;
}
vec4 blend_dst_out(vec4 src, vec4 dst) {
    return (1.0 - src.w) * dst;
}
vec4 ComposeTwo_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_dst_out(CircleBlurFragmentProcessor_Stage1_c1_c0_c0_c0_c0_c0(inputColor), ImprovedPerlinNoise_Stage1_c1_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 light_Stage1_c1_c0_c1_c0(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    vec3 halfDir = normalize(surfaceToLight + vec3(0.0, 0.0, 1.0));
    float colorScale = uKS_Stage1_c1_c0_c1_c0 * pow(dot(normal, halfDir), uShininess_Stage1_c1_c0_c1_c0);
    vec3 color = lightColor * clamp(colorScale, 0.0, 1.0);
    return vec4(color, max(max(color.x, color.y), color.z));
}
float sobel_Stage1_c1_c0_c1_c0(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage1_c1_c0_c1_c0(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage1_c1_c0_c1_c0(float m[9], float surfaceScale) {
    return pointToNormal_Stage1_c1_c0_c1_c0(sobel_Stage1_c1_c0_c1_c0(m[1], m[2], m[4], m[5], 0.0, 0.0, 0.66666698455810547), sobel_Stage1_c1_c0_c1_c0(0.0, 0.0, m[1], m[4], m[2], m[5], 0.66666698455810547), surfaceScale);
}
vec4 SpecularLighting_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_1_Stage0;
    float m[9];
    vec4 temp0;
    {
        vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage1_c1_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[0] = temp0.w;
    vec4 temp1;
    {
        vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage1_c1_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[1] = temp1.w;
    vec4 temp2;
    {
        vec2 origCoord = coord + uImageIncrement_Stage1_c1_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[2] = temp2.w;
    vec4 temp3;
    {
        vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[3] = temp3.w;
    vec4 temp4;
    {
        vec2 origCoord = coord;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[4] = temp4.w;
    vec4 temp5;
    {
        vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[5] = temp5.w;
    vec4 temp6;
    {
        vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage1_c1_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[6] = temp6.w;
    vec4 temp7;
    {
        vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage1_c1_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[7] = temp7.w;
    vec4 temp8;
    {
        vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage1_c1_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[8] = temp8.w;
    vec3 surfaceToLight = uLightDirection_Stage1_c1_c0_c1_c0;
    _output = light_Stage1_c1_c0_c1_c0(normal_Stage1_c1_c0_c1_c0(m, uSurfaceScale_Stage1_c1_c0_c1_c0), surfaceToLight, uLightColor_Stage1_c1_c0_c1_c0);
    _output *= _input;
    return _output;
}
vec4 blend_plus(vec4 src, vec4 dst) {
    return min(src + dst, 1.0);
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_plus(ComposeTwo_Stage1_c1_c0_c0_c0(inputColor), SpecularLighting_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_plus(ColorTableEffect_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 inPosition;
noperspective out vec3 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0);
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

