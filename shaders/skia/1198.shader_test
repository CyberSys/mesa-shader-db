[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 ucircleData_Stage1;
uniform vec4 urectUniform_Stage2_c0_c0;
uniform sampler2D uTextureSampler_0_Stage1;
noperspective in vec4 vcolor_Stage0;
noperspective in float vinCoverage_Stage0;
vec4 AARectEffect_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    float alpha;
    {
        float xSub, ySub;
        xSub = min(gl_FragCoord.x - urectUniform_Stage2_c0_c0.x, 0.0);
        xSub += min(urectUniform_Stage2_c0_c0.z - gl_FragCoord.x, 0.0);
        ySub = min(gl_FragCoord.y - urectUniform_Stage2_c0_c0.y, 0.0);
        ySub += min(urectUniform_Stage2_c0_c0.w - gl_FragCoord.y, 0.0);
        alpha = (1.0 + max(xSub, -1.0)) * (1.0 + max(ySub, -1.0));
    }
    {
        alpha = 1.0 - alpha;
    }
    _output = _input * alpha;
    return _output;
}
vec4 ConfigConversionEffect_Stage2_c1_c0(vec4 _input) {
    vec4 _output;
    _output = floor(_input * 255.0 + 0.5) / 255.0;
    {
        _output.xyz = floor((_output.xyz * _output.w) * 255.0 + 0.5) / 255.0;
    }
    return _output;
}
float _blend_color_luminance(vec3 color) {
    return dot(vec3(0.30000001192092896, 0.5899999737739563, 0.10999999940395355), color);
}
vec3 _blend_set_color_luminance(vec3 hueSatColor, float alpha, vec3 lumColor) {
    float lum = _blend_color_luminance(lumColor);
    vec3 result = (lum - _blend_color_luminance(hueSatColor)) + hueSatColor;
    float minComp = min(min(result.x, result.y), result.z);
    float maxComp = max(max(result.x, result.y), result.z);
    if (minComp < 0.0 && lum != minComp) {
        result = lum + ((result - lum) * lum) / (lum - minComp);
    }
    if (maxComp > alpha && maxComp != lum) {
        return lum + ((result - lum) * (alpha - lum)) / (maxComp - lum);
    }
    return result;
}
vec4 blend_luminosity(vec4 src, vec4 dst) {
    float alpha = dst.w * src.w;
    vec3 sda = src.xyz * dst.w;
    vec3 dsa = dst.xyz * src.w;
    return vec4((((_blend_set_color_luminance(dsa, alpha, sda) + dst.xyz) - dsa) + src.xyz) - sda, (src.w + dst.w) - alpha);
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
        float alpha = 1.0;
        alpha = vinCoverage_Stage0;
        outputCoverage_Stage0 = vec4(alpha);
    }
    vec4 output_Stage1;
    {
        vec2 vec = vec2((gl_FragCoord.x - ucircleData_Stage1.x) * ucircleData_Stage1.w, (gl_FragCoord.y - ucircleData_Stage1.y) * ucircleData_Stage1.w);
        float dist = length(vec) + (0.5 - ucircleData_Stage1.z) * ucircleData_Stage1.w;
        output_Stage1 = outputColor_Stage0 * texture(uTextureSampler_0_Stage1, vec2(dist, 0.5)).w;
    }
    vec4 output_Stage2;
    {
        vec4 inputColor = vec4(outputCoverage_Stage0.xyz, 1.0);
        output_Stage2 = blend_luminosity(AARectEffect_Stage2_c0_c0(inputColor), ConfigConversionEffect_Stage2_c1_c0(inputColor));
        output_Stage2 *= outputCoverage_Stage0.w;
    }
    {
        sk_FragColor = (vec4(1.0) - output_Stage1) * output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
in vec2 inPosition;
in vec4 inColor;
in float inCoverage;
noperspective out vec4 vcolor_Stage0;
noperspective out float vinCoverage_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = inPosition;
    vinCoverage_Stage0 = inCoverage;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

