[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec2 ubaseFrequency_Stage2_c0_c0;
uniform float uz_Stage2_c0_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
uniform sampler2D uTextureSampler_1_Stage2;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
vec3 fade_Stage2_c0_c0(vec3 t) {
    return ((t * t) * t) * (t * (t * 6.0 - 15.0) + 10.0);
}
float perm_Stage2_c0_c0(float x) {
    return texture(uTextureSampler_0_Stage2, vec2(fract(x / 256.0), 0.0)).x * 255.0;
}
float grad_Stage2_c0_c0(float x, vec3 p) {
    return dot(texture(uTextureSampler_1_Stage2, vec2(fract(x / 16.0), 0.0)).xyz * 255.0 - vec3(1.0), p);
}
float lerp_Stage2_c0_c0(float a, float b, float w) {
    return a + w * (b - a);
}
float noise_Stage2_c0_c0(vec3 p) {
    vec3 P = mod(floor(p), 256.0);
    p -= floor(p);
    vec3 f = fade_Stage2_c0_c0(p);
    float A = perm_Stage2_c0_c0(P.x) + P.y;
    float AA = perm_Stage2_c0_c0(A) + P.z;
    float AB = perm_Stage2_c0_c0(A + 1.0) + P.z;
    float B = perm_Stage2_c0_c0(P.x + 1.0) + P.y;
    float BA = perm_Stage2_c0_c0(B) + P.z;
    float BB = perm_Stage2_c0_c0(B + 1.0) + P.z;
    float result = lerp_Stage2_c0_c0(lerp_Stage2_c0_c0(lerp_Stage2_c0_c0(grad_Stage2_c0_c0(perm_Stage2_c0_c0(AA), p), grad_Stage2_c0_c0(perm_Stage2_c0_c0(BA), p + vec3(-1.0, 0.0, 0.0)), f.x), lerp_Stage2_c0_c0(grad_Stage2_c0_c0(perm_Stage2_c0_c0(AB), p + vec3(0.0, -1.0, 0.0)), grad_Stage2_c0_c0(perm_Stage2_c0_c0(BB), p + vec3(-1.0, -1.0, 0.0)), f.x), f.y), lerp_Stage2_c0_c0(lerp_Stage2_c0_c0(grad_Stage2_c0_c0(perm_Stage2_c0_c0(AA + 1.0), p + vec3(0.0, 0.0, -1.0)), grad_Stage2_c0_c0(perm_Stage2_c0_c0(BA + 1.0), p + vec3(-1.0, 0.0, -1.0)), f.x), lerp_Stage2_c0_c0(grad_Stage2_c0_c0(perm_Stage2_c0_c0(AB + 1.0), p + vec3(0.0, -1.0, -1.0)), grad_Stage2_c0_c0(perm_Stage2_c0_c0(BB + 1.0), p + vec3(-1.0, -1.0, -1.0)), f.x), f.y), f.z);
    return result;
}
float noiseOctaves_Stage2_c0_c0(vec3 p) {
    float result = 0.0;
    float ratio = 1.0;
    for (float i = 0.0;i < 7.0; i++) {
        result += noise_Stage2_c0_c0(p) / ratio;
        p *= 2.0;
        ratio *= 2.0;
    }
    return (result + 1.0) / 2.0;
}
vec4 ImprovedPerlinNoise_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 coords = vTransformedCoords_1_Stage0 * ubaseFrequency_Stage2_c0_c0;
    float r = noiseOctaves_Stage2_c0_c0(vec3(coords, uz_Stage2_c0_c0));
    float g = noiseOctaves_Stage2_c0_c0(vec3(coords, uz_Stage2_c0_c0));
    float b = noiseOctaves_Stage2_c0_c0(vec3(coords, uz_Stage2_c0_c0));
    float a = noiseOctaves_Stage2_c0_c0(vec3(coords, uz_Stage2_c0_c0));
    _output = vec4(r, g, b, a);
    _output = clamp(_output, 0.0, 1.0);
    _output = vec4(_output.xyz * _output.www, _output.w);
    return _output;
}
vec4 ClampFragmentProcessor_Stage2_c1_c0(vec4 _input) {
    vec4 _output;
    {
        float alpha = clamp(_input.w, 0.0, 1.0);
        _output = vec4(clamp(_input.xyz, 0.0, alpha), alpha);
    }
    return _output;
}
vec4 blend_multiply(vec4 src, vec4 dst) {
    return vec4(((1.0 - src.w) * dst.xyz + (1.0 - dst.w) * src.xyz) + src.xyz * dst.xyz, src.w + (1.0 - src.w) * dst.w);
}
void main() {
    vec4 output_Stage1;
    {
        output_Stage1 = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
    }
    vec4 output_Stage2;
    {
        vec4 inputColor = vec4(output_Stage1.xyz, 1.0);
        output_Stage2 = blend_multiply(ImprovedPerlinNoise_Stage2_c0_c0(inputColor), ClampFragmentProcessor_Stage2_c1_c0(inputColor));
        output_Stage2 *= output_Stage1.w;
    }
    {
        sk_FragColor = output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 position;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(localCoord, 1.0)).xy;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

