[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform mat4 um_Stage2;
uniform vec4 uv_Stage2;
noperspective in vec4 vcolor_Stage0;
noperspective in float vinCoverage_Stage0;
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
        float alpha = 1.0;
        alpha = vinCoverage_Stage0;
        outputCoverage_Stage0 = vec4(alpha);
    }
    vec4 output_Stage1;
    {
        output_Stage1 = floor(outputColor_Stage0 * 255.0 + 0.5) / 255.0;
        {
            output_Stage1.xyz = output_Stage1.w <= 0.0 ? vec3(0.0) : floor((output_Stage1.xyz / output_Stage1.w) * 255.0 + 0.5) / 255.0;
        }
    }
    vec4 output_Stage2;
    {
        vec4 inputColor = output_Stage1;
        output_Stage2 = um_Stage2 * inputColor + uv_Stage2;
        {
            output_Stage2 = clamp(output_Stage2, 0.0, 1.0);
        }
        {
            output_Stage2.xyz *= output_Stage2.w;
        }
    }
    vec4 output_Stage3;
    {
        output_Stage3 = output_Stage2;
    }
    {
        sk_FragColor = output_Stage3 * outputCoverage_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
in vec2 inPosition;
in vec4 inColor;
in float inCoverage;
noperspective out vec4 vcolor_Stage0;
noperspective out float vinCoverage_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = inPosition;
    vinCoverage_Stage0 = inCoverage;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

