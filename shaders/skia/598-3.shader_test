[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform float uinnerThreshold_Stage2;
uniform float uouterThreshold_Stage2;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
void main() {
    vec4 output_Stage1;
    {
        output_Stage1 = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
    }
    vec4 output_Stage2;
    {
        vec4 color = output_Stage1;
        vec4 mask_color = texture(uTextureSampler_0_Stage2, vTransformedCoords_1_Stage0);
        if (mask_color.w < 0.5) {
            if (color.w > uouterThreshold_Stage2) {
                float scale = uouterThreshold_Stage2 / color.w;
                color.xyz *= scale;
                color.w = uouterThreshold_Stage2;
            }
        } else if (color.w < uinnerThreshold_Stage2) {
            float scale = uinnerThreshold_Stage2 / max(0.0010000000474974513, color.w);
            color.xyz *= scale;
            color.w = uinnerThreshold_Stage2;
        }
        output_Stage2 = color;
    }
    {
        sk_FragColor = output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 position;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(localCoord, 1.0)).xy;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

