[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform vec4 uCoordTransformMatrix_1_Stage0;
uniform vec4 urectUniform_Stage3;
uniform vec4 uleftBorderColor_Stage4_c1_c0;
uniform vec4 urightBorderColor_Stage4_c1_c0;
uniform float ubias_Stage4_c1_c0_c0_c0;
uniform float uscale_Stage4_c1_c0_c0_c0;
uniform vec4 uscale0_1_Stage4_c1_c0_c1_c0;
uniform vec4 uscale2_3_Stage4_c1_c0_c1_c0;
uniform vec4 uscale4_5_Stage4_c1_c0_c1_c0;
uniform vec4 ubias0_1_Stage4_c1_c0_c1_c0;
uniform vec4 ubias2_3_Stage4_c1_c0_c1_c0;
uniform vec4 ubias4_5_Stage4_c1_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage4_c1_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage4_c1_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
vec4 TextureEffect_Stage1_c0_c0(vec4 _input, vec2 _coords) {
    _coords = _coords * uCoordTransformMatrix_1_Stage0.xz + uCoordTransformMatrix_1_Stage0.yw;
    vec4 _output;
    _output = texture(uTextureSampler_0_Stage1, _coords) * _input;
    return _output;
}
vec4 SweepGradientLayout_Stage4_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float angle;
    {
        angle = atan(-vTransformedCoords_2_Stage0.y, -vTransformedCoords_2_Stage0.x);
    }
    float t = ((angle * 0.15915493667125702 + 0.5) + ubias_Stage4_c1_c0_c0_c0) * uscale_Stage4_c1_c0_c0_c0;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage4_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage4_c1_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage4_c1_c0_c1_c0.x) {
                scale = uscale0_1_Stage4_c1_c0_c1_c0;
                bias = ubias0_1_Stage4_c1_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage4_c1_c0_c1_c0;
                bias = ubias2_3_Stage4_c1_c0_c1_c0;
            }
        } else {
            {
                scale = uscale4_5_Stage4_c1_c0_c1_c0;
                bias = ubias4_5_Stage4_c1_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 ClampedGradientEffect_Stage4_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 t = SweepGradientLayout_Stage4_c1_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage4_c1_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage4_c1_c0;
    } else {
        _output = UnrolledBinaryGradientColorizer_Stage4_c1_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        float coord = vTransformedCoords_0_Stage0.x - 0.5;
        float f = fract(coord);
        coord += 0.5 - f;
        float f2 = f * f;
        vec4 w = mat4(0.055555555555555552, 0.88888888888888884, 0.055555555555555552, 0.0, -0.5, 0.0, 0.5, 0.0, 0.83333333333333337, -2.0, 1.5, -0.33333333333333331, -0.3888888888888889, 1.1666666666666667, -1.1666666666666667, 0.3888888888888889) * vec4(1.0, f, f2, f2 * f);
        vec4 c[4];
        c[0] = TextureEffect_Stage1_c0_c0(vec4(1.0), vec2(coord + -1.0, vTransformedCoords_0_Stage0.y));
        c[1] = TextureEffect_Stage1_c0_c0(vec4(1.0), vec2(coord, vTransformedCoords_0_Stage0.y));
        c[2] = TextureEffect_Stage1_c0_c0(vec4(1.0), vec2(coord + 1.0, vTransformedCoords_0_Stage0.y));
        c[3] = TextureEffect_Stage1_c0_c0(vec4(1.0), vec2(coord + 2.0, vTransformedCoords_0_Stage0.y));
        vec4 bicubicColor = ((c[0] * w.x + c[1] * w.y) + c[2] * w.z) + c[3] * w.w;
        bicubicColor.xyz = max(vec3(0.0), min(bicubicColor.xyz, bicubicColor.www));
        output_Stage1 = bicubicColor * outputColor_Stage0;
    }
    vec4 output_Stage2;
    {
        {
            float alpha = clamp(1.0, 0.0, 1.0);
            output_Stage2 = vec4(clamp(vec4(1.0).xyz, 0.0, alpha), alpha);
        }
    }
    vec4 output_Stage3;
    {
        float alpha;
        {
            float xSub, ySub;
            xSub = min(gl_FragCoord.x - urectUniform_Stage3.x, 0.0);
            xSub += min(urectUniform_Stage3.z - gl_FragCoord.x, 0.0);
            ySub = min(gl_FragCoord.y - urectUniform_Stage3.y, 0.0);
            ySub += min(urectUniform_Stage3.w - gl_FragCoord.y, 0.0);
            alpha = (1.0 + max(xSub, -1.0)) * (1.0 + max(ySub, -1.0));
        }
        output_Stage3 = output_Stage2 * alpha;
    }
    vec4 output_Stage4;
    {
        output_Stage4 = blend_dst_in(output_Stage3, ClampedGradientEffect_Stage4_c1_c0(vec4(1.0)));
    }
    vec4 output_Stage5;
    {
        output_Stage5 = floor(output_Stage4 * 255.0 + 0.5) / 255.0;
        {
            output_Stage5.xyz = floor((output_Stage5.xyz * output_Stage5.w) * 255.0 + 0.5) / 255.0;
        }
    }
    {
        sk_FragColor = output_Stage1 * output_Stage5;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
in vec2 inLocalCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
void main() {
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

