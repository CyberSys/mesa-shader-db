[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec2 uDstTextureUpperLeft_Stage1;
uniform vec2 uDstTextureCoordScale_Stage1;
uniform sampler2D uDstTextureSampler_Stage1;
flat in vec4 vcolor_Stage0;
noperspective in vec4 varccoord_Stage0;
vec4 blend_src(vec4 src, vec4 dst) {
    return src;
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
        outputCoverage_Stage0 = vec4(1.0);
        if (vec2(0.0) != varccoord_Stage0.xy) {
            float fn = dot(varccoord_Stage0.xy, varccoord_Stage0.xy) - 1.0;
            if (fn > 0.0) {
                outputCoverage_Stage0 = vec4(0.0);
            }
        }
    }
    {
        if (all(lessThanEqual(outputCoverage_Stage0.xyz, vec3(0.0)))) {
            discard;
        }
        vec2 _dstTexCoord = (gl_FragCoord.xy - uDstTextureUpperLeft_Stage1) * uDstTextureCoordScale_Stage1;
        _dstTexCoord.y = 1.0 - _dstTexCoord.y;
        vec4 _dstColor = texture(uDstTextureSampler_Stage1, _dstTexCoord);
        sk_FragColor = blend_src(outputColor_Stage0, _dstColor);
        sk_FragColor = outputCoverage_Stage0 * sk_FragColor + (vec4(1.0) - outputCoverage_Stage0) * _dstColor;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
in vec4 radii_selector;
in vec4 corner_and_radius_outsets;
in vec4 skew;
in vec2 translate;
in vec4 radii_x;
in vec4 radii_y;
in vec4 color;
flat out vec4 vcolor_Stage0;
noperspective out vec4 varccoord_Stage0;
void main() {
    vcolor_Stage0 = color;
    vec2 corner = corner_and_radius_outsets.xy;
    vec2 radius_outset = corner_and_radius_outsets.zw;
    vec2 radii;
    radii.x = dot(radii_selector, radii_x);
    radii.y = dot(radii_selector, radii_y);
    bool is_arc_section = radii.x > 0.0;
    radii = abs(radii);
    vec2 vertexpos = corner + radius_outset * radii;
    mat2 skewmatrix = mat2(skew.xy, skew.zw);
    vec2 devcoord = vertexpos * skewmatrix + translate;
    if (is_arc_section) {
        varccoord_Stage0.xy = 1.0 - abs(radius_outset);
        mat2 derivatives = inverse(skewmatrix);
        varccoord_Stage0.zw = derivatives * (((varccoord_Stage0.xy / radii) * corner) * 2.0);
    } else {
        varccoord_Stage0 = vec4(0.0);
    }
    gl_Position = vec4(devcoord.x, devcoord.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

