[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform vec4 uellipse_Stage1_c0_c0;
uniform vec2 uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec2 uBounds_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec4 uKernel_Stage1_c1_c0_c0_c0_c1_c0[7];
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
uniform sampler2D uTextureSampler_3_Stage1;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec3 vTransformedCoords_2_Stage0;
vec4 EllipseEffect_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 d = gl_FragCoord.xy - uellipse_Stage1_c0_c0.xy;
    vec2 Z = d * uellipse_Stage1_c0_c0.zw;
    float implicit = dot(Z, d) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    {
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
    }
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha;
    {
        alpha = approx_dist > 0.0 ? 1.0 : 0.0;
    }
    _output = _input * alpha;
    return _output;
}
vec4 ColorTableEffect_Stage1_c1_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float nonZeroAlpha = max(_input.w, 9.9999997473787516e-05);
    vec4 coord = vec4(_input.xyz / nonZeroAlpha, nonZeroAlpha);
    coord = coord * 0.9960939884185791 + vec4(0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579);
    _output.w = texture(uTextureSampler_0_Stage1, vec2(coord.w, 0.125)).w;
    _output.x = texture(uTextureSampler_0_Stage1, vec2(coord.x, 0.375)).w;
    _output.y = texture(uTextureSampler_0_Stage1, vec2(coord.y, 0.625)).w;
    _output.z = texture(uTextureSampler_0_Stage1, vec2(coord.z, 0.875)).w;
    _output.xyz *= _output.w;
    return _output;
}
vec4 GaussianConvolution_Stage1_c1_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_0_Stage0 - 12.0 * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    vec2 coordSampled = vec2(0.0, 0.0);
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[0].x;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[0].y;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[0].z;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[0].w;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[1].x;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[1].y;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[1].z;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[1].w;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[2].x;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[2].y;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[2].z;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[2].w;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[3].x;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[3].y;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[3].z;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[3].w;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[4].x;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[4].y;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[4].z;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[4].w;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[5].x;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[5].y;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[5].z;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[5].w;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = clamp(coord.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.x, uBounds_Stage1_c1_c0_c0_c0_c1_c0.y);
    _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c1_c0[6].x;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
    _output *= _input;
    return _output;
}
vec4 blend_multiply(vec4 src, vec4 dst) {
    return vec4(((1.0 - src.w) * dst.xyz + (1.0 - dst.w) * src.xyz) + src.xyz * dst.xyz, src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_multiply(ColorTableEffect_Stage1_c1_c0_c0_c0_c0_c0(inputColor), GaussianConvolution_Stage1_c1_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 TextureEffect_Stage1_c1_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    _output = texture(uTextureSampler_2_Stage1, vTransformedCoords_1_Stage0) * _input;
    return _output;
}
vec4 TextureEffect_Stage1_c1_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = textureProj(uTextureSampler_3_Stage1, vTransformedCoords_2_Stage0) * _input;
    return _output;
}
vec4 blend_src_over(vec4 src, vec4 dst) {
    return src + (1.0 - src.w) * dst;
}
vec4 blend_lighten(vec4 src, vec4 dst) {
    vec4 result = blend_src_over(src, dst);
    result.xyz = max(result.xyz, (1.0 - dst.w) * src.xyz + dst.xyz);
    return result;
}
vec4 ComposeTwo_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_lighten(TextureEffect_Stage1_c1_c0_c1_c0_c0_c0(inputColor), TextureEffect_Stage1_c1_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
float _guarded_divide(float n, float d) {
    return n / d;
}
float _color_dodge_component(float sc, float sa, float dc, float da) {
    if (dc == 0.0) {
        return sc * (1.0 - da);
    } else {
        float d = sa - sc;
        if (d == 0.0) {
            return (sa * da + sc * (1.0 - da)) + dc * (1.0 - sa);
        }
        d = min(da, _guarded_divide(dc * sa, d));
        return (d * sa + sc * (1.0 - da)) + dc * (1.0 - sa);
    }
}
vec4 blend_color_dodge(vec4 src, vec4 dst) {
    return vec4(_color_dodge_component(src.x, src.w, dst.x, dst.w), _color_dodge_component(src.y, src.w, dst.y, dst.w), _color_dodge_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_color_dodge(ComposeTwo_Stage1_c1_c0_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_src_atop(vec4 src, vec4 dst) {
    return dst.w * src + (1.0 - src.w) * dst;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_src_atop(EllipseEffect_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec3 vTransformedCoords_2_Stage0;
void main() {
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0);
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

