[require]
GLSL >= 1.40
GL_KHR_blend_equation_advanced

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uColor_Stage0;
uniform vec4 ucircle_Stage1_c0_c0_c0_c0;
uniform vec4 ucolor_Stage1_c0_c0_c1_c0;
uniform vec4 ucircle_Stage1_c1_c0;
noperspective in vec3 vDashParams_Stage0;
noperspective in vec4 vRectParams_Stage0;
vec4 CircleEffect_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float d;
    {
        d = (1.0 - length((ucircle_Stage1_c0_c0_c0_c0.xy - gl_FragCoord.xy) * ucircle_Stage1_c0_c0_c0_c0.w)) * ucircle_Stage1_c0_c0_c0_c0.z;
    }
    {
        _output = d > 0.5 ? _input : vec4(0.0);
    }
    return _output;
}
vec4 ConstColorProcessor_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    {
        _output = _input.w * ucolor_Stage1_c0_c0_c1_c0;
    }
    return _output;
}
vec4 blend_dst_over(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + dst;
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_dst_over(CircleEffect_Stage1_c0_c0_c0_c0(inputColor), ConstColorProcessor_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 CircleEffect_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    float d;
    {
        d = (1.0 - length((ucircle_Stage1_c1_c0.xy - gl_FragCoord.xy) * ucircle_Stage1_c1_c0.w)) * ucircle_Stage1_c1_c0.z;
    }
    {
        _output = _input * clamp(d, 0.0, 1.0);
    }
    return _output;
}
float _guarded_divide(float n, float d) {
    return n / d;
}
float _color_dodge_component(float sc, float sa, float dc, float da) {
    if (dc == 0.0) {
        return sc * (1.0 - da);
    } else {
        float d = sa - sc;
        if (d == 0.0) {
            return (sa * da + sc * (1.0 - da)) + dc * (1.0 - sa);
        }
        d = min(da, _guarded_divide(dc * sa, d));
        return (d * sa + sc * (1.0 - da)) + dc * (1.0 - sa);
    }
}
vec4 blend_color_dodge(vec4 src, vec4 dst) {
    return vec4(_color_dodge_component(src.x, src.w, dst.x, dst.w), _color_dodge_component(src.y, src.w, dst.y, dst.w), _color_dodge_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
        float xShifted = vDashParams_Stage0.x - floor(vDashParams_Stage0.x / vDashParams_Stage0.z) * vDashParams_Stage0.z;
        vec2 fragPosShifted = vec2(xShifted, vDashParams_Stage0.y);
        float xSub;
        xSub = min(fragPosShifted.x - vRectParams_Stage0.x, 0.0);
        xSub += min(vRectParams_Stage0.z - fragPosShifted.x, 0.0);
        float alpha = 1.0 + max(xSub, -1.0);
        outputCoverage_Stage0 = vec4(alpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_color_dodge(ComposeTwo_Stage1_c0_c0(inputColor), CircleEffect_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = outputCoverage_Stage0 * output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
in vec2 inPosition;
in vec3 inDashParams;
in vec4 inRect;
noperspective out vec3 vDashParams_Stage0;
noperspective out vec4 vRectParams_Stage0;
void main() {
    vDashParams_Stage0 = inDashParams;
    vRectParams_Stage0 = inRect;
    vec2 pos2 = inPosition;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

