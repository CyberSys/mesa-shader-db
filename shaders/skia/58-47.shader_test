[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform vec2 uScale_Stage1;
uniform vec4 uTexDom_Stage1;
uniform vec3 uDecalParams_Stage1;
uniform vec4 uk_Stage2;
uniform vec4 ucolor_Stage2_c0_c0;
uniform vec4 uk_Stage3;
uniform vec4 ucolor_Stage3_c1_c0;
uniform vec2 uDstTextureUpperLeft_Stage4;
uniform vec2 uDstTextureCoordScale_Stage4;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uDstTextureSampler_Stage4;
in vec2 vTransformedCoords_0_Stage0;
in vec2 vTransformedCoords_1_Stage0;
in vec2 vTransformedCoords_2_Stage0;
in vec2 vTransformedCoords_3_Stage0;
vec4 ConstColorProcessor_Stage2_c0_c0(vec4 _input, vec2 _coords) {
    vec4 _output;
    {
        _output = ucolor_Stage2_c0_c0;
    }
    return _output;
}
vec4 ConstColorProcessor_Stage3_c1_c0(vec4 _input, vec2 _coords) {
    vec4 _output;
    {
        _output = ucolor_Stage3_c1_c0;
    }
    return _output;
}
vec4 blend_dst_atop(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + src.w * dst;
}
void main() {
    vec4 output_Stage1;
    {
        vec4 dColor = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
        dColor.xyz = dColor.w < 9.9999999747524271e-07 ? vec3(0.0) : clamp(dColor.xyz / dColor.w, 0.0, 1.0);
        vec2 cCoords = vTransformedCoords_1_Stage0 + uScale_Stage1 * (dColor.yw - vec2(0.5));
        {
            vec2 origCoord = cCoords;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1.xy, uTexDom_Stage1.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1.y);
            if (err > uDecalParams_Stage1.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1.z < 1.0) {
                err = 0.0;
            }
            output_Stage1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
    }
    vec4 output_Stage2;
    {
        output_Stage2 = output_Stage1;
        vec4 dst = ConstColorProcessor_Stage2_c0_c0(vec4(1.0), vTransformedCoords_2_Stage0);
        output_Stage2 = clamp((((uk_Stage2.x * output_Stage2) * dst + uk_Stage2.y * output_Stage2) + uk_Stage2.z * dst) + uk_Stage2.w, 0.0, 1.0);
        {
            output_Stage2.xyz = min(output_Stage2.xyz, output_Stage2.w);
        }
    }
    vec4 output_Stage3;
    {
        output_Stage3 = vec4(1.0);
        vec4 dst = ConstColorProcessor_Stage3_c1_c0(vec4(1.0), vTransformedCoords_3_Stage0);
        output_Stage3 = clamp(((vec4(uk_Stage3.x) * dst + vec4(uk_Stage3.y)) + uk_Stage3.z * dst) + uk_Stage3.w, 0.0, 1.0);
        {
            output_Stage3.xyz = min(output_Stage3.xyz, output_Stage3.w);
        }
    }
    {
        if (all(lessThanEqual(output_Stage3.xyz, vec3(0.0)))) {
            discard;
        }
        vec2 _dstTexCoord = (gl_FragCoord.xy - uDstTextureUpperLeft_Stage4) * uDstTextureCoordScale_Stage4;
        vec4 _dstColor = texture(uDstTextureSampler_Stage4, _dstTexCoord);
        sk_FragColor = blend_dst_atop(output_Stage2, _dstColor);
        sk_FragColor = output_Stage3 * sk_FragColor + (vec4(1.0) - output_Stage3) * _dstColor;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
in vec2 inPosition;
in vec2 inLocalCoord;
out vec2 vTransformedCoords_0_Stage0;
out vec2 vTransformedCoords_1_Stage0;
out vec2 vTransformedCoords_2_Stage0;
out vec2 vTransformedCoords_3_Stage0;
void main() {
    vec3 pos3 = uViewM_Stage0 * vec3(inPosition, 1.0);
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    gl_Position = vec4(pos3.x, pos3.y, 0.0, pos3.z);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

