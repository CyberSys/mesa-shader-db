[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uinnerRect_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec4 uinvRadiiLTRB_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec2 uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec2 uBounds_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec4 uKernel_Stage1_c0_c0_c1_c0_c0_c0[5];
uniform vec2 uImageIncrement_Stage1_c0_c0_c1_c0_c1_c0;
uniform vec4 uKernel_Stage1_c0_c0_c1_c0_c1_c0[5];
uniform vec2 uKernelOffset_Stage1_c0_c0_c1_c0_c1_c0;
uniform float uGain_Stage1_c0_c0_c1_c0_c1_c0;
uniform float uBias_Stage1_c0_c0_c1_c0_c1_c0;
uniform vec2 uImageIncrement_Stage1_c1_c0_c0_c0;
uniform float uSurfaceScale_Stage1_c1_c0_c0_c0;
uniform vec3 uLightColor_Stage1_c1_c0_c0_c0;
uniform float uKS_Stage1_c1_c0_c0_c0;
uniform float uShininess_Stage1_c1_c0_c0_c0;
uniform vec4 uTexDom_Stage1_c1_c0_c0_c0;
uniform vec3 uDecalParams_Stage1_c1_c0_c0_c0;
uniform vec3 uLightLocation_Stage1_c1_c0_c0_c0;
uniform float uExponent_Stage1_c1_c0_c0_c0;
uniform float uCosInnerConeAngle_Stage1_c1_c0_c0_c0;
uniform float uCosOuterConeAngle_Stage1_c1_c0_c0_c0;
uniform float uConeScale_Stage1_c1_c0_c0_c0;
uniform vec3 uS_Stage1_c1_c0_c0_c0;
uniform sampler2D uTextureSampler_0_Stage0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
uniform sampler2D uTextureSampler_3_Stage1;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vtextureCoords_Stage0;
flat in vec4 vtextureDomain_Stage0;
flat in vec4 vcolor_Stage0;
vec4 EllipticalRRect_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c0_c0_c0_c0_c0_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c0_c0_c0_c0_c0_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    vec2 Z = max(max(dxy0 * uinvRadiiLTRB_Stage1_c0_c0_c0_c0_c0_c0.xy, dxy1 * uinvRadiiLTRB_Stage1_c0_c0_c0_c0_c0_c0.zw), 0.0);
    float implicit = dot(Z, dxy) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    grad_dot = max(grad_dot, 9.9999997473787516e-05);
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha = clamp(0.5 - approx_dist, 0.0, 1.0);
    _output = _input * alpha;
    return _output;
}
vec4 ConfigConversionEffect_Stage1_c0_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = floor(_input * 255.0 + 0.5) / 255.0;
    {
        _output.xyz = floor((_output.xyz * _output.w) * 255.0 + 0.5) / 255.0;
    }
    return _output;
}
vec4 blend_multiply(vec4 src, vec4 dst) {
    return vec4(((1.0 - src.w) * dst.xyz + (1.0 - dst.w) * src.xyz) + src.xyz * dst.xyz, src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_multiply(EllipticalRRect_Stage1_c0_c0_c0_c0_c0_c0(inputColor), ConfigConversionEffect_Stage1_c0_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 GaussianConvolution_Stage1_c0_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_0_Stage0 - 9.0 * uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    vec2 coordSampled = vec2(0.0, 0.0);
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[0].x;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[0].y;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[0].z;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[0].w;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[1].x;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[1].y;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[1].z;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[1].w;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[2].x;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[2].y;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[2].z;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[2].w;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[3].x;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[3].y;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[3].z;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[3].w;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[4].x;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[4].y;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x, uBounds_Stage1_c0_c0_c1_c0_c0_c0.y - uBounds_Stage1_c0_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c0_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[4].z;
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    _output *= _input;
    return _output;
}
vec4 MatrixConvolution_Stage1_c0_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_1_Stage0 - uKernelOffset_Stage1_c0_c0_c1_c0_c1_c0 * uImageIncrement_Stage1_c0_c0_c1_c0_c1_c0;
    vec4 c;
    {
        float k = uKernel_Stage1_c0_c0_c1_c0_c1_c0[0].x;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c1_c0_c1_c0[0].y;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c1_c0_c1_c0[0].z;
        {
            vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c1_c0_c1_c0[0].w;
        {
            vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c1_c0_c1_c0[1].x;
        {
            vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c1_c0_c1_c0[1].y;
        {
            vec2 origCoord = coord + vec2(5.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c1_c0_c1_c0[1].z;
        {
            vec2 origCoord = coord + vec2(6.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c1_c0_c1_c0[1].w;
        {
            vec2 origCoord = coord + vec2(7.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c1_c0_c1_c0[2].x;
        {
            vec2 origCoord = coord + vec2(8.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c1_c0_c1_c0[2].y;
        {
            vec2 origCoord = coord + vec2(9.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c1_c0_c1_c0[2].z;
        {
            vec2 origCoord = coord + vec2(10.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c1_c0_c1_c0[2].w;
        {
            vec2 origCoord = coord + vec2(11.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c1_c0_c1_c0[3].x;
        {
            vec2 origCoord = coord + vec2(12.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c1_c0_c1_c0[3].y;
        {
            vec2 origCoord = coord + vec2(13.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c1_c0_c1_c0[3].z;
        {
            vec2 origCoord = coord + vec2(14.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c1_c0_c1_c0[3].w;
        {
            vec2 origCoord = coord + vec2(15.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c1_c0_c1_c0[4].x;
        {
            vec2 origCoord = coord + vec2(16.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c1_c0_c1_c0[4].y;
        {
            vec2 origCoord = coord + vec2(17.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c1_c0_c1_c0[4].z;
        {
            vec2 origCoord = coord + vec2(18.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c1_c0_c1_c0[4].w;
        {
            vec2 origCoord = coord + vec2(19.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    _output = sum * uGain_Stage1_c0_c0_c1_c0_c1_c0 + uBias_Stage1_c0_c0_c1_c0_c1_c0;
    _output.w = clamp(_output.w, 0.0, 1.0);
    _output.xyz = clamp(_output.xyz, 0.0, _output.w);
    _output *= _input;
    return _output;
}
vec4 blend_src_over(vec4 src, vec4 dst) {
    return src + (1.0 - src.w) * dst;
}
vec4 ComposeTwo_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_over(GaussianConvolution_Stage1_c0_c0_c1_c0_c0_c0(inputColor), MatrixConvolution_Stage1_c0_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_over(ComposeTwo_Stage1_c0_c0_c0_c0(inputColor), ComposeTwo_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 light_Stage1_c1_c0_c0_c0(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    vec3 halfDir = normalize(surfaceToLight + vec3(0.0, 0.0, 1.0));
    float colorScale = uKS_Stage1_c1_c0_c0_c0 * pow(dot(normal, halfDir), uShininess_Stage1_c1_c0_c0_c0);
    vec3 color = lightColor * clamp(colorScale, 0.0, 1.0);
    return vec4(color, max(max(color.x, color.y), color.z));
}
float sobel_Stage1_c1_c0_c0_c0(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage1_c1_c0_c0_c0(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage1_c1_c0_c0_c0(float m[9], float surfaceScale) {
    return pointToNormal_Stage1_c1_c0_c0_c0(sobel_Stage1_c1_c0_c0_c0(m[0], m[1], m[3], m[4], 0.0, 0.0, 0.66666698455810547), sobel_Stage1_c1_c0_c0_c0(m[0], m[3], m[1], m[4], 0.0, 0.0, 0.66666698455810547), surfaceScale);
}
vec3 lightColor_Stage1_c1_c0_c0_c0(vec3 surfaceToLight) {
    float cosAngle = -dot(surfaceToLight, uS_Stage1_c1_c0_c0_c0);
    if (cosAngle < uCosOuterConeAngle_Stage1_c1_c0_c0_c0) {
        return vec3(0.0);
    }
    float scale = pow(cosAngle, uExponent_Stage1_c1_c0_c0_c0);
    if (cosAngle < uCosInnerConeAngle_Stage1_c1_c0_c0_c0) {
        return ((uLightColor_Stage1_c1_c0_c0_c0 * scale) * (cosAngle - uCosOuterConeAngle_Stage1_c1_c0_c0_c0)) * uConeScale_Stage1_c1_c0_c0_c0;
    }
    return uLightColor_Stage1_c1_c0_c0_c0;
}
vec4 SpecularLighting_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_2_Stage0;
    float m[9];
    vec4 temp0;
    {
        vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage1_c1_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[0] = temp0.w;
    vec4 temp1;
    {
        vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage1_c1_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[1] = temp1.w;
    vec4 temp2;
    {
        vec2 origCoord = coord + uImageIncrement_Stage1_c1_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[2] = temp2.w;
    vec4 temp3;
    {
        vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[3] = temp3.w;
    vec4 temp4;
    {
        vec2 origCoord = coord;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[4] = temp4.w;
    vec4 temp5;
    {
        vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[5] = temp5.w;
    vec4 temp6;
    {
        vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage1_c1_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[6] = temp6.w;
    vec4 temp7;
    {
        vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage1_c1_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[7] = temp7.w;
    vec4 temp8;
    {
        vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage1_c1_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[8] = temp8.w;
    vec3 surfaceToLight = normalize(uLightLocation_Stage1_c1_c0_c0_c0 - vec3(gl_FragCoord.xy, uSurfaceScale_Stage1_c1_c0_c0_c0 * m[4]));
    _output = light_Stage1_c1_c0_c0_c0(normal_Stage1_c1_c0_c0_c0(m, uSurfaceScale_Stage1_c1_c0_c0_c0), surfaceToLight, lightColor_Stage1_c1_c0_c0_c0(surfaceToLight));
    _output *= _input;
    return _output;
}
vec4 ColorTableEffect_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float nonZeroAlpha = max(_input.w, 9.9999997473787516e-05);
    vec4 coord = vec4(_input.xyz / nonZeroAlpha, nonZeroAlpha);
    coord = coord * 0.9960939884185791 + vec4(0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579);
    _output.w = texture(uTextureSampler_3_Stage1, vec2(coord.w, 0.125)).w;
    _output.x = texture(uTextureSampler_3_Stage1, vec2(coord.x, 0.375)).w;
    _output.y = texture(uTextureSampler_3_Stage1, vec2(coord.y, 0.625)).w;
    _output.z = texture(uTextureSampler_3_Stage1, vec2(coord.z, 0.875)).w;
    _output.xyz *= _output.w;
    return _output;
}
float _blend_color_luminance(vec3 color) {
    return dot(vec3(0.30000001192092896, 0.5899999737739563, 0.10999999940395355), color);
}
vec3 _blend_set_color_luminance(vec3 hueSatColor, float alpha, vec3 lumColor) {
    float lum = _blend_color_luminance(lumColor);
    vec3 result = (lum - _blend_color_luminance(hueSatColor)) + hueSatColor;
    float minComp = min(min(result.x, result.y), result.z);
    float maxComp = max(max(result.x, result.y), result.z);
    if (minComp < 0.0 && lum != minComp) {
        result = lum + ((result - lum) * lum) / (lum - minComp);
    }
    if (maxComp > alpha && maxComp != lum) {
        return lum + ((result - lum) * (alpha - lum)) / (maxComp - lum);
    }
    return result;
}
vec4 blend_luminosity(vec4 src, vec4 dst) {
    float alpha = dst.w * src.w;
    vec3 sda = src.xyz * dst.w;
    vec3 dsa = dst.xyz * src.w;
    return vec4((((_blend_set_color_luminance(dsa, alpha, sda) + dst.xyz) - dsa) + src.xyz) - sda, (src.w + dst.w) - alpha);
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_luminosity(SpecularLighting_Stage1_c1_c0_c0_c0(inputColor), ColorTableEffect_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_screen(vec4 src, vec4 dst) {
    return src + (1.0 - src) * dst;
}
void main() {
    vec4 outputColor_Stage0;
    {
        vec2 textureCoords;
        textureCoords = vtextureCoords_Stage0;
        vec4 textureDomain;
        textureDomain = vtextureDomain_Stage0;
        outputColor_Stage0 = vcolor_Stage0;
        outputColor_Stage0 = texture(uTextureSampler_0_Stage0, clamp(textureCoords, textureDomain.xy, textureDomain.zw)) * outputColor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_screen(ComposeTwo_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 position;
in vec2 textureCoords;
in vec4 textureDomain;
in vec4 color;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vtextureCoords_Stage0;
flat out vec4 vtextureDomain_Stage0;
flat out vec4 vcolor_Stage0;
void main() {
    vec2 pos2 = position;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(textureCoords, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(textureCoords, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(textureCoords, 1.0)).xy;
    vtextureCoords_Stage0 = textureCoords;
    vtextureDomain_Stage0 = textureDomain;
    vcolor_Stage0 = color;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

