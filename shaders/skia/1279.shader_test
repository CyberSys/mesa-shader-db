[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uellipse_Stage1;
uniform vec4 ucolor0_Stage2;
uniform vec4 ucolor1_Stage2;
uniform vec4 ucolor2_Stage2;
uniform vec4 ucolor3_Stage2;
uniform vec4 ucolor4_Stage2;
uniform vec4 ucolor5_Stage2;
uniform float uPixelSize_Stage5;
uniform vec2 uRange_Stage5;
uniform sampler2D uTextureSampler_0_Stage5;
noperspective in vec2 vEllipseOffsets_Stage0;
noperspective in vec4 vEllipseRadii_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vinColor_Stage0;
        vec2 offset = vEllipseOffsets_Stage0;
        offset *= vEllipseRadii_Stage0.xy;
        float test = dot(offset, offset) - 1.0;
        vec2 grad = (2.0 * offset) * vEllipseRadii_Stage0.xy;
        float grad_dot = dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        offset = vEllipseOffsets_Stage0 * vEllipseRadii_Stage0.zw;
        test = dot(offset, offset) - 1.0;
        grad = (2.0 * offset) * vEllipseRadii_Stage0.zw;
        grad_dot = dot(grad, grad);
        invlen = inversesqrt(grad_dot);
        edgeAlpha *= clamp(0.5 + test * invlen, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec2 d = gl_FragCoord.xy - uellipse_Stage1.xy;
        vec2 Z = d * uellipse_Stage1.zw;
        float implicit = dot(Z, d) - 1.0;
        float grad_dot = 4.0 * dot(Z, Z);
        {
            grad_dot = max(grad_dot, 1.1754999560161448e-38);
        }
        float approx_dist = implicit * inversesqrt(grad_dot);
        float alpha;
        {
            alpha = clamp(0.5 - approx_dist, 0.0, 1.0);
        }
        output_Stage1 = outputColor_Stage0 * alpha;
    }
    vec4 output_Stage2;
    {
        output_Stage2 = outputCoverage_Stage0;
        float alpha = 255.0 * output_Stage2.w;
        if (alpha < 0.5) {
            output_Stage2 = ucolor0_Stage2;
        } else if (alpha < 1.5) {
            output_Stage2 = ucolor1_Stage2;
        } else if (alpha < 2.5) {
            output_Stage2 = ucolor2_Stage2;
        } else if (alpha < 3.5) {
            output_Stage2 = ucolor3_Stage2;
        } else if (alpha < 4.5) {
            output_Stage2 = ucolor4_Stage2;
        } else {
            output_Stage2 = ucolor5_Stage2;
        }
    }
    vec4 output_Stage3;
    {
        output_Stage3 = floor(output_Stage2 * 255.0 + 0.5) / 255.0;
        {
            output_Stage3.xyz = output_Stage3.w <= 0.0 ? vec3(0.0) : floor((output_Stage3.xyz / output_Stage3.w) * 255.0 + 0.5) / 255.0;
        }
    }
    vec4 output_Stage4;
    {
        output_Stage4 = output_Stage3;
    }
    vec4 output_Stage5;
    {
        output_Stage5 = vec4(1.0, 1.0, 1.0, 1.0);
        vec2 coord = vTransformedCoords_1_Stage0;
        coord.y -= uPixelSize_Stage5;
        for (int i = 0;i < 3; i++) {
            output_Stage5 = min(output_Stage5, texture(uTextureSampler_0_Stage5, coord));
            coord.y += uPixelSize_Stage5;
        }
        output_Stage5 *= output_Stage4;
    }
    {
        sk_FragColor = output_Stage5 * output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffset;
in vec4 inEllipseRadii;
noperspective out vec2 vEllipseOffsets_Stage0;
noperspective out vec4 vEllipseRadii_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vEllipseOffsets_Stage0 = inEllipseOffset;
    vEllipseRadii_Stage0 = inEllipseRadii;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

