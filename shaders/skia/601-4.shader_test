[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec2 uImageIncrement_Stage2_c0_c0;
uniform vec2 uBounds_Stage2_c0_c0;
uniform vec4 uKernel_Stage2_c0_c0[6];
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
vec4 GaussianConvolution_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_1_Stage0 - 11.0 * uImageIncrement_Stage2_c0_c0;
    vec2 coordSampled = vec2(0.0, 0.0);
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[0].x;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[0].y;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[0].z;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[0].w;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[1].x;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[1].y;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[1].z;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[1].w;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[2].x;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[2].y;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[2].z;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[2].w;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[3].x;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[3].y;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[3].z;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[3].w;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[4].x;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[4].y;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[4].z;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[4].w;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[5].x;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[5].y;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage2_c0_c0.x && coord.x <= uBounds_Stage2_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[5].z;
    }
    coord += uImageIncrement_Stage2_c0_c0;
    _output *= _input;
    return _output;
}
float _guarded_divide(float n, float d) {
    return n / d;
}
float _color_burn_component(float sc, float sa, float dc, float da) {
    if (da == dc) {
        return (sa * da + sc * (1.0 - da)) + dc * (1.0 - sa);
    } else if (sc == 0.0) {
        return dc * (1.0 - sa);
    }
    float d = max(0.0, da - _guarded_divide((da - dc) * sa, sc));
    return (d * sa + sc * (1.0 - da)) + dc * (1.0 - sa);
}
vec4 blend_color_burn(vec4 src, vec4 dst) {
    return vec4(_color_burn_component(src.x, src.w, dst.x, dst.w), _color_burn_component(src.y, src.w, dst.y, dst.w), _color_burn_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
}
void main() {
    vec4 output_Stage1;
    {
        output_Stage1 = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
    }
    vec4 output_Stage2;
    {
        output_Stage2 = blend_color_burn(GaussianConvolution_Stage2_c0_c0(vec4(1.0)), output_Stage1);
    }
    {
        sk_FragColor = output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 position;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(localCoord, 1.0)).xy;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

