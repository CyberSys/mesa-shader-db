[require]
GLSL >= 1.40
GL_KHR_blend_equation_advanced

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec2 uImageIncrement_Stage1;
uniform vec2 uBounds_Stage1;
uniform vec4 uKernel_Stage1[6];
uniform vec2 uImageIncrement_Stage2;
uniform float uSurfaceScale_Stage2;
uniform vec3 uLightColor_Stage2;
uniform float uKD_Stage2;
uniform vec4 uTexDom_Stage2;
uniform vec3 uDecalParams_Stage2;
uniform vec3 uLightLocation_Stage2;
uniform float uExponent_Stage2;
uniform float uCosInnerConeAngle_Stage2;
uniform float uCosOuterConeAngle_Stage2;
uniform float uConeScale_Stage2;
uniform vec3 uS_Stage2;
uniform vec2 uImageIncrement_Stage3;
uniform vec4 uKernel_Stage3[6];
uniform vec2 uKernelOffset_Stage3;
uniform float uGain_Stage3;
uniform float uBias_Stage3;
uniform vec4 uTexDom_Stage3;
uniform float uinnerThreshold_Stage4;
uniform float uouterThreshold_Stage4;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
uniform sampler2D uTextureSampler_0_Stage3;
uniform sampler2D uTextureSampler_0_Stage4;
noperspective in vec2 vEllipseOffsets_Stage0;
noperspective in vec4 vEllipseRadii_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vTransformedCoords_3_Stage0;
vec4 light_Stage2(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    float colorScale = uKD_Stage2 * dot(normal, surfaceToLight);
    return vec4(lightColor * clamp(colorScale, 0.0, 1.0), 1.0);
}
float sobel_Stage2(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage2(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage2(float m[9], float surfaceScale) {
    return pointToNormal_Stage2(sobel_Stage2(m[1], m[2], m[4], m[5], 0.0, 0.0, 0.66666698455810547), sobel_Stage2(0.0, 0.0, m[1], m[4], m[2], m[5], 0.66666698455810547), surfaceScale);
}
vec3 lightColor_Stage2(vec3 surfaceToLight) {
    float cosAngle = -dot(surfaceToLight, uS_Stage2);
    if (cosAngle < uCosOuterConeAngle_Stage2) {
        return vec3(0.0);
    }
    float scale = pow(cosAngle, uExponent_Stage2);
    if (cosAngle < uCosInnerConeAngle_Stage2) {
        return ((uLightColor_Stage2 * scale) * (cosAngle - uCosOuterConeAngle_Stage2)) * uConeScale_Stage2;
    }
    return uLightColor_Stage2;
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vinColor_Stage0;
        vec2 offset = vEllipseOffsets_Stage0;
        offset *= vEllipseRadii_Stage0.xy;
        float test = dot(offset, offset) - 1.0;
        vec2 grad = (2.0 * offset) * vEllipseRadii_Stage0.xy;
        float grad_dot = dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        offset = vEllipseOffsets_Stage0 * vEllipseRadii_Stage0.zw;
        test = dot(offset, offset) - 1.0;
        grad = (2.0 * offset) * vEllipseRadii_Stage0.zw;
        grad_dot = dot(grad, grad);
        invlen = inversesqrt(grad_dot);
        edgeAlpha *= clamp(0.5 + test * invlen, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        output_Stage1 = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_0_Stage0 - 11.0 * uImageIncrement_Stage1;
        vec2 coordSampled = vec2(0.0, 0.0);
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[0].x;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[0].y;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[0].z;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[0].w;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[1].x;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[1].y;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[1].z;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[1].w;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[2].x;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[2].y;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[2].z;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[2].w;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[3].x;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[3].y;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[3].z;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[3].w;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[4].x;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[4].y;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[4].z;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[4].w;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[5].x;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[5].y;
        }
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage1.x && coord.y <= uBounds_Stage1.y) {
            output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[5].z;
        }
        coord += uImageIncrement_Stage1;
        output_Stage1 *= outputColor_Stage0;
    }
    vec4 output_Stage2;
    {
        vec2 coord = vTransformedCoords_1_Stage0;
        float m[9];
        vec4 temp0;
        {
            vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage2;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
            if (err > uDecalParams_Stage2.z) {
                err = 1.0;
            } else if (uDecalParams_Stage2.z < 1.0) {
                err = 0.0;
            }
            temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[0] = temp0.w;
        vec4 temp1;
        {
            vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage2;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
            if (err > uDecalParams_Stage2.z) {
                err = 1.0;
            } else if (uDecalParams_Stage2.z < 1.0) {
                err = 0.0;
            }
            temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[1] = temp1.w;
        vec4 temp2;
        {
            vec2 origCoord = coord + uImageIncrement_Stage2;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
            if (err > uDecalParams_Stage2.z) {
                err = 1.0;
            } else if (uDecalParams_Stage2.z < 1.0) {
                err = 0.0;
            }
            temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[2] = temp2.w;
        vec4 temp3;
        {
            vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage2;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
            if (err > uDecalParams_Stage2.z) {
                err = 1.0;
            } else if (uDecalParams_Stage2.z < 1.0) {
                err = 0.0;
            }
            temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[3] = temp3.w;
        vec4 temp4;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
            if (err > uDecalParams_Stage2.z) {
                err = 1.0;
            } else if (uDecalParams_Stage2.z < 1.0) {
                err = 0.0;
            }
            temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[4] = temp4.w;
        vec4 temp5;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage2;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
            if (err > uDecalParams_Stage2.z) {
                err = 1.0;
            } else if (uDecalParams_Stage2.z < 1.0) {
                err = 0.0;
            }
            temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[5] = temp5.w;
        vec4 temp6;
        {
            vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage2;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
            if (err > uDecalParams_Stage2.z) {
                err = 1.0;
            } else if (uDecalParams_Stage2.z < 1.0) {
                err = 0.0;
            }
            temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[6] = temp6.w;
        vec4 temp7;
        {
            vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage2;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
            if (err > uDecalParams_Stage2.z) {
                err = 1.0;
            } else if (uDecalParams_Stage2.z < 1.0) {
                err = 0.0;
            }
            temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[7] = temp7.w;
        vec4 temp8;
        {
            vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage2;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
            if (err > uDecalParams_Stage2.z) {
                err = 1.0;
            } else if (uDecalParams_Stage2.z < 1.0) {
                err = 0.0;
            }
            temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[8] = temp8.w;
        vec3 surfaceToLight = normalize(uLightLocation_Stage2 - vec3(gl_FragCoord.xy, uSurfaceScale_Stage2 * m[4]));
        output_Stage2 = light_Stage2(normal_Stage2(m, uSurfaceScale_Stage2), surfaceToLight, lightColor_Stage2(surfaceToLight));
        output_Stage2 *= output_Stage1;
    }
    vec4 output_Stage3;
    {
        vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_2_Stage0 - uKernelOffset_Stage3 * uImageIncrement_Stage3;
        vec4 c;
        {
            float k = uKernel_Stage3[0].x;
            {
                vec2 origCoord = coord;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[0].y;
            {
                vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[0].z;
            {
                vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[0].w;
            {
                vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[1].x;
            {
                vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[1].y;
            {
                vec2 origCoord = coord + vec2(5.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[1].z;
            {
                vec2 origCoord = coord + vec2(6.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[1].w;
            {
                vec2 origCoord = coord + vec2(7.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[2].x;
            {
                vec2 origCoord = coord + vec2(8.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[2].y;
            {
                vec2 origCoord = coord + vec2(9.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[2].z;
            {
                vec2 origCoord = coord + vec2(10.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[2].w;
            {
                vec2 origCoord = coord + vec2(11.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[3].x;
            {
                vec2 origCoord = coord + vec2(12.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[3].y;
            {
                vec2 origCoord = coord + vec2(13.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[3].z;
            {
                vec2 origCoord = coord + vec2(14.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[3].w;
            {
                vec2 origCoord = coord + vec2(15.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[4].x;
            {
                vec2 origCoord = coord + vec2(16.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[4].y;
            {
                vec2 origCoord = coord + vec2(17.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[4].z;
            {
                vec2 origCoord = coord + vec2(18.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[4].w;
            {
                vec2 origCoord = coord + vec2(19.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[5].x;
            {
                vec2 origCoord = coord + vec2(20.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[5].y;
            {
                vec2 origCoord = coord + vec2(21.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage3[5].z;
            {
                vec2 origCoord = coord + vec2(22.0, 0.0) * uImageIncrement_Stage3;
                vec2 clampedCoord;
                clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
                vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        output_Stage3 = sum * uGain_Stage3 + uBias_Stage3;
        output_Stage3.w = clamp(output_Stage3.w, 0.0, 1.0);
        output_Stage3.xyz = clamp(output_Stage3.xyz, 0.0, output_Stage3.w);
        output_Stage3 *= output_Stage2;
    }
    vec4 output_Stage4;
    {
        vec4 color = outputCoverage_Stage0;
        vec4 mask_color = texture(uTextureSampler_0_Stage4, vTransformedCoords_3_Stage0);
        if (mask_color.w < 0.5) {
            if (color.w > uouterThreshold_Stage4) {
                float scale = uouterThreshold_Stage4 / color.w;
                color.xyz *= scale;
                color.w = uouterThreshold_Stage4;
            }
        } else if (color.w < uinnerThreshold_Stage4) {
            float scale = uinnerThreshold_Stage4 / max(0.0010000000474974513, color.w);
            color.xyz *= scale;
            color.w = uinnerThreshold_Stage4;
        }
        output_Stage4 = color;
    }
    {
        sk_FragColor = output_Stage4 * output_Stage3;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffset;
in vec4 inEllipseRadii;
noperspective out vec2 vEllipseOffsets_Stage0;
noperspective out vec4 vEllipseRadii_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vTransformedCoords_3_Stage0;
void main() {
    vEllipseOffsets_Stage0 = inEllipseOffset;
    vEllipseRadii_Stage0 = inEllipseRadii;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

