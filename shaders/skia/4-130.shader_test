[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uCoordTransformMatrix_1_Stage0;
uniform vec4 uCoordTransformMatrix_2_Stage0;
uniform vec4 uCoordTransformMatrix_3_Stage0;
uniform float ucutoff_Stage1_c0_c0;
uniform float uslope_Stage1_c0_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
noperspective in vec2 vTransformedCoords_0_Stage0;
flat in vec4 vcolor_Stage0;
vec4 TextureEffect_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input, vec2 _coords) {
    _coords = _coords * uCoordTransformMatrix_1_Stage0.xz + uCoordTransformMatrix_1_Stage0.yw;
    vec4 _output;
    _output = texture(uTextureSampler_0_Stage1, _coords) * _input;
    return _output;
}
vec4 OverrideInputFragmentProcessor_Stage1_c0_c0_c0_c0(vec4 _input, vec2 _coords) {
    vec4 _output;
    _output = TextureEffect_Stage1_c0_c0_c0_c0_c0_c0(vec4(1.0, 1.0, 1.0, 1.0), _coords);
    return _output;
}
vec4 TextureEffect_Stage1_c0_c0_c1_c0_c0_c0(vec4 _input, vec2 _coords) {
    _coords = _coords * uCoordTransformMatrix_2_Stage0.xz + uCoordTransformMatrix_2_Stage0.yw;
    vec4 _output;
    _output = texture(uTextureSampler_1_Stage1, _coords) * _input;
    return _output;
}
vec4 OverrideInputFragmentProcessor_Stage1_c0_c0_c1_c0(vec4 _input, vec2 _coords) {
    vec4 _output;
    _output = TextureEffect_Stage1_c0_c0_c1_c0_c0_c0(vec4(1.0, 1.0, 1.0, 1.0), _coords);
    return _output;
}
vec4 TextureEffect_Stage1_c0_c0_c2_c0(vec4 _input, vec2 _coords) {
    _coords = _coords * uCoordTransformMatrix_3_Stage0.xz + uCoordTransformMatrix_3_Stage0.yw;
    vec4 _output;
    _output = texture(uTextureSampler_2_Stage1, _coords) * _input;
    return _output;
}
float smooth_cutoff_Stage1_c0_c0(float x) {
    x = x * uslope_Stage1_c0_c0 + (0.5 - uslope_Stage1_c0_c0 * ucutoff_Stage1_c0_c0);
    return clamp(x, 0.0, 1.0);
}
vec4 runtime_shader_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    _output = _input;
    vec4 before = OverrideInputFragmentProcessor_Stage1_c0_c0_c0_c0(vec4(1.0), vTransformedCoords_0_Stage0);
    vec4 after = OverrideInputFragmentProcessor_Stage1_c0_c0_c1_c0(vec4(1.0), vTransformedCoords_0_Stage0);
    float m = smooth_cutoff_Stage1_c0_c0(TextureEffect_Stage1_c0_c0_c2_c0(vec4(1.0), vTransformedCoords_0_Stage0).x);
    _output = mix(before, after, m);
    return _output;
}
vec4 ClampFragmentProcessor_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    {
        float alpha = clamp(_input.w, 0.0, 1.0);
        _output = vec4(clamp(_input.xyz, 0.0, alpha), alpha);
    }
    return _output;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
    }
    vec4 output_Stage1;
    {
        output_Stage1 = ClampFragmentProcessor_Stage1_c1_c0(runtime_shader_Stage1_c0_c0(outputColor_Stage0));
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 position;
in vec4 color;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
flat out vec4 vcolor_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vcolor_Stage0 = color;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

