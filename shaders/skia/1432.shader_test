[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 ucolor0_Stage1_c0_c0;
uniform vec4 ucolor1_Stage1_c0_c0;
uniform vec4 ucolor2_Stage1_c0_c0;
uniform vec4 ucolor3_Stage1_c0_c0;
uniform vec4 ucolor4_Stage1_c0_c0;
uniform vec4 ucolor5_Stage1_c0_c0;
uniform vec4 ucircleData_Stage1_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
noperspective in vec2 vEllipseOffsets_Stage0;
noperspective in vec4 vEllipseRadii_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
vec4 Overdraw_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    _output = _input;
    float alpha = 255.0 * _output.w;
    if (alpha < 0.5) {
        _output = ucolor0_Stage1_c0_c0;
    } else if (alpha < 1.5) {
        _output = ucolor1_Stage1_c0_c0;
    } else if (alpha < 2.5) {
        _output = ucolor2_Stage1_c0_c0;
    } else if (alpha < 3.5) {
        _output = ucolor3_Stage1_c0_c0;
    } else if (alpha < 4.5) {
        _output = ucolor4_Stage1_c0_c0;
    } else {
        _output = ucolor5_Stage1_c0_c0;
    }
    return _output;
}
vec4 CircleBlurFragmentProcessor_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 vec = vec2((gl_FragCoord.x - ucircleData_Stage1_c1_c0.x) * ucircleData_Stage1_c1_c0.w, (gl_FragCoord.y - ucircleData_Stage1_c1_c0.y) * ucircleData_Stage1_c1_c0.w);
    float dist = length(vec) + (0.5 - ucircleData_Stage1_c1_c0.z) * ucircleData_Stage1_c1_c0.w;
    _output = _input * texture(uTextureSampler_0_Stage1, vec2(dist, 0.5)).w;
    return _output;
}
vec4 blend_dst_atop(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + src.w * dst;
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vinColor_Stage0;
        vec2 offset = vEllipseOffsets_Stage0;
        offset *= vEllipseRadii_Stage0.xy;
        float test = dot(offset, offset) - 1.0;
        vec2 grad = (2.0 * offset) * vEllipseRadii_Stage0.xy;
        float grad_dot = dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        offset = vEllipseOffsets_Stage0 * vEllipseRadii_Stage0.zw;
        test = dot(offset, offset) - 1.0;
        grad = (2.0 * offset) * vEllipseRadii_Stage0.zw;
        grad_dot = dot(grad, grad);
        invlen = inversesqrt(grad_dot);
        edgeAlpha *= clamp(0.5 + test * invlen, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_dst_atop(Overdraw_Stage1_c0_c0(inputColor), CircleBlurFragmentProcessor_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = outputCoverage_Stage0 * output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffset;
in vec4 inEllipseRadii;
noperspective out vec2 vEllipseOffsets_Stage0;
noperspective out vec4 vEllipseRadii_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vEllipseOffsets_Stage0 = inEllipseOffset;
    vEllipseRadii_Stage0 = inEllipseRadii;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

