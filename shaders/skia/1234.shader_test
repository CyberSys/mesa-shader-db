[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
uniform vec2 ufocalParams_Stage2_c0_c0_c0_c0;
uniform vec4 uscale0_1_Stage2_c0_c0_c1_c0;
uniform vec4 uscale2_3_Stage2_c0_c0_c1_c0;
uniform vec4 uscale4_5_Stage2_c0_c0_c1_c0;
uniform vec4 uscale6_7_Stage2_c0_c0_c1_c0;
uniform vec4 ubias0_1_Stage2_c0_c0_c1_c0;
uniform vec4 ubias2_3_Stage2_c0_c0_c1_c0;
uniform vec4 ubias4_5_Stage2_c0_c0_c1_c0;
uniform vec4 ubias6_7_Stage2_c0_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage2_c0_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage2_c0_c0_c1_c0;
uniform vec4 uellipse_Stage3;
uniform vec4 uellipse_Stage4;
uniform float uPixelSize_Stage5;
uniform vec2 uRange_Stage5;
uniform sampler2D uTextureSampler_0_Stage5;
noperspective in vec4 vinCircleEdge_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
vec4 TwoPointConicalGradientLayout_Stage2_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 p = vTransformedCoords_0_Stage0;
    float t = -1.0;
    float v = 1.0;
    {
        {
            float invR1 = ufocalParams_Stage2_c0_c0_c0_c0.x;
            float fx = ufocalParams_Stage2_c0_c0_c0_c0.y;
            float x_t = -1.0;
            {
                float temp = p.x * p.x - p.y * p.y;
                if (temp >= 0.0) {
                    {
                        x_t = -sqrt(temp) - p.x * invR1;
                    }
                }
            }
            {
                if (x_t <= 0.0) {
                    v = -1.0;
                }
            }
            {
                {
                    t = -x_t + fx;
                }
            }
        }
    }
    _output = vec4(t, v, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage2_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.x) {
                scale = uscale0_1_Stage2_c0_c0_c1_c0;
                bias = ubias0_1_Stage2_c0_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage2_c0_c0_c1_c0;
                bias = ubias2_3_Stage2_c0_c0_c1_c0;
            }
        } else {
            if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.z) {
                scale = uscale4_5_Stage2_c0_c0_c1_c0;
                bias = ubias4_5_Stage2_c0_c0_c1_c0;
            } else {
                scale = uscale6_7_Stage2_c0_c0_c1_c0;
                bias = ubias6_7_Stage2_c0_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 TiledGradientEffect_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = TwoPointConicalGradientLayout_Stage2_c0_c0_c0_c0(vec4(1.0));
    if (t.y < 0.0) {
        _output = vec4(0.0);
    } else {
        {
            t.x = fract(t.x);
        }
        _output = UnrolledBinaryGradientColorizer_Stage2_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputCoverage_Stage0;
    {
        vec4 circleEdge;
        circleEdge = vinCircleEdge_Stage0;
        float d = length(circleEdge.xy);
        float distanceToOuterEdge = circleEdge.z * (1.0 - d);
        float edgeAlpha = clamp(distanceToOuterEdge, 0.0, 1.0);
        float distanceToInnerEdge = circleEdge.z * (d - circleEdge.w);
        float innerAlpha = clamp(distanceToInnerEdge, 0.0, 1.0);
        edgeAlpha *= innerAlpha;
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        output_Stage1 = outputCoverage_Stage0;
    }
    vec4 output_Stage2;
    {
        output_Stage2 = blend_dst_in(output_Stage1, TiledGradientEffect_Stage2_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage3;
    {
        vec2 d = gl_FragCoord.xy - uellipse_Stage3.xy;
        vec2 Z = d * uellipse_Stage3.zw;
        float implicit = dot(Z, d) - 1.0;
        float grad_dot = 4.0 * dot(Z, Z);
        {
            grad_dot = max(grad_dot, 1.1754999560161448e-38);
        }
        float approx_dist = implicit * inversesqrt(grad_dot);
        float alpha;
        {
            alpha = clamp(0.5 + approx_dist, 0.0, 1.0);
        }
        output_Stage3 = output_Stage2 * alpha;
    }
    vec4 output_Stage4;
    {
        vec2 d = gl_FragCoord.xy - uellipse_Stage4.xy;
        vec2 Z = d * uellipse_Stage4.zw;
        float implicit = dot(Z, d) - 1.0;
        float grad_dot = 4.0 * dot(Z, Z);
        {
            grad_dot = max(grad_dot, 1.1754999560161448e-38);
        }
        float approx_dist = implicit * inversesqrt(grad_dot);
        float alpha;
        {
            alpha = clamp(0.5 - approx_dist, 0.0, 1.0);
        }
        output_Stage4 = output_Stage3 * alpha;
    }
    vec4 output_Stage5;
    {
        output_Stage5 = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_1_Stage0;
        coord.x -= 10.0 * uPixelSize_Stage5;
        for (int i = 0;i < 21; i++) {
            output_Stage5 = max(output_Stage5, texture(uTextureSampler_0_Stage5, coord));
            coord.x += uPixelSize_Stage5;
        }
        output_Stage5 *= output_Stage4;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec4 inCircleEdge;
noperspective out vec4 vinCircleEdge_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vinCircleEdge_Stage0 = inCircleEdge;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

