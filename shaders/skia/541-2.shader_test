[require]
GLSL >= 1.40

[fragment shader]
#version 140

uniform vec2 uImageIncrement_Stage2;
uniform vec4 uKernel_Stage2[4];
uniform vec2 uKernelOffset_Stage2;
uniform float uGain_Stage2;
uniform float uBias_Stage2;
uniform vec4 uleftBorderColor_Stage3_c0_c0;
uniform vec4 urightBorderColor_Stage3_c0_c0;
uniform float ubias_Stage3_c0_c0_c0_c0;
uniform float uscale_Stage3_c0_c0_c0_c0;
uniform vec4 ustart_Stage3_c0_c0_c1_c0;
uniform vec4 uend_Stage3_c0_c0_c1_c0;
uniform float ucornerRadius_Stage4;
uniform vec4 uproxyRect_Stage4;
uniform float ublurRadius_Stage4;
uniform vec4 uk_Stage5;
uniform vec4 ucolor_Stage5_c1_c0;
uniform sampler2D uTextureSampler_0_Stage2;
uniform sampler2D uTextureSampler_0_Stage4;
noperspective in vec2 vEllipseOffsets_Stage0;
noperspective in vec4 vEllipseRadii_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
vec4 SweepGradientLayout_Stage3_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float angle;
    {
        angle = atan(-vTransformedCoords_1_Stage0.y, -vTransformedCoords_1_Stage0.x);
    }
    float t = ((angle * 0.15915493667125702 + 0.5) + ubias_Stage3_c0_c0_c0_c0) * uscale_Stage3_c0_c0_c0_c0;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 SingleIntervalGradientColorizer_Stage3_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    _output = (1.0 - t) * ustart_Stage3_c0_c0_c1_c0 + t * uend_Stage3_c0_c0_c1_c0;
    return _output;
}
vec4 ClampedGradientEffect_Stage3_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = SweepGradientLayout_Stage3_c0_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage3_c0_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage3_c0_c0;
    } else {
        _output = SingleIntervalGradientColorizer_Stage3_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 ConstColorProcessor_Stage5_c1_c0(vec4 _input, vec2 _coords) {
    vec4 _output;
    {
        _output = ucolor_Stage5_c1_c0;
    }
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputCoverage_Stage0;
    {
        vec2 offset = vEllipseOffsets_Stage0;
        offset *= vEllipseRadii_Stage0.xy;
        float test = dot(offset, offset) - 1.0;
        vec2 grad = (2.0 * offset) * vEllipseRadii_Stage0.xy;
        float grad_dot = dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        offset = vEllipseOffsets_Stage0 * vEllipseRadii_Stage0.zw;
        test = dot(offset, offset) - 1.0;
        grad = (2.0 * offset) * vEllipseRadii_Stage0.zw;
        grad_dot = dot(grad, grad);
        invlen = inversesqrt(grad_dot);
        edgeAlpha *= clamp(0.5 + test * invlen, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        {
            float alpha = clamp(outputCoverage_Stage0.w, 0.0, 1.0);
            output_Stage1 = vec4(clamp(outputCoverage_Stage0.xyz, 0.0, alpha), alpha);
        }
    }
    vec4 output_Stage2;
    {
        vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_0_Stage0 - uKernelOffset_Stage2 * uImageIncrement_Stage2;
        vec4 c;
        {
            float k = uKernel_Stage2[0].x;
            {
                vec2 origCoord = coord;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[0].y;
            {
                vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[0].z;
            {
                vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[0].w;
            {
                vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[1].x;
            {
                vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[1].y;
            {
                vec2 origCoord = coord + vec2(5.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[1].z;
            {
                vec2 origCoord = coord + vec2(6.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[1].w;
            {
                vec2 origCoord = coord + vec2(7.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[2].x;
            {
                vec2 origCoord = coord + vec2(8.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[2].y;
            {
                vec2 origCoord = coord + vec2(9.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[2].z;
            {
                vec2 origCoord = coord + vec2(10.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[2].w;
            {
                vec2 origCoord = coord + vec2(11.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[3].x;
            {
                vec2 origCoord = coord + vec2(12.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[3].y;
            {
                vec2 origCoord = coord + vec2(13.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[3].z;
            {
                vec2 origCoord = coord + vec2(14.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage2[3].w;
            {
                vec2 origCoord = coord + vec2(15.0, 0.0) * uImageIncrement_Stage2;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        output_Stage2 = sum * uGain_Stage2 + uBias_Stage2;
        output_Stage2.w = clamp(output_Stage2.w, 0.0, 1.0);
        output_Stage2.xyz = clamp(output_Stage2.xyz, 0.0, output_Stage2.w);
        output_Stage2 *= output_Stage1;
    }
    vec4 output_Stage3;
    {
        output_Stage3 = blend_dst_in(output_Stage2, ClampedGradientEffect_Stage3_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage4;
    {
        vec2 translatedFragPos = gl_FragCoord.xy - uproxyRect_Stage4.xy;
        float threshold = ucornerRadius_Stage4 + 2.0 * ublurRadius_Stage4;
        vec2 middle = (uproxyRect_Stage4.zw - uproxyRect_Stage4.xy) - 2.0 * threshold;
        if (translatedFragPos.x >= threshold && translatedFragPos.x < middle.x + threshold) {
            translatedFragPos.x = threshold;
        } else if (translatedFragPos.x >= middle.x + threshold) {
            translatedFragPos.x -= middle.x - 1.0;
        }
        if (translatedFragPos.y > threshold && translatedFragPos.y < middle.y + threshold) {
            translatedFragPos.y = threshold;
        } else if (translatedFragPos.y >= middle.y + threshold) {
            translatedFragPos.y -= middle.y - 1.0;
        }
        vec2 proxyDims = vec2(2.0 * threshold + 1.0);
        vec2 texCoord = translatedFragPos / proxyDims;
        output_Stage4 = output_Stage3 * texture(uTextureSampler_0_Stage4, texCoord);
    }
    vec4 output_Stage5;
    {
        output_Stage5 = output_Stage4;
        vec4 dst = ConstColorProcessor_Stage5_c1_c0(vec4(1.0), vTransformedCoords_2_Stage0);
        output_Stage5 = clamp((((uk_Stage5.x * output_Stage5) * dst + uk_Stage5.y * output_Stage5) + uk_Stage5.z * dst) + uk_Stage5.w, 0.0, 1.0);
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffset;
in vec4 inEllipseRadii;
noperspective out vec2 vEllipseOffsets_Stage0;
noperspective out vec4 vEllipseRadii_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
void main() {
    vEllipseOffsets_Stage0 = inEllipseOffset;
    vEllipseRadii_Stage0 = inEllipseRadii;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

