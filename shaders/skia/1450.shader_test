[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uColor_Stage0;
uniform float uCoverage_Stage0;
uniform vec4 urectUniform_Stage1;
uniform vec4 uboundsUniform_Stage3;
uniform float uxInvZoom_Stage3;
uniform float uyInvZoom_Stage3;
uniform float uxInvInset_Stage3;
uniform float uyInvInset_Stage3;
uniform vec2 uoffset_Stage3;
uniform float uinnerThreshold_Stage5;
uniform float uouterThreshold_Stage5;
uniform sampler2D uTextureSampler_0_Stage3;
uniform sampler2D uTextureSampler_0_Stage4;
uniform sampler2D uTextureSampler_0_Stage5;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    {
        {
            float xSub, ySub;
            xSub = min(gl_FragCoord.x - urectUniform_Stage1.x, 0.0);
            xSub += min(urectUniform_Stage1.z - gl_FragCoord.x, 0.0);
            ySub = min(gl_FragCoord.y - urectUniform_Stage1.y, 0.0);
            ySub += min(urectUniform_Stage1.w - gl_FragCoord.y, 0.0);
        }
    }
    vec4 output_Stage3;
    {
        vec2 coord = vTransformedCoords_0_Stage0;
        vec2 zoom_coord = uoffset_Stage3 + coord * vec2(uxInvZoom_Stage3, uyInvZoom_Stage3);
        vec2 delta = (coord - uboundsUniform_Stage3.xy) * uboundsUniform_Stage3.zw;
        delta = min(delta, vec2(1.0, 1.0) - delta);
        delta *= vec2(uxInvInset_Stage3, uyInvInset_Stage3);
        float weight = 0.0;
        if (delta.x < 2.0 && delta.y < 2.0) {
            delta = vec2(2.0, 2.0) - delta;
            float dist = length(delta);
            dist = max(2.0 - dist, 0.0);
            weight = min(dist * dist, 1.0);
        } else {
            vec2 delta_squared = delta * delta;
            weight = min(min(delta_squared.x, delta_squared.y), 1.0);
        }
        output_Stage3 = texture(uTextureSampler_0_Stage3, mix(coord, zoom_coord, weight));
    }
    vec4 output_Stage4;
    {
        output_Stage4 = texture(uTextureSampler_0_Stage4, vTransformedCoords_1_Stage0) * output_Stage3;
    }
    vec4 output_Stage5;
    {
        vec4 color = output_Stage4;
        vec4 mask_color = texture(uTextureSampler_0_Stage5, vTransformedCoords_2_Stage0);
        if (mask_color.w < 0.5) {
            if (color.w > uouterThreshold_Stage5) {
                float scale = uouterThreshold_Stage5 / color.w;
                color.xyz *= scale;
                color.w = uouterThreshold_Stage5;
            }
        } else if (color.w < uinnerThreshold_Stage5) {
            float scale = uinnerThreshold_Stage5 / max(0.0010000000474974513, color.w);
            color.xyz *= scale;
            color.w = uinnerThreshold_Stage5;
        }
        output_Stage5 = color;
    }
    {
        sk_FragColor = output_Stage5 * outputColor_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
void main() {
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

