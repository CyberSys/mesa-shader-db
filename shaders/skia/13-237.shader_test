[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform vec4 uleftBorderColor_Stage1_c0_c0;
uniform vec4 urightBorderColor_Stage1_c0_c0;
uniform vec2 ufocalParams_Stage1_c0_c0_c0_c0;
uniform vec4 uscale0_1_Stage1_c0_c0_c1_c0;
uniform vec4 uscale2_3_Stage1_c0_c0_c1_c0;
uniform vec4 uscale4_5_Stage1_c0_c0_c1_c0;
uniform vec4 ubias0_1_Stage1_c0_c0_c1_c0;
uniform vec4 ubias2_3_Stage1_c0_c0_c1_c0;
uniform vec4 ubias4_5_Stage1_c0_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage1_c0_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage1_c0_c0_c1_c0;
uniform float ucornerRadius_Stage2;
uniform vec4 uproxyRect_Stage2;
uniform float ublurRadius_Stage2;
uniform sampler2D uTextureSampler_0_Stage2;
noperspective in vec2 vTransformedCoords_0_Stage0;
vec4 TwoPointConicalGradientLayout_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 p = vTransformedCoords_0_Stage0;
    float t = -1.0;
    {
        {
            float invR1 = ufocalParams_Stage1_c0_c0_c0_c0.x;
            float fx = ufocalParams_Stage1_c0_c0_c0_c0.y;
            float x_t = -1.0;
            {
                x_t = length(p) - p.x * invR1;
            }
            {
                {
                    t = x_t + fx;
                }
            }
        }
    }
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage1_c0_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage1_c0_c0_c1_c0.x) {
                scale = uscale0_1_Stage1_c0_c0_c1_c0;
                bias = ubias0_1_Stage1_c0_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage1_c0_c0_c1_c0;
                bias = ubias2_3_Stage1_c0_c0_c1_c0;
            }
        } else {
            {
                scale = uscale4_5_Stage1_c0_c0_c1_c0;
                bias = ubias4_5_Stage1_c0_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 ClampedGradientEffect_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = TwoPointConicalGradientLayout_Stage1_c0_c0_c0_c0(vec4(1.0));
    if (t.y < 0.0) {
        _output = vec4(0.0);
    } else if (t.x < 0.0) {
        _output = uleftBorderColor_Stage1_c0_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage1_c0_c0;
    } else {
        _output = UnrolledBinaryGradientColorizer_Stage1_c0_c0_c1_c0(t);
    }
    return _output;
}
void main() {
    vec4 output_Stage1;
    {
        output_Stage1 = ClampedGradientEffect_Stage1_c0_c0(vec4(1.0, 1.0, 1.0, 1.0));
    }
    vec4 output_Stage2;
    {
        vec2 translatedFragPos = gl_FragCoord.xy - uproxyRect_Stage2.xy;
        float threshold = ucornerRadius_Stage2 + 2.0 * ublurRadius_Stage2;
        vec2 middle = (uproxyRect_Stage2.zw - uproxyRect_Stage2.xy) - 2.0 * threshold;
        if (translatedFragPos.x >= threshold && translatedFragPos.x < middle.x + threshold) {
            translatedFragPos.x = threshold;
        } else if (translatedFragPos.x >= middle.x + threshold) {
            translatedFragPos.x -= middle.x - 1.0;
        }
        if (translatedFragPos.y > threshold && translatedFragPos.y < middle.y + threshold) {
            translatedFragPos.y = threshold;
        } else if (translatedFragPos.y >= middle.y + threshold) {
            translatedFragPos.y -= middle.y - 1.0;
        }
        vec2 proxyDims = vec2(2.0 * threshold + 1.0);
        vec2 texCoord = translatedFragPos / proxyDims;
        output_Stage2 = texture(uTextureSampler_0_Stage2, texCoord);
    }
    {
        sk_FragColor = output_Stage1 * output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 position;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vec2 pos2 = (uViewM_Stage0 * vec3(position, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(position, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

