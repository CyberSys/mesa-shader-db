[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform vec4 ucircle_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec2 uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
uniform float uSurfaceScale_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec3 uLightColor_Stage1_c0_c0_c0_c0_c1_c0;
uniform float uKD_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec4 uTexDom_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec3 uDecalParams_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec3 uLightLocation_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec4 uinnerRect_Stage1_c0_c0_c1_c0;
uniform vec4 uinvRadiiLTRB_Stage1_c0_c0_c1_c0;
uniform float uPixelSize_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec2 uRange_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec4 uinnerRect_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec2 uradiusPlusHalf_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec4 uboundsUniform_Stage1_c1_c0_c1_c0_c0_c0;
uniform float uxInvZoom_Stage1_c1_c0_c1_c0_c0_c0;
uniform float uyInvZoom_Stage1_c1_c0_c1_c0_c0_c0;
uniform float uxInvInset_Stage1_c1_c0_c1_c0_c0_c0;
uniform float uyInvInset_Stage1_c1_c0_c1_c0_c0_c0;
uniform vec2 uoffset_Stage1_c1_c0_c1_c0_c0_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
vec4 CircleEffect_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float d;
    {
        d = (1.0 - length((ucircle_Stage1_c0_c0_c0_c0_c0_c0.xy - gl_FragCoord.xy) * ucircle_Stage1_c0_c0_c0_c0_c0_c0.w)) * ucircle_Stage1_c0_c0_c0_c0_c0_c0.z;
    }
    {
        _output = _input * clamp(d, 0.0, 1.0);
    }
    return _output;
}
vec4 light_Stage1_c0_c0_c0_c0_c1_c0(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    float colorScale = uKD_Stage1_c0_c0_c0_c0_c1_c0 * dot(normal, surfaceToLight);
    return vec4(lightColor * clamp(colorScale, 0.0, 1.0), 1.0);
}
float sobel_Stage1_c0_c0_c0_c0_c1_c0(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage1_c0_c0_c0_c0_c1_c0(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage1_c0_c0_c0_c0_c1_c0(float m[9], float surfaceScale) {
    return pointToNormal_Stage1_c0_c0_c0_c0_c1_c0(sobel_Stage1_c0_c0_c0_c0_c1_c0(m[0], m[1], m[3], m[4], 0.0, 0.0, 0.66666698455810547), sobel_Stage1_c0_c0_c0_c0_c1_c0(m[0], m[3], m[1], m[4], 0.0, 0.0, 0.66666698455810547), surfaceScale);
}
vec4 DiffuseLighting_Stage1_c0_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_0_Stage0;
    float m[9];
    vec4 temp0;
    {
        vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[0] = temp0.w;
    vec4 temp1;
    {
        vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[1] = temp1.w;
    vec4 temp2;
    {
        vec2 origCoord = coord + uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[2] = temp2.w;
    vec4 temp3;
    {
        vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[3] = temp3.w;
    vec4 temp4;
    {
        vec2 origCoord = coord;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[4] = temp4.w;
    vec4 temp5;
    {
        vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[5] = temp5.w;
    vec4 temp6;
    {
        vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[6] = temp6.w;
    vec4 temp7;
    {
        vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[7] = temp7.w;
    vec4 temp8;
    {
        vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[8] = temp8.w;
    vec3 surfaceToLight = normalize(uLightLocation_Stage1_c0_c0_c0_c0_c1_c0 - vec3(gl_FragCoord.xy, uSurfaceScale_Stage1_c0_c0_c0_c0_c1_c0 * m[4]));
    _output = light_Stage1_c0_c0_c0_c0_c1_c0(normal_Stage1_c0_c0_c0_c0_c1_c0(m, uSurfaceScale_Stage1_c0_c0_c0_c0_c1_c0), surfaceToLight, uLightColor_Stage1_c0_c0_c0_c0_c1_c0);
    _output *= _input;
    return _output;
}
vec4 blend_exclusion(vec4 src, vec4 dst) {
    return vec4((dst.xyz + src.xyz) - (2.0 * dst.xyz) * src.xyz, src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_exclusion(CircleEffect_Stage1_c0_c0_c0_c0_c0_c0(inputColor), DiffuseLighting_Stage1_c0_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 EllipticalRRect_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c0_c0_c1_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c0_c0_c1_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    vec2 Z = max(max(dxy0 * uinvRadiiLTRB_Stage1_c0_c0_c1_c0.xy, dxy1 * uinvRadiiLTRB_Stage1_c0_c0_c1_c0.zw), 0.0);
    float implicit = dot(Z, dxy) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    grad_dot = max(grad_dot, 9.9999997473787516e-05);
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha = clamp(0.5 - approx_dist, 0.0, 1.0);
    _output = _input * alpha;
    return _output;
}
vec4 blend_xor(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + (1.0 - src.w) * dst;
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_xor(ComposeTwo_Stage1_c0_c0_c0_c0(inputColor), EllipticalRRect_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 Morphology_Stage1_c1_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_1_Stage0;
    coord.y -= 5.0 * uPixelSize_Stage1_c1_c0_c0_c0_c0_c0;
    for (int i = 0;i < 11; i++) {
        _output = max(_output, texture(uTextureSampler_1_Stage1, coord));
        coord.y += uPixelSize_Stage1_c1_c0_c0_c0_c0_c0;
    }
    _output *= _input;
    return _output;
}
vec4 CircularRRect_Stage1_c1_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c1_c0_c0_c0_c1_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c1_c0_c0_c0_c1_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    float alpha = clamp(uradiusPlusHalf_Stage1_c1_c0_c0_c0_c1_c0.x - length(dxy), 0.0, 1.0);
    _output = _input * alpha;
    return _output;
}
vec4 blend_screen(vec4 src, vec4 dst) {
    return src + (1.0 - src) * dst;
}
vec4 ComposeTwo_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_screen(Morphology_Stage1_c1_c0_c0_c0_c0_c0(inputColor), CircularRRect_Stage1_c1_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 MagnifierEffect_Stage1_c1_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_2_Stage0;
    vec2 zoom_coord = uoffset_Stage1_c1_c0_c1_c0_c0_c0 + coord * vec2(uxInvZoom_Stage1_c1_c0_c1_c0_c0_c0, uyInvZoom_Stage1_c1_c0_c1_c0_c0_c0);
    vec2 delta = (coord - uboundsUniform_Stage1_c1_c0_c1_c0_c0_c0.xy) * uboundsUniform_Stage1_c1_c0_c1_c0_c0_c0.zw;
    delta = min(delta, vec2(1.0, 1.0) - delta);
    delta *= vec2(uxInvInset_Stage1_c1_c0_c1_c0_c0_c0, uyInvInset_Stage1_c1_c0_c1_c0_c0_c0);
    float weight = 0.0;
    if (delta.x < 2.0 && delta.y < 2.0) {
        delta = vec2(2.0, 2.0) - delta;
        float dist = length(delta);
        dist = max(2.0 - dist, 0.0);
        weight = min(dist * dist, 1.0);
    } else {
        vec2 delta_squared = delta * delta;
        weight = min(min(delta_squared.x, delta_squared.y), 1.0);
    }
    _output = texture(uTextureSampler_2_Stage1, mix(coord, zoom_coord, weight));
    return _output;
}
vec4 ConfigConversionEffect_Stage1_c1_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = floor(_input * 255.0 + 0.5) / 255.0;
    {
        _output.xyz = _output.w <= 0.0 ? vec3(0.0) : floor((_output.xyz / _output.w) * 255.0 + 0.5) / 255.0;
    }
    return _output;
}
float _blend_overlay_component(float sc, float sa, float dc, float da) {
    if (2.0 * dc <= da) {
        return (2.0 * sc) * dc;
    }
    return sa * da - (2.0 * (da - dc)) * (sa - sc);
}
vec4 blend_overlay(vec4 src, vec4 dst) {
    vec4 result = vec4(_blend_overlay_component(src.x, src.w, dst.x, dst.w), _blend_overlay_component(src.y, src.w, dst.y, dst.w), _blend_overlay_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
    result.xyz += dst.xyz * (1.0 - src.w) + src.xyz * (1.0 - dst.w);
    return result;
}
vec4 ComposeTwo_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_overlay(MagnifierEffect_Stage1_c1_c0_c1_c0_c0_c0(inputColor), ConfigConversionEffect_Stage1_c1_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_overlay(ComposeTwo_Stage1_c1_c0_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_dst_out(vec4 src, vec4 dst) {
    return (1.0 - src.w) * dst;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_dst_out(ComposeTwo_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
in vec2 inLocalCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
void main() {
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

