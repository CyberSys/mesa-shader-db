[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uCoordTransformMatrix_3_Stage0;
uniform vec4 ustart_Stage1_c0_c0_c1_c0;
uniform vec4 uend_Stage1_c0_c0_c1_c0;
uniform vec4 uleftBorderColor_Stage2_c1_c0;
uniform vec4 urightBorderColor_Stage2_c1_c0;
uniform float ubias_Stage2_c1_c0_c0_c0;
uniform float uscale_Stage2_c1_c0_c0_c0;
uniform vec4 ustart_Stage2_c1_c0_c1_c0;
uniform vec4 uend_Stage2_c1_c0_c1_c0;
uniform vec4 usubset_Stage3_c2_c0;
uniform vec4 uclamp_Stage3_c2_c0;
uniform sampler2D uTextureSampler_0_Stage3;
noperspective in vec2 vEllipseOffsets_Stage0;
noperspective in vec4 vEllipseRadii_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec3 vTransformedCoords_2_Stage0;
vec4 LinearGradientLayout_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float t = vTransformedCoords_0_Stage0.x + 9.9999997473787516e-06;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 SingleIntervalGradientColorizer_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    _output = (1.0 - t) * ustart_Stage1_c0_c0_c1_c0 + t * uend_Stage1_c0_c0_c1_c0;
    return _output;
}
vec4 TiledGradientEffect_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = LinearGradientLayout_Stage1_c0_c0_c0_c0(vec4(1.0));
    {
        {
            t.x = fract(t.x);
        }
        _output = SingleIntervalGradientColorizer_Stage1_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 SweepGradientLayout_Stage2_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float angle;
    {
        angle = atan(-vTransformedCoords_1_Stage0.y, -vTransformedCoords_1_Stage0.x);
    }
    float t = ((angle * 0.15915493667125702 + 0.5) + ubias_Stage2_c1_c0_c0_c0) * uscale_Stage2_c1_c0_c0_c0;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 SingleIntervalGradientColorizer_Stage2_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    _output = (1.0 - t) * ustart_Stage2_c1_c0_c1_c0 + t * uend_Stage2_c1_c0_c1_c0;
    return _output;
}
vec4 ClampedGradientEffect_Stage2_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 t = SweepGradientLayout_Stage2_c1_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage2_c1_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage2_c1_c0;
    } else {
        _output = SingleIntervalGradientColorizer_Stage2_c1_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 TextureEffect_Stage3_c2_c0(vec4 _input, vec2 _coords) {
    _coords = _coords * uCoordTransformMatrix_3_Stage0.xz + uCoordTransformMatrix_3_Stage0.yw;
    vec4 _output;
    vec2 inCoord = _coords;
    vec2 subsetCoord;
    subsetCoord.x = mod(inCoord.x - usubset_Stage3_c2_c0.x, usubset_Stage3_c2_c0.z - usubset_Stage3_c2_c0.x) + usubset_Stage3_c2_c0.x;
    {
        float w = usubset_Stage3_c2_c0.w - usubset_Stage3_c2_c0.y;
        float w2 = 2.0 * w;
        float m = mod(inCoord.y - usubset_Stage3_c2_c0.y, w2);
        subsetCoord.y = mix(m, w2 - m, step(w, m)) + usubset_Stage3_c2_c0.y;
    }
    vec2 clampedCoord;
    clampedCoord.x = clamp(subsetCoord.x, uclamp_Stage3_c2_c0.x, uclamp_Stage3_c2_c0.z);
    clampedCoord.y = clamp(subsetCoord.y, uclamp_Stage3_c2_c0.y, uclamp_Stage3_c2_c0.w);
    vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
    _output = _input * textureColor;
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vinColor_Stage0;
        vec2 offset = vEllipseOffsets_Stage0;
        float test = dot(offset, offset) - 1.0;
        vec2 grad = (2.0 * offset) * vEllipseRadii_Stage0.xy;
        float grad_dot = dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        output_Stage1 = blend_dst_in(outputColor_Stage0, TiledGradientEffect_Stage1_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage2;
    {
        output_Stage2 = blend_dst_in(output_Stage1, ClampedGradientEffect_Stage2_c1_c0(vec4(1.0)));
    }
    vec4 output_Stage3;
    {
        vec2 vTransformedCoords_2_Stage0_ensure2D = vTransformedCoords_2_Stage0.xy / vTransformedCoords_2_Stage0.z;
        float coord = vTransformedCoords_2_Stage0_ensure2D.x - 0.5;
        float f = fract(coord);
        coord += 0.5 - f;
        float f2 = f * f;
        vec4 w = mat4(0.055555555555555552, 0.88888888888888884, 0.055555555555555552, 0.0, -0.5, 0.0, 0.5, 0.0, 0.83333333333333337, -2.0, 1.5, -0.33333333333333331, -0.3888888888888889, 1.1666666666666667, -1.1666666666666667, 0.3888888888888889) * vec4(1.0, f, f2, f2 * f);
        vec4 c[4];
        c[0] = TextureEffect_Stage3_c2_c0(vec4(1.0), vec2(coord + -1.0, vTransformedCoords_2_Stage0_ensure2D.y));
        c[1] = TextureEffect_Stage3_c2_c0(vec4(1.0), vec2(coord, vTransformedCoords_2_Stage0_ensure2D.y));
        c[2] = TextureEffect_Stage3_c2_c0(vec4(1.0), vec2(coord + 1.0, vTransformedCoords_2_Stage0_ensure2D.y));
        c[3] = TextureEffect_Stage3_c2_c0(vec4(1.0), vec2(coord + 2.0, vTransformedCoords_2_Stage0_ensure2D.y));
        vec4 bicubicColor = ((c[0] * w.x + c[1] * w.y) + c[2] * w.z) + c[3] * w.w;
        bicubicColor.xyz = max(vec3(0.0), min(bicubicColor.xyz, bicubicColor.www));
        output_Stage3 = bicubicColor * output_Stage2;
    }
    vec4 output_Stage4;
    {
        output_Stage4 = floor(output_Stage3 * 255.0 + 0.5) / 255.0;
        {
            output_Stage4.xyz = output_Stage4.w <= 0.0 ? vec3(0.0) : floor((output_Stage4.xyz / output_Stage4.w) * 255.0 + 0.5) / 255.0;
        }
    }
    {
        sk_FragColor = (1.0 - output_Stage4.w) * outputCoverage_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffset;
in vec4 inEllipseRadii;
noperspective out vec2 vEllipseOffsets_Stage0;
noperspective out vec4 vEllipseRadii_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec3 vTransformedCoords_2_Stage0;
void main() {
    vEllipseOffsets_Stage0 = inEllipseOffset;
    vEllipseRadii_Stage0 = inEllipseRadii;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0);
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

