[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform float uSrcTF_Stage0[7];
uniform mat3 uColorXform_Stage0;
uniform float uDstTF_Stage0[7];
uniform vec4 ucircle_Stage1;
uniform vec4 urectUniform_Stage2;
uniform vec4 uboundsUniform_Stage3;
uniform float uxInvZoom_Stage3;
uniform float uyInvZoom_Stage3;
uniform float uxInvInset_Stage3;
uniform float uyInvInset_Stage3;
uniform vec2 uoffset_Stage3;
uniform vec2 ubaseFrequency_Stage4;
uniform float uz_Stage4;
uniform vec4 uscale0_1_Stage5_c0_c0_c1_c0;
uniform vec4 uscale2_3_Stage5_c0_c0_c1_c0;
uniform vec4 uscale4_5_Stage5_c0_c0_c1_c0;
uniform vec4 ubias0_1_Stage5_c0_c0_c1_c0;
uniform vec4 ubias2_3_Stage5_c0_c0_c1_c0;
uniform vec4 ubias4_5_Stage5_c0_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage5_c0_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage5_c0_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage0;
uniform sampler2D uTextureSampler_0_Stage3;
uniform sampler2D uTextureSampler_0_Stage4;
uniform sampler2D uTextureSampler_1_Stage4;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vtextureCoords_Stage0;
flat in vec4 vtextureDomain_Stage0;
flat in vec4 vcolor_Stage0;
float src_tf_Stage0(float x) {
    float G = uSrcTF_Stage0[0];
    float A = uSrcTF_Stage0[1];
    float B = uSrcTF_Stage0[2];
    float C = uSrcTF_Stage0[3];
    float D = uSrcTF_Stage0[4];
    float E = uSrcTF_Stage0[5];
    float F = uSrcTF_Stage0[6];
    float s = sign(x);
    x = abs(x);
    x = x < D ? C * x + F : pow(A * x + B, G) + E;
    return s * x;
}
float dst_tf_Stage0(float x) {
    float G = uDstTF_Stage0[0];
    float A = uDstTF_Stage0[1];
    float B = uDstTF_Stage0[2];
    float C = uDstTF_Stage0[3];
    float D = uDstTF_Stage0[4];
    float E = uDstTF_Stage0[5];
    float F = uDstTF_Stage0[6];
    float s = sign(x);
    x = abs(x);
    x = x < D ? C * x + F : pow(A * x + B, G) + E;
    return s * x;
}
vec4 gamut_xform_Stage0(vec4 color) {
    color.xyz = uColorXform_Stage0 * color.xyz;
    return color;
}
vec4 color_xform_Stage0(vec4 color) {
    float nonZeroAlpha = max(color.w, 9.9999997473787516e-05);
    color = vec4(color.xyz / nonZeroAlpha, nonZeroAlpha);
    color.x = src_tf_Stage0(color.x);
    color.y = src_tf_Stage0(color.y);
    color.z = src_tf_Stage0(color.z);
    color = gamut_xform_Stage0(color);
    color.x = dst_tf_Stage0(color.x);
    color.y = dst_tf_Stage0(color.y);
    color.z = dst_tf_Stage0(color.z);
    color.xyz *= color.w;
    return color;
}
vec3 fade_Stage4(vec3 t) {
    return ((t * t) * t) * (t * (t * 6.0 - 15.0) + 10.0);
}
float perm_Stage4(float x) {
    return texture(uTextureSampler_0_Stage4, vec2(fract(x / 256.0), 0.0)).x * 255.0;
}
float grad_Stage4(float x, vec3 p) {
    return dot(texture(uTextureSampler_1_Stage4, vec2(fract(x / 16.0), 0.0)).xyz * 255.0 - vec3(1.0), p);
}
float lerp_Stage4(float a, float b, float w) {
    return a + w * (b - a);
}
float noise_Stage4(vec3 p) {
    vec3 P = mod(floor(p), 256.0);
    p -= floor(p);
    vec3 f = fade_Stage4(p);
    float A = perm_Stage4(P.x) + P.y;
    float AA = perm_Stage4(A) + P.z;
    float AB = perm_Stage4(A + 1.0) + P.z;
    float B = perm_Stage4(P.x + 1.0) + P.y;
    float BA = perm_Stage4(B) + P.z;
    float BB = perm_Stage4(B + 1.0) + P.z;
    float result = lerp_Stage4(lerp_Stage4(lerp_Stage4(grad_Stage4(perm_Stage4(AA), p), grad_Stage4(perm_Stage4(BA), p + vec3(-1.0, 0.0, 0.0)), f.x), lerp_Stage4(grad_Stage4(perm_Stage4(AB), p + vec3(0.0, -1.0, 0.0)), grad_Stage4(perm_Stage4(BB), p + vec3(-1.0, -1.0, 0.0)), f.x), f.y), lerp_Stage4(lerp_Stage4(grad_Stage4(perm_Stage4(AA + 1.0), p + vec3(0.0, 0.0, -1.0)), grad_Stage4(perm_Stage4(BA + 1.0), p + vec3(-1.0, 0.0, -1.0)), f.x), lerp_Stage4(grad_Stage4(perm_Stage4(AB + 1.0), p + vec3(0.0, -1.0, -1.0)), grad_Stage4(perm_Stage4(BB + 1.0), p + vec3(-1.0, -1.0, -1.0)), f.x), f.y), f.z);
    return result;
}
float noiseOctaves_Stage4(vec3 p) {
    float result = 0.0;
    float ratio = 1.0;
    for (float i = 0.0;i < 10.0; i++) {
        result += noise_Stage4(p) / ratio;
        p *= 2.0;
        ratio *= 2.0;
    }
    return (result + 1.0) / 2.0;
}
vec4 RadialGradientLayout_Stage5_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float t = length(vTransformedCoords_2_Stage0);
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage5_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage5_c0_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage5_c0_c0_c1_c0.x) {
                scale = uscale0_1_Stage5_c0_c0_c1_c0;
                bias = ubias0_1_Stage5_c0_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage5_c0_c0_c1_c0;
                bias = ubias2_3_Stage5_c0_c0_c1_c0;
            }
        } else {
            {
                scale = uscale4_5_Stage5_c0_c0_c1_c0;
                bias = ubias4_5_Stage5_c0_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 TiledGradientEffect_Stage5_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = RadialGradientLayout_Stage5_c0_c0_c0_c0(vec4(1.0));
    {
        {
            t.x = fract(t.x);
        }
        _output = UnrolledBinaryGradientColorizer_Stage5_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    {
        vec2 textureCoords;
        textureCoords = vtextureCoords_Stage0;
        vec4 textureDomain;
        textureDomain = vtextureDomain_Stage0;
        outputColor_Stage0 = vcolor_Stage0;
        outputColor_Stage0 = color_xform_Stage0(texture(uTextureSampler_0_Stage0, clamp(textureCoords, textureDomain.xy, textureDomain.zw))) * outputColor_Stage0;
    }
    vec4 output_Stage1;
    {
        float d;
        {
            d = (1.0 - length((ucircle_Stage1.xy - gl_FragCoord.xy) * ucircle_Stage1.w)) * ucircle_Stage1.z;
        }
        {
            output_Stage1 = outputColor_Stage0 * clamp(d, 0.0, 1.0);
        }
    }
    {
        {
            float xSub, ySub;
            xSub = min(gl_FragCoord.x - urectUniform_Stage2.x, 0.0);
            xSub += min(urectUniform_Stage2.z - gl_FragCoord.x, 0.0);
            ySub = min(gl_FragCoord.y - urectUniform_Stage2.y, 0.0);
            ySub += min(urectUniform_Stage2.w - gl_FragCoord.y, 0.0);
        }
    }
    {
        vec2 coord = vTransformedCoords_0_Stage0;
        vec2 delta = (coord - uboundsUniform_Stage3.xy) * uboundsUniform_Stage3.zw;
        delta = min(delta, vec2(1.0, 1.0) - delta);
        delta *= vec2(uxInvInset_Stage3, uyInvInset_Stage3);
        if (delta.x < 2.0 && delta.y < 2.0) {
            delta = vec2(2.0, 2.0) - delta;
            float dist = length(delta);
            dist = max(2.0 - dist, 0.0);
        }
    }
    vec4 output_Stage4;
    {
        vec2 coords = vTransformedCoords_1_Stage0 * ubaseFrequency_Stage4;
        float r = noiseOctaves_Stage4(vec3(coords, uz_Stage4));
        float g = noiseOctaves_Stage4(vec3(coords, uz_Stage4));
        float b = noiseOctaves_Stage4(vec3(coords, uz_Stage4));
        float a = noiseOctaves_Stage4(vec3(coords, uz_Stage4));
        output_Stage4 = vec4(r, g, b, a);
        output_Stage4 = clamp(output_Stage4, 0.0, 1.0);
        output_Stage4 = vec4(output_Stage4.xyz * output_Stage4.www, output_Stage4.w);
    }
    vec4 output_Stage5;
    {
        output_Stage5 = blend_dst_in(output_Stage4, TiledGradientEffect_Stage5_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage6;
    {
        {
            float alpha = clamp(output_Stage5.w, 0.0, 1.0);
            output_Stage6 = vec4(clamp(output_Stage5.xyz, 0.0, alpha), alpha);
        }
    }
    {
        sk_FragColor = output_Stage1 * output_Stage6;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 position;
in vec2 textureCoords;
in vec4 textureDomain;
in vec4 color;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vtextureCoords_Stage0;
flat out vec4 vtextureDomain_Stage0;
flat out vec4 vcolor_Stage0;
void main() {
    vec2 pos2 = position;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(textureCoords, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(textureCoords, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(textureCoords, 1.0)).xy;
    vtextureCoords_Stage0 = textureCoords;
    vtextureDomain_Stage0 = textureDomain;
    vcolor_Stage0 = color;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

