[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec2 uScale_Stage1;
uniform vec4 uTexDom_Stage1;
uniform vec3 uDecalParams_Stage1;
uniform vec4 ucircleData_Stage3;
uniform vec4 urectH_Stage4_c0_c0;
uniform float uinvSixSigma_Stage4_c0_c0;
uniform sampler2D uTextureSampler_0_Stage0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_0_Stage3;
uniform sampler2D uTextureSampler_0_Stage4;
uniform sampler2D uTextureSampler_1_Stage4;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vtextureCoords_Stage0;
flat in vec4 vtextureDomain_Stage0;
flat in vec4 vcolor_Stage0;
vec4 RectBlurEffect_Stage4_c0_c0(vec4 _input) {
    vec4 _output;
    float xCoverage, yCoverage;
    {
        float x, y;
        {
            x = max(urectH_Stage4_c0_c0.x - gl_FragCoord.x, gl_FragCoord.x - urectH_Stage4_c0_c0.z);
            y = max(urectH_Stage4_c0_c0.y - gl_FragCoord.y, gl_FragCoord.y - urectH_Stage4_c0_c0.w);
        }
        xCoverage = texture(uTextureSampler_0_Stage4, vec2(x * uinvSixSigma_Stage4_c0_c0, 0.5)).w;
        yCoverage = texture(uTextureSampler_0_Stage4, vec2(y * uinvSixSigma_Stage4_c0_c0, 0.5)).w;
        _output = (_input * xCoverage) * yCoverage;
    }
    _output = (_input * xCoverage) * yCoverage;
    return _output;
}
vec4 ColorTableEffect_Stage4_c1_c0(vec4 _input) {
    vec4 _output;
    float nonZeroAlpha = max(_input.w, 9.9999997473787516e-05);
    vec4 coord = vec4(_input.xyz / nonZeroAlpha, nonZeroAlpha);
    coord = coord * 0.9960939884185791 + vec4(0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579);
    _output.w = texture(uTextureSampler_1_Stage4, vec2(coord.w, 0.125)).w;
    _output.x = texture(uTextureSampler_1_Stage4, vec2(coord.x, 0.375)).w;
    _output.y = texture(uTextureSampler_1_Stage4, vec2(coord.y, 0.625)).w;
    _output.z = texture(uTextureSampler_1_Stage4, vec2(coord.z, 0.875)).w;
    _output.xyz *= _output.w;
    return _output;
}
vec4 blend_src_out(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src;
}
void main() {
    vec4 outputColor_Stage0;
    {
        vec2 textureCoords;
        textureCoords = vtextureCoords_Stage0;
        vec4 textureDomain;
        textureDomain = vtextureDomain_Stage0;
        outputColor_Stage0 = vcolor_Stage0;
        outputColor_Stage0 = texture(uTextureSampler_0_Stage0, clamp(textureCoords, textureDomain.xy, textureDomain.zw)) * outputColor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 dColor = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
        dColor.xyz = dColor.w < 9.9999999747524271e-07 ? vec3(0.0) : clamp(dColor.xyz / dColor.w, 0.0, 1.0);
        vec2 cCoords = vTransformedCoords_1_Stage0 + uScale_Stage1 * (dColor.zy - vec2(0.5));
        {
            vec2 origCoord = cCoords;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1.xy, uTexDom_Stage1.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1.y);
            if (err > uDecalParams_Stage1.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1.z < 1.0) {
                err = 0.0;
            }
            output_Stage1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
    }
    vec4 output_Stage3;
    {
        vec2 vec = vec2((gl_FragCoord.x - ucircleData_Stage3.x) * ucircleData_Stage3.w, (gl_FragCoord.y - ucircleData_Stage3.y) * ucircleData_Stage3.w);
        float dist = length(vec) + (0.5 - ucircleData_Stage3.z) * ucircleData_Stage3.w;
        output_Stage3 = vec4(texture(uTextureSampler_0_Stage3, vec2(dist, 0.5)).w);
    }
    vec4 output_Stage4;
    {
        vec4 inputColor = vec4(output_Stage3.xyz, 1.0);
        output_Stage4 = blend_src_out(RectBlurEffect_Stage4_c0_c0(inputColor), ColorTableEffect_Stage4_c1_c0(inputColor));
        output_Stage4 *= output_Stage3.w;
    }
    {
        sk_FragColor = output_Stage1 * output_Stage4;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 position;
in vec2 textureCoords;
in vec4 textureDomain;
in vec4 color;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vtextureCoords_Stage0;
flat out vec4 vtextureDomain_Stage0;
flat out vec4 vcolor_Stage0;
void main() {
    vec2 pos2 = position;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(textureCoords, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(textureCoords, 1.0)).xy;
    vtextureCoords_Stage0 = textureCoords;
    vtextureDomain_Stage0 = textureDomain;
    vcolor_Stage0 = color;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

