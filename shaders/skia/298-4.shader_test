[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 ucircle_Stage2_c0_c0;
uniform vec2 uImageIncrement_Stage2_c1_c0;
uniform float uSurfaceScale_Stage2_c1_c0;
uniform vec3 uLightColor_Stage2_c1_c0;
uniform float uKS_Stage2_c1_c0;
uniform float uShininess_Stage2_c1_c0;
uniform vec4 uTexDom_Stage2_c1_c0;
uniform vec3 uDecalParams_Stage2_c1_c0;
uniform vec3 uLightLocation_Stage2_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
vec4 CircleEffect_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    float d;
    {
        d = (1.0 - length((ucircle_Stage2_c0_c0.xy - gl_FragCoord.xy) * ucircle_Stage2_c0_c0.w)) * ucircle_Stage2_c0_c0.z;
    }
    {
        _output = d > 0.5 ? _input : vec4(0.0);
    }
    return _output;
}
vec4 light_Stage2_c1_c0(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    vec3 halfDir = normalize(surfaceToLight + vec3(0.0, 0.0, 1.0));
    float colorScale = uKS_Stage2_c1_c0 * pow(dot(normal, halfDir), uShininess_Stage2_c1_c0);
    vec3 color = lightColor * clamp(colorScale, 0.0, 1.0);
    return vec4(color, max(max(color.x, color.y), color.z));
}
float sobel_Stage2_c1_c0(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage2_c1_c0(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage2_c1_c0(float m[9], float surfaceScale) {
    return pointToNormal_Stage2_c1_c0(sobel_Stage2_c1_c0(m[0], m[1], m[3], m[4], 0.0, 0.0, 0.66666698455810547), sobel_Stage2_c1_c0(m[0], m[3], m[1], m[4], 0.0, 0.0, 0.66666698455810547), surfaceScale);
}
vec4 SpecularLighting_Stage2_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_1_Stage0;
    float m[9];
    vec4 temp0;
    {
        vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage2_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c1_c0.xy, uTexDom_Stage2_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c1_c0.y);
        if (err > uDecalParams_Stage2_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[0] = temp0.w;
    vec4 temp1;
    {
        vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage2_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c1_c0.xy, uTexDom_Stage2_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c1_c0.y);
        if (err > uDecalParams_Stage2_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[1] = temp1.w;
    vec4 temp2;
    {
        vec2 origCoord = coord + uImageIncrement_Stage2_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c1_c0.xy, uTexDom_Stage2_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c1_c0.y);
        if (err > uDecalParams_Stage2_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[2] = temp2.w;
    vec4 temp3;
    {
        vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage2_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c1_c0.xy, uTexDom_Stage2_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c1_c0.y);
        if (err > uDecalParams_Stage2_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[3] = temp3.w;
    vec4 temp4;
    {
        vec2 origCoord = coord;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c1_c0.xy, uTexDom_Stage2_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c1_c0.y);
        if (err > uDecalParams_Stage2_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[4] = temp4.w;
    vec4 temp5;
    {
        vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage2_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c1_c0.xy, uTexDom_Stage2_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c1_c0.y);
        if (err > uDecalParams_Stage2_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[5] = temp5.w;
    vec4 temp6;
    {
        vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage2_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c1_c0.xy, uTexDom_Stage2_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c1_c0.y);
        if (err > uDecalParams_Stage2_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[6] = temp6.w;
    vec4 temp7;
    {
        vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage2_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c1_c0.xy, uTexDom_Stage2_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c1_c0.y);
        if (err > uDecalParams_Stage2_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[7] = temp7.w;
    vec4 temp8;
    {
        vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage2_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c1_c0.xy, uTexDom_Stage2_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c1_c0.y);
        if (err > uDecalParams_Stage2_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[8] = temp8.w;
    vec3 surfaceToLight = normalize(uLightLocation_Stage2_c1_c0 - vec3(gl_FragCoord.xy, uSurfaceScale_Stage2_c1_c0 * m[4]));
    _output = light_Stage2_c1_c0(normal_Stage2_c1_c0(m, uSurfaceScale_Stage2_c1_c0), surfaceToLight, uLightColor_Stage2_c1_c0);
    _output *= _input;
    return _output;
}
vec4 blend_dst_out(vec4 src, vec4 dst) {
    return (1.0 - src.w) * dst;
}
void main() {
    vec4 output_Stage1;
    {
        output_Stage1 = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
    }
    vec4 output_Stage2;
    {
        vec4 inputColor = vec4(output_Stage1.xyz, 1.0);
        output_Stage2 = blend_dst_out(CircleEffect_Stage2_c0_c0(inputColor), SpecularLighting_Stage2_c1_c0(inputColor));
        output_Stage2 *= output_Stage1.w;
    }
    {
        sk_FragColor = output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 position;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(localCoord, 1.0)).xy;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

