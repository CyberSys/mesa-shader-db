[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uleftBorderColor_Stage2_c0_c0;
uniform vec4 urightBorderColor_Stage2_c0_c0;
uniform vec4 ustart_Stage2_c0_c0_c1_c0;
uniform vec4 uend_Stage2_c0_c0_c1_c0;
uniform vec4 uinnerRect_Stage3;
uniform vec2 uinvRadiiXY_Stage3;
uniform vec4 uleftBorderColor_Stage4_c1_c0;
uniform vec4 urightBorderColor_Stage4_c1_c0;
uniform vec4 uscale0_1_Stage4_c1_c0_c1_c0;
uniform vec4 uscale2_3_Stage4_c1_c0_c1_c0;
uniform vec4 uscale4_5_Stage4_c1_c0_c1_c0;
uniform vec4 uscale6_7_Stage4_c1_c0_c1_c0;
uniform vec4 uscale8_9_Stage4_c1_c0_c1_c0;
uniform vec4 ubias0_1_Stage4_c1_c0_c1_c0;
uniform vec4 ubias2_3_Stage4_c1_c0_c1_c0;
uniform vec4 ubias4_5_Stage4_c1_c0_c1_c0;
uniform vec4 ubias6_7_Stage4_c1_c0_c1_c0;
uniform vec4 ubias8_9_Stage4_c1_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage4_c1_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage4_c1_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
noperspective in vec4 vcolor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
vec4 LinearGradientLayout_Stage2_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float t = vTransformedCoords_1_Stage0.x + 9.9999997473787516e-06;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 SingleIntervalGradientColorizer_Stage2_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    _output = (1.0 - t) * ustart_Stage2_c0_c0_c1_c0 + t * uend_Stage2_c0_c0_c1_c0;
    return _output;
}
vec4 ClampedGradientEffect_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = LinearGradientLayout_Stage2_c0_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage2_c0_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage2_c0_c0;
    } else {
        _output = SingleIntervalGradientColorizer_Stage2_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 LinearGradientLayout_Stage4_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float t = vTransformedCoords_2_Stage0.x + 9.9999997473787516e-06;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage4_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    if (t < uthresholds1_7_Stage4_c1_c0_c1_c0.w) {
        if (t < uthresholds1_7_Stage4_c1_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage4_c1_c0_c1_c0.x) {
                scale = uscale0_1_Stage4_c1_c0_c1_c0;
                bias = ubias0_1_Stage4_c1_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage4_c1_c0_c1_c0;
                bias = ubias2_3_Stage4_c1_c0_c1_c0;
            }
        } else {
            if (t < uthresholds1_7_Stage4_c1_c0_c1_c0.z) {
                scale = uscale4_5_Stage4_c1_c0_c1_c0;
                bias = ubias4_5_Stage4_c1_c0_c1_c0;
            } else {
                scale = uscale6_7_Stage4_c1_c0_c1_c0;
                bias = ubias6_7_Stage4_c1_c0_c1_c0;
            }
        }
    } else {
        {
            {
                scale = uscale8_9_Stage4_c1_c0_c1_c0;
                bias = ubias8_9_Stage4_c1_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 ClampedGradientEffect_Stage4_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 t = LinearGradientLayout_Stage4_c1_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage4_c1_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage4_c1_c0;
    } else {
        _output = UnrolledBinaryGradientColorizer_Stage4_c1_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
    }
    vec4 output_Stage1;
    {
        output_Stage1 = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0) * outputColor_Stage0;
    }
    vec4 output_Stage2;
    {
        output_Stage2 = blend_dst_in(output_Stage1, ClampedGradientEffect_Stage2_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage3;
    {
        vec2 dxy0 = uinnerRect_Stage3.xy - gl_FragCoord.xy;
        vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage3.zw;
        vec2 dxy = max(max(dxy0, dxy1), 0.0);
        vec2 Z = dxy * uinvRadiiXY_Stage3;
        float implicit = dot(Z, dxy) - 1.0;
        float grad_dot = 4.0 * dot(Z, Z);
        grad_dot = max(grad_dot, 9.9999997473787516e-05);
        float approx_dist = implicit * inversesqrt(grad_dot);
        float alpha = clamp(0.5 - approx_dist, 0.0, 1.0);
        output_Stage3 = output_Stage2 * alpha;
    }
    vec4 output_Stage4;
    {
        output_Stage4 = blend_dst_in(output_Stage3, ClampedGradientEffect_Stage4_c1_c0(vec4(1.0)));
    }
    {
        sk_FragColor = output_Stage4;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
in vec4 inColor;
noperspective out vec4 vcolor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

