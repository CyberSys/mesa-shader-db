[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform vec4 uleftBorderColor_Stage1_c0_c0;
uniform vec4 urightBorderColor_Stage1_c0_c0;
uniform float ubias_Stage1_c0_c0_c0_c0;
uniform float uscale_Stage1_c0_c0_c0_c0;
uniform vec4 uscale0_1_Stage1_c0_c0_c1_c0;
uniform vec4 uscale2_3_Stage1_c0_c0_c1_c0;
uniform vec4 uscale4_5_Stage1_c0_c0_c1_c0;
uniform vec4 uscale6_7_Stage1_c0_c0_c1_c0;
uniform vec4 ubias0_1_Stage1_c0_c0_c1_c0;
uniform vec4 ubias2_3_Stage1_c0_c0_c1_c0;
uniform vec4 ubias4_5_Stage1_c0_c0_c1_c0;
uniform vec4 ubias6_7_Stage1_c0_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage1_c0_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage1_c0_c0_c1_c0;
uniform vec2 uImageIncrement_Stage2;
uniform vec2 uBounds_Stage2;
uniform vec4 uKernel_Stage2[2];
uniform mat4 um_Stage3;
uniform vec4 uv_Stage3;
uniform vec2 uScale_Stage4;
uniform vec4 uTexDom_Stage4;
uniform vec3 uDecalParams_Stage4;
uniform vec4 uscale0_1_Stage5_c1_c0_c1_c0;
uniform vec4 uscale2_3_Stage5_c1_c0_c1_c0;
uniform vec4 uscale4_5_Stage5_c1_c0_c1_c0;
uniform vec4 uscale6_7_Stage5_c1_c0_c1_c0;
uniform vec4 uscale8_9_Stage5_c1_c0_c1_c0;
uniform vec4 ubias0_1_Stage5_c1_c0_c1_c0;
uniform vec4 ubias2_3_Stage5_c1_c0_c1_c0;
uniform vec4 ubias4_5_Stage5_c1_c0_c1_c0;
uniform vec4 ubias6_7_Stage5_c1_c0_c1_c0;
uniform vec4 ubias8_9_Stage5_c1_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage5_c1_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage5_c1_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage2;
uniform sampler2D uTextureSampler_0_Stage4;
uniform sampler2D uTextureSampler_1_Stage4;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vTransformedCoords_3_Stage0;
noperspective in vec2 vTransformedCoords_4_Stage0;
vec4 SweepGradientLayout_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float angle;
    {
        angle = atan(-vTransformedCoords_0_Stage0.y, -vTransformedCoords_0_Stage0.x);
    }
    float t = ((angle * 0.15915493667125702 + 0.5) + ubias_Stage1_c0_c0_c0_c0) * uscale_Stage1_c0_c0_c0_c0;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage1_c0_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage1_c0_c0_c1_c0.x) {
                scale = uscale0_1_Stage1_c0_c0_c1_c0;
                bias = ubias0_1_Stage1_c0_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage1_c0_c0_c1_c0;
                bias = ubias2_3_Stage1_c0_c0_c1_c0;
            }
        } else {
            if (t < uthresholds1_7_Stage1_c0_c0_c1_c0.z) {
                scale = uscale4_5_Stage1_c0_c0_c1_c0;
                bias = ubias4_5_Stage1_c0_c0_c1_c0;
            } else {
                scale = uscale6_7_Stage1_c0_c0_c1_c0;
                bias = ubias6_7_Stage1_c0_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 ClampedGradientEffect_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = SweepGradientLayout_Stage1_c0_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage1_c0_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage1_c0_c0;
    } else {
        _output = UnrolledBinaryGradientColorizer_Stage1_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 LinearGradientLayout_Stage5_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float t = vTransformedCoords_4_Stage0.x + 9.9999997473787516e-06;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage5_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    if (t < uthresholds1_7_Stage5_c1_c0_c1_c0.w) {
        if (t < uthresholds1_7_Stage5_c1_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage5_c1_c0_c1_c0.x) {
                scale = uscale0_1_Stage5_c1_c0_c1_c0;
                bias = ubias0_1_Stage5_c1_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage5_c1_c0_c1_c0;
                bias = ubias2_3_Stage5_c1_c0_c1_c0;
            }
        } else {
            if (t < uthresholds1_7_Stage5_c1_c0_c1_c0.z) {
                scale = uscale4_5_Stage5_c1_c0_c1_c0;
                bias = ubias4_5_Stage5_c1_c0_c1_c0;
            } else {
                scale = uscale6_7_Stage5_c1_c0_c1_c0;
                bias = ubias6_7_Stage5_c1_c0_c1_c0;
            }
        }
    } else {
        {
            {
                scale = uscale8_9_Stage5_c1_c0_c1_c0;
                bias = ubias8_9_Stage5_c1_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 TiledGradientEffect_Stage5_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 t = LinearGradientLayout_Stage5_c1_c0_c0_c0(vec4(1.0));
    {
        {
            t.x = fract(t.x);
        }
        _output = UnrolledBinaryGradientColorizer_Stage5_c1_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        output_Stage1 = blend_dst_in(outputColor_Stage0, ClampedGradientEffect_Stage1_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage2;
    {
        output_Stage2 = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_1_Stage0 - 3.0 * uImageIncrement_Stage2;
        vec2 coordSampled = vec2(0.0, 0.0);
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[0].x;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[0].y;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[0].z;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[0].w;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[1].x;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[1].y;
        coord += uImageIncrement_Stage2;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage2.x, uBounds_Stage2.y - uBounds_Stage2.x) + uBounds_Stage2.x;
        output_Stage2 += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2[1].z;
        coord += uImageIncrement_Stage2;
        output_Stage2 *= output_Stage1;
    }
    vec4 output_Stage3;
    {
        vec4 inputColor = output_Stage2;
        output_Stage3 = um_Stage3 * inputColor + uv_Stage3;
        {
            output_Stage3 = clamp(output_Stage3, 0.0, 1.0);
        }
    }
    vec4 output_Stage4;
    {
        vec4 dColor = texture(uTextureSampler_0_Stage4, vTransformedCoords_2_Stage0);
        dColor.xyz = dColor.w < 9.9999999747524271e-07 ? vec3(0.0) : clamp(dColor.xyz / dColor.w, 0.0, 1.0);
        vec2 cCoords = vTransformedCoords_3_Stage0 + uScale_Stage4 * (dColor.yz - vec2(0.5));
        {
            vec2 origCoord = cCoords;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
            if (err > uDecalParams_Stage4.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4.z < 1.0) {
                err = 0.0;
            }
            output_Stage4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
    }
    vec4 output_Stage5;
    {
        output_Stage5 = blend_dst_in(output_Stage4, TiledGradientEffect_Stage5_c1_c0(vec4(1.0)));
    }
    {
        sk_FragColor = output_Stage5;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
uniform mat3 uCoordTransformMatrix_4_Stage0;
in vec2 inPosition;
in vec2 inLocalCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vTransformedCoords_3_Stage0;
noperspective out vec2 vTransformedCoords_4_Stage0;
void main() {
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_4_Stage0 = (uCoordTransformMatrix_4_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

