[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform vec4 ucircleData_Stage1_c0_c0;
uniform vec4 uellipse_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec4 urectH_Stage1_c1_c0_c0_c0_c1_c0;
uniform float uinvSixSigma_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec2 uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
uniform vec2 uBounds_Stage1_c1_c0_c1_c0_c0_c0;
uniform vec4 uKernel_Stage1_c1_c0_c1_c0_c0_c0[5];
uniform vec4 urectH_Stage1_c1_c0_c1_c0_c1_c0;
uniform float uinvSixSigma_Stage1_c1_c0_c1_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
uniform sampler2D uTextureSampler_3_Stage1;
in vec2 vTransformedCoords_0_Stage0;
vec4 CircleBlurFragmentProcessor_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 vec = vec2((gl_FragCoord.x - ucircleData_Stage1_c0_c0.x) * ucircleData_Stage1_c0_c0.w, (gl_FragCoord.y - ucircleData_Stage1_c0_c0.y) * ucircleData_Stage1_c0_c0.w);
    float dist = length(vec) + (0.5 - ucircleData_Stage1_c0_c0.z) * ucircleData_Stage1_c0_c0.w;
    _output = _input * texture(uTextureSampler_0_Stage1, vec2(dist, 0.5)).w;
    return _output;
}
vec4 EllipseEffect_Stage1_c1_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 d = gl_FragCoord.xy - uellipse_Stage1_c1_c0_c0_c0_c0_c0.xy;
    vec2 Z = d * uellipse_Stage1_c1_c0_c0_c0_c0_c0.zw;
    float implicit = dot(Z, d) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    {
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
    }
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha;
    {
        alpha = clamp(0.5 - approx_dist, 0.0, 1.0);
    }
    _output = _input * alpha;
    return _output;
}
vec4 RectBlurEffect_Stage1_c1_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float xCoverage, yCoverage;
    {
        float x, y;
        {
            x = max(urectH_Stage1_c1_c0_c0_c0_c1_c0.x - gl_FragCoord.x, gl_FragCoord.x - urectH_Stage1_c1_c0_c0_c0_c1_c0.z);
            y = max(urectH_Stage1_c1_c0_c0_c0_c1_c0.y - gl_FragCoord.y, gl_FragCoord.y - urectH_Stage1_c1_c0_c0_c0_c1_c0.w);
        }
        xCoverage = texture(uTextureSampler_1_Stage1, vec2(x * uinvSixSigma_Stage1_c1_c0_c0_c0_c1_c0, 0.5)).w;
        yCoverage = texture(uTextureSampler_1_Stage1, vec2(y * uinvSixSigma_Stage1_c1_c0_c0_c0_c1_c0, 0.5)).w;
        _output = (_input * xCoverage) * yCoverage;
    }
    _output = (_input * xCoverage) * yCoverage;
    return _output;
}
vec4 blend_dst_out(vec4 src, vec4 dst) {
    return (1.0 - src.w) * dst;
}
vec4 ComposeTwo_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_dst_out(EllipseEffect_Stage1_c1_c0_c0_c0_c0_c0(inputColor), RectBlurEffect_Stage1_c1_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 GaussianConvolution_Stage1_c1_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_0_Stage0 - 9.0 * uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    vec2 coordSampled = vec2(0.0, 0.0);
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c1_c0_c0_c0.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[0].x;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c1_c0_c0_c0.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[0].y;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c1_c0_c0_c0.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[0].z;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c1_c0_c0_c0.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[0].w;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c1_c0_c0_c0.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[1].x;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c1_c0_c0_c0.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[1].y;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c1_c0_c0_c0.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[1].z;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c1_c0_c0_c0.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[1].w;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c1_c0_c0_c0.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[2].x;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c1_c0_c0_c0.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[2].y;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c1_c0_c0_c0.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[2].z;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c1_c0_c0_c0.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[2].w;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c1_c0_c0_c0.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[3].x;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c1_c0_c0_c0.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[3].y;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c1_c0_c0_c0.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[3].z;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c1_c0_c0_c0.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[3].w;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c1_c0_c0_c0.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[4].x;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c1_c0_c0_c0.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[4].y;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x, uBounds_Stage1_c1_c0_c1_c0_c0_c0.y - uBounds_Stage1_c1_c0_c1_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c0_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c0_c0[4].z;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c0_c0;
    _output *= _input;
    return _output;
}
vec4 RectBlurEffect_Stage1_c1_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float xCoverage, yCoverage;
    {
        float x, y;
        {
            x = max(urectH_Stage1_c1_c0_c1_c0_c1_c0.x - gl_FragCoord.x, gl_FragCoord.x - urectH_Stage1_c1_c0_c1_c0_c1_c0.z);
            y = max(urectH_Stage1_c1_c0_c1_c0_c1_c0.y - gl_FragCoord.y, gl_FragCoord.y - urectH_Stage1_c1_c0_c1_c0_c1_c0.w);
        }
        xCoverage = texture(uTextureSampler_3_Stage1, vec2(x * uinvSixSigma_Stage1_c1_c0_c1_c0_c1_c0, 0.5)).w;
        yCoverage = texture(uTextureSampler_3_Stage1, vec2(y * uinvSixSigma_Stage1_c1_c0_c1_c0_c1_c0, 0.5)).w;
        _output = (_input * xCoverage) * yCoverage;
    }
    _output = (_input * xCoverage) * yCoverage;
    return _output;
}
vec4 blend_exclusion(vec4 src, vec4 dst) {
    return vec4((dst.xyz + src.xyz) - (2.0 * dst.xyz) * src.xyz, src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_exclusion(GaussianConvolution_Stage1_c1_c0_c1_c0_c0_c0(inputColor), RectBlurEffect_Stage1_c1_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_in(ComposeTwo_Stage1_c1_c0_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_dst_in(CircleBlurFragmentProcessor_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
out vec2 vTransformedCoords_0_Stage0;
void main() {
    vec3 pos3 = uViewM_Stage0 * vec3(inPosition, 1.0);
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos3.x, pos3.y, 0.0, pos3.z);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

