[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 ucircle_Stage1_c0_c0_c0_c0;
uniform float uinnerThreshold_Stage1_c0_c0_c1_c0;
uniform float uouterThreshold_Stage1_c0_c0_c1_c0;
uniform vec2 uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec4 uKernel_Stage1_c1_c0_c0_c0_c0_c0[6];
uniform vec2 uKernelOffset_Stage1_c1_c0_c0_c0_c0_c0;
uniform float uGain_Stage1_c1_c0_c0_c0_c0_c0;
uniform float uBias_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec4 uTexDom_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec3 uDecalParams_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec4 uinnerRect_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec4 uinvRadiiLTRB_Stage1_c1_c0_c0_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
noperspective in vec4 vinCircleEdge_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
vec4 CircleEffect_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float d;
    {
        d = (1.0 - length((ucircle_Stage1_c0_c0_c0_c0.xy - gl_FragCoord.xy) * ucircle_Stage1_c0_c0_c0_c0.w)) * ucircle_Stage1_c0_c0_c0_c0.z;
    }
    {
        _output = _input * clamp(d, 0.0, 1.0);
    }
    return _output;
}
vec4 AlphaThresholdFragmentProcessor_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 color = _input;
    vec4 mask_color = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
    if (mask_color.w < 0.5) {
        if (color.w > uouterThreshold_Stage1_c0_c0_c1_c0) {
            float scale = uouterThreshold_Stage1_c0_c0_c1_c0 / color.w;
            color.xyz *= scale;
            color.w = uouterThreshold_Stage1_c0_c0_c1_c0;
        }
    } else if (color.w < uinnerThreshold_Stage1_c0_c0_c1_c0) {
        float scale = uinnerThreshold_Stage1_c0_c0_c1_c0 / max(0.0010000000474974513, color.w);
        color.xyz *= scale;
        color.w = uinnerThreshold_Stage1_c0_c0_c1_c0;
    }
    _output = color;
    return _output;
}
float _guarded_divide(float n, float d) {
    return n / d;
}
float _soft_light_component(float sc, float sa, float dc, float da) {
    if (2.0 * sc <= sa) {
        return (_guarded_divide((dc * dc) * (sa - 2.0 * sc), da) + (1.0 - da) * sc) + dc * ((-sa + 2.0 * sc) + 1.0);
    } else if (4.0 * dc <= da) {
        float DSqd = dc * dc;
        float DCub = DSqd * dc;
        float DaSqd = da * da;
        float DaCub = DaSqd * da;
        return _guarded_divide(((DaSqd * (sc - dc * ((3.0 * sa - 6.0 * sc) - 1.0)) + ((12.0 * da) * DSqd) * (sa - 2.0 * sc)) - (16.0 * DCub) * (sa - 2.0 * sc)) - DaCub * sc, DaSqd);
    }
    return ((dc * ((sa - 2.0 * sc) + 1.0) + sc) - sqrt(da * dc) * (sa - 2.0 * sc)) - da * sc;
}
vec4 blend_soft_light(vec4 src, vec4 dst) {
    if (dst.w == 0.0) {
        return src;
    }
    return vec4(_soft_light_component(src.x, src.w, dst.x, dst.w), _soft_light_component(src.y, src.w, dst.y, dst.w), _soft_light_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_soft_light(CircleEffect_Stage1_c0_c0_c0_c0(inputColor), AlphaThresholdFragmentProcessor_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 MatrixConvolution_Stage1_c1_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_1_Stage0 - uKernelOffset_Stage1_c1_c0_c0_c0_c0_c0 * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
    vec4 c;
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[0].x;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[0].y;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[0].z;
        {
            vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[0].w;
        {
            vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[1].x;
        {
            vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[1].y;
        {
            vec2 origCoord = coord + vec2(5.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[1].z;
        {
            vec2 origCoord = coord + vec2(6.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[1].w;
        {
            vec2 origCoord = coord + vec2(7.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[2].x;
        {
            vec2 origCoord = coord + vec2(8.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[2].y;
        {
            vec2 origCoord = coord + vec2(9.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[2].z;
        {
            vec2 origCoord = coord + vec2(10.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[2].w;
        {
            vec2 origCoord = coord + vec2(11.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[3].x;
        {
            vec2 origCoord = coord + vec2(12.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[3].y;
        {
            vec2 origCoord = coord + vec2(13.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[3].z;
        {
            vec2 origCoord = coord + vec2(14.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[3].w;
        {
            vec2 origCoord = coord + vec2(15.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[4].x;
        {
            vec2 origCoord = coord + vec2(16.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[4].y;
        {
            vec2 origCoord = coord + vec2(17.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[4].z;
        {
            vec2 origCoord = coord + vec2(18.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[4].w;
        {
            vec2 origCoord = coord + vec2(19.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[5].x;
        {
            vec2 origCoord = coord + vec2(20.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[5].y;
        {
            vec2 origCoord = coord + vec2(21.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[5].z;
        {
            vec2 origCoord = coord + vec2(22.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c0_c0_c0_c0[5].w;
        {
            vec2 origCoord = coord + vec2(23.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        vec2 origCoord = vTransformedCoords_1_Stage0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    _output.w = c.w;
    _output.xyz = clamp(sum.xyz * uGain_Stage1_c1_c0_c0_c0_c0_c0 + uBias_Stage1_c1_c0_c0_c0_c0_c0, 0.0, 1.0);
    _output.xyz *= _output.w;
    _output *= _input;
    return _output;
}
vec4 EllipticalRRect_Stage1_c1_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c1_c0_c0_c0_c1_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c1_c0_c0_c0_c1_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    vec2 Z = max(max(dxy0 * uinvRadiiLTRB_Stage1_c1_c0_c0_c0_c1_c0.xy, dxy1 * uinvRadiiLTRB_Stage1_c1_c0_c0_c0_c1_c0.zw), 0.0);
    float implicit = dot(Z, dxy) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    grad_dot = max(grad_dot, 9.9999997473787516e-05);
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha = clamp(0.5 + approx_dist, 0.0, 1.0);
    _output = _input * alpha;
    return _output;
}
vec4 blend_src_over(vec4 src, vec4 dst) {
    return src + (1.0 - src.w) * dst;
}
vec4 blend_darken(vec4 src, vec4 dst) {
    vec4 result = blend_src_over(src, dst);
    result.xyz = min(result.xyz, (1.0 - dst.w) * src.xyz + dst.xyz);
    return result;
}
vec4 ComposeTwo_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_darken(MatrixConvolution_Stage1_c1_c0_c0_c0_c0_c0(inputColor), EllipticalRRect_Stage1_c1_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 Big_Ole_Key_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = _input;
    return _output;
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_darken(ComposeTwo_Stage1_c1_c0_c0_c0(inputColor), Big_Ole_Key_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
float _blend_overlay_component(float sc, float sa, float dc, float da) {
    if (2.0 * dc <= da) {
        return (2.0 * sc) * dc;
    }
    return sa * da - (2.0 * (da - dc)) * (sa - sc);
}
vec4 blend_overlay(vec4 src, vec4 dst) {
    vec4 result = vec4(_blend_overlay_component(src.x, src.w, dst.x, dst.w), _blend_overlay_component(src.y, src.w, dst.y, dst.w), _blend_overlay_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
    result.xyz += dst.xyz * (1.0 - src.w) + src.xyz * (1.0 - dst.w);
    return result;
}
vec4 blend_hard_light(vec4 src, vec4 dst) {
    return blend_overlay(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        vec4 circleEdge;
        circleEdge = vinCircleEdge_Stage0;
        outputColor_Stage0 = vinColor_Stage0;
        float d = length(circleEdge.xy);
        float distanceToOuterEdge = circleEdge.z * (1.0 - d);
        float edgeAlpha = clamp(distanceToOuterEdge, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_hard_light(ComposeTwo_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = outputCoverage_Stage0 * output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec4 inCircleEdge;
noperspective out vec4 vinCircleEdge_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vinCircleEdge_Stage0 = inCircleEdge;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

