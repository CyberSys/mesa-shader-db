[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform float ucornerRadius_Stage1;
uniform vec4 uproxyRect_Stage1;
uniform float ublurRadius_Stage1;
uniform vec4 uboundsUniform_Stage2;
uniform float uxInvZoom_Stage2;
uniform float uyInvZoom_Stage2;
uniform float uxInvInset_Stage2;
uniform float uyInvInset_Stage2;
uniform vec2 uoffset_Stage2;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
noperspective in vec4 vQuadEdge_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = vinColor_Stage0;
        float edgeAlpha;
        vec2 duvdx = dFdx(vQuadEdge_Stage0.xy);
        vec2 duvdy = dFdy(vQuadEdge_Stage0.xy);
        if (vQuadEdge_Stage0.z > 0.0 && vQuadEdge_Stage0.w > 0.0) {
            edgeAlpha = min(min(vQuadEdge_Stage0.z, vQuadEdge_Stage0.w) + 0.5, 1.0);
        } else {
            vec2 gF = vec2((2.0 * vQuadEdge_Stage0.x) * duvdx.x - duvdx.y, (2.0 * vQuadEdge_Stage0.x) * duvdy.x - duvdy.y);
            edgeAlpha = vQuadEdge_Stage0.x * vQuadEdge_Stage0.x - vQuadEdge_Stage0.y;
            edgeAlpha = clamp(0.5 - edgeAlpha / length(gF), 0.0, 1.0);
        }
    }
    vec4 output_Stage1;
    {
        vec2 translatedFragPos = gl_FragCoord.xy - uproxyRect_Stage1.xy;
        float threshold = ucornerRadius_Stage1 + 2.0 * ublurRadius_Stage1;
        vec2 middle = (uproxyRect_Stage1.zw - uproxyRect_Stage1.xy) - 2.0 * threshold;
        if (translatedFragPos.x >= threshold && translatedFragPos.x < middle.x + threshold) {
            translatedFragPos.x = threshold;
        } else if (translatedFragPos.x >= middle.x + threshold) {
            translatedFragPos.x -= middle.x - 1.0;
        }
        if (translatedFragPos.y > threshold && translatedFragPos.y < middle.y + threshold) {
            translatedFragPos.y = threshold;
        } else if (translatedFragPos.y >= middle.y + threshold) {
            translatedFragPos.y -= middle.y - 1.0;
        }
        vec2 proxyDims = vec2(2.0 * threshold + 1.0);
        vec2 texCoord = translatedFragPos / proxyDims;
        output_Stage1 = outputColor_Stage0 * texture(uTextureSampler_0_Stage1, texCoord);
    }
    vec4 output_Stage2;
    {
        vec2 coord = vTransformedCoords_0_Stage0;
        vec2 zoom_coord = uoffset_Stage2 + coord * vec2(uxInvZoom_Stage2, uyInvZoom_Stage2);
        vec2 delta = (coord - uboundsUniform_Stage2.xy) * uboundsUniform_Stage2.zw;
        delta = min(delta, vec2(1.0, 1.0) - delta);
        delta *= vec2(uxInvInset_Stage2, uyInvInset_Stage2);
        float weight = 0.0;
        if (delta.x < 2.0 && delta.y < 2.0) {
            delta = vec2(2.0, 2.0) - delta;
            float dist = length(delta);
            dist = max(2.0 - dist, 0.0);
            weight = min(dist * dist, 1.0);
        } else {
            vec2 delta_squared = delta * delta;
            weight = min(min(delta_squared.x, delta_squared.y), 1.0);
        }
        output_Stage2 = texture(uTextureSampler_0_Stage2, mix(coord, zoom_coord, weight));
    }
    {
        sk_FragColor = output_Stage2 * output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec4 inQuadEdge;
noperspective out vec4 vQuadEdge_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vQuadEdge_Stage0 = inQuadEdge;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

