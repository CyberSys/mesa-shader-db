[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uinnerRect_Stage1;
uniform vec4 uinvRadiiLTRB_Stage1;
uniform vec4 uellipse_Stage2;
uniform vec4 ucircleData_Stage3;
uniform vec4 ucircleData_Stage4_c0_c0;
uniform float uinnerThreshold_Stage4_c1_c0;
uniform float uouterThreshold_Stage4_c1_c0;
uniform sampler2D uTextureSampler_0_Stage3;
uniform sampler2D uTextureSampler_0_Stage4;
uniform sampler2D uTextureSampler_1_Stage4;
uniform sampler2D uTextureSampler_0_Stage5;
noperspective in vec2 vEllipseOffsets_Stage0;
noperspective in vec4 vEllipseRadii_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
vec4 CircleBlurFragmentProcessor_Stage4_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 vec = vec2((gl_FragCoord.x - ucircleData_Stage4_c0_c0.x) * ucircleData_Stage4_c0_c0.w, (gl_FragCoord.y - ucircleData_Stage4_c0_c0.y) * ucircleData_Stage4_c0_c0.w);
    float dist = length(vec) + (0.5 - ucircleData_Stage4_c0_c0.z) * ucircleData_Stage4_c0_c0.w;
    _output = _input * texture(uTextureSampler_0_Stage4, vec2(dist, 0.5)).w;
    return _output;
}
vec4 AlphaThresholdFragmentProcessor_Stage4_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 color = _input;
    vec4 mask_color = texture(uTextureSampler_1_Stage4, vTransformedCoords_0_Stage0);
    if (mask_color.w < 0.5) {
        if (color.w > uouterThreshold_Stage4_c1_c0) {
            float scale = uouterThreshold_Stage4_c1_c0 / color.w;
            color.xyz *= scale;
            color.w = uouterThreshold_Stage4_c1_c0;
        }
    } else if (color.w < uinnerThreshold_Stage4_c1_c0) {
        float scale = uinnerThreshold_Stage4_c1_c0 / max(0.0010000000474974513, color.w);
        color.xyz *= scale;
        color.w = uinnerThreshold_Stage4_c1_c0;
    }
    _output = color;
    return _output;
}
float _guarded_divide(float n, float d) {
    return n / d;
}
float _color_dodge_component(float sc, float sa, float dc, float da) {
    if (dc == 0.0) {
        return sc * (1.0 - da);
    } else {
        float d = sa - sc;
        if (d == 0.0) {
            return (sa * da + sc * (1.0 - da)) + dc * (1.0 - sa);
        }
        d = min(da, _guarded_divide(dc * sa, d));
        return (d * sa + sc * (1.0 - da)) + dc * (1.0 - sa);
    }
}
vec4 blend_color_dodge(vec4 src, vec4 dst) {
    return vec4(_color_dodge_component(src.x, src.w, dst.x, dst.w), _color_dodge_component(src.y, src.w, dst.y, dst.w), _color_dodge_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vinColor_Stage0;
        vec2 offset = vEllipseOffsets_Stage0;
        float test = dot(offset, offset) - 1.0;
        vec2 grad = (2.0 * offset) * vEllipseRadii_Stage0.xy;
        float grad_dot = dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec2 dxy0 = uinnerRect_Stage1.xy - gl_FragCoord.xy;
        vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1.zw;
        vec2 dxy = max(max(dxy0, dxy1), 0.0);
        vec2 Z = max(max(dxy0 * uinvRadiiLTRB_Stage1.xy, dxy1 * uinvRadiiLTRB_Stage1.zw), 0.0);
        float implicit = dot(Z, dxy) - 1.0;
        float grad_dot = 4.0 * dot(Z, Z);
        grad_dot = max(grad_dot, 9.9999997473787516e-05);
        float approx_dist = implicit * inversesqrt(grad_dot);
        float alpha = clamp(0.5 - approx_dist, 0.0, 1.0);
        output_Stage1 = outputColor_Stage0 * alpha;
    }
    vec4 output_Stage2;
    {
        vec2 d = gl_FragCoord.xy - uellipse_Stage2.xy;
        vec2 Z = d * uellipse_Stage2.zw;
        float implicit = dot(Z, d) - 1.0;
        float grad_dot = 4.0 * dot(Z, Z);
        {
            grad_dot = max(grad_dot, 1.1754999560161448e-38);
        }
        float approx_dist = implicit * inversesqrt(grad_dot);
        float alpha;
        {
            alpha = clamp(0.5 - approx_dist, 0.0, 1.0);
        }
        output_Stage2 = outputCoverage_Stage0 * alpha;
    }
    vec4 output_Stage3;
    {
        vec2 vec = vec2((gl_FragCoord.x - ucircleData_Stage3.x) * ucircleData_Stage3.w, (gl_FragCoord.y - ucircleData_Stage3.y) * ucircleData_Stage3.w);
        float dist = length(vec) + (0.5 - ucircleData_Stage3.z) * ucircleData_Stage3.w;
        output_Stage3 = output_Stage2 * texture(uTextureSampler_0_Stage3, vec2(dist, 0.5)).w;
    }
    vec4 output_Stage4;
    {
        vec4 inputColor = vec4(output_Stage3.xyz, 1.0);
        output_Stage4 = blend_color_dodge(CircleBlurFragmentProcessor_Stage4_c0_c0(inputColor), AlphaThresholdFragmentProcessor_Stage4_c1_c0(inputColor));
        output_Stage4 *= output_Stage3.w;
    }
    vec4 output_Stage5;
    {
        output_Stage5 = texture(uTextureSampler_0_Stage5, vTransformedCoords_1_Stage0) * output_Stage4;
    }
    {
        sk_FragColor = output_Stage5 * output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffset;
in vec4 inEllipseRadii;
noperspective out vec2 vEllipseOffsets_Stage0;
noperspective out vec4 vEllipseRadii_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vEllipseOffsets_Stage0 = inEllipseOffset;
    vEllipseRadii_Stage0 = inEllipseRadii;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

