[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform vec2 uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec2 uBounds_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec4 uKernel_Stage1_c1_c0_c0_c0_c0_c0[2];
uniform vec2 ubaseFrequency_Stage1_c1_c0_c0_c0_c1_c0;
uniform float uz_Stage1_c1_c0_c0_c0_c1_c0;
uniform float uinnerThreshold_Stage1_c1_c0_c1_c0_c0_c0;
uniform float uouterThreshold_Stage1_c1_c0_c1_c0_c0_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
uniform sampler2D uTextureSampler_3_Stage1;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec3 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
vec4 ClampFragmentProcessor_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    {
        float alpha = clamp(_input.w, 0.0, 1.0);
        _output = vec4(clamp(_input.xyz, 0.0, alpha), alpha);
    }
    return _output;
}
vec4 GaussianConvolution_Stage1_c1_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_0_Stage0 - 2.0 * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
    vec2 coordSampled = vec2(0.0, 0.0);
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c0_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0_c0_c0.y - uBounds_Stage1_c1_c0_c0_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c0_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c0_c0[0].x;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c0_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0_c0_c0.y - uBounds_Stage1_c1_c0_c0_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c0_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c0_c0[0].y;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c0_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0_c0_c0.y - uBounds_Stage1_c1_c0_c0_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c0_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c0_c0[0].z;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c0_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0_c0_c0.y - uBounds_Stage1_c1_c0_c0_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c0_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c0_c0[0].w;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage1_c1_c0_c0_c0_c0_c0.x, uBounds_Stage1_c1_c0_c0_c0_c0_c0.y - uBounds_Stage1_c1_c0_c0_c0_c0_c0.x) + uBounds_Stage1_c1_c0_c0_c0_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c0_c0_c0_c0[1].x;
    coord += uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
    _output *= _input;
    return _output;
}
vec3 fade_Stage1_c1_c0_c0_c0_c1_c0(vec3 t) {
    return ((t * t) * t) * (t * (t * 6.0 - 15.0) + 10.0);
}
float perm_Stage1_c1_c0_c0_c0_c1_c0(float x) {
    return texture(uTextureSampler_1_Stage1, vec2(fract(x / 256.0), 0.0)).x * 255.0;
}
float grad_Stage1_c1_c0_c0_c0_c1_c0(float x, vec3 p) {
    return dot(texture(uTextureSampler_2_Stage1, vec2(fract(x / 16.0), 0.0)).xyz * 255.0 - vec3(1.0), p);
}
float lerp_Stage1_c1_c0_c0_c0_c1_c0(float a, float b, float w) {
    return a + w * (b - a);
}
float noise_Stage1_c1_c0_c0_c0_c1_c0(vec3 p) {
    vec3 P = mod(floor(p), 256.0);
    p -= floor(p);
    vec3 f = fade_Stage1_c1_c0_c0_c0_c1_c0(p);
    float A = perm_Stage1_c1_c0_c0_c0_c1_c0(P.x) + P.y;
    float AA = perm_Stage1_c1_c0_c0_c0_c1_c0(A) + P.z;
    float AB = perm_Stage1_c1_c0_c0_c0_c1_c0(A + 1.0) + P.z;
    float B = perm_Stage1_c1_c0_c0_c0_c1_c0(P.x + 1.0) + P.y;
    float BA = perm_Stage1_c1_c0_c0_c0_c1_c0(B) + P.z;
    float BB = perm_Stage1_c1_c0_c0_c0_c1_c0(B + 1.0) + P.z;
    float result = lerp_Stage1_c1_c0_c0_c0_c1_c0(lerp_Stage1_c1_c0_c0_c0_c1_c0(lerp_Stage1_c1_c0_c0_c0_c1_c0(grad_Stage1_c1_c0_c0_c0_c1_c0(perm_Stage1_c1_c0_c0_c0_c1_c0(AA), p), grad_Stage1_c1_c0_c0_c0_c1_c0(perm_Stage1_c1_c0_c0_c0_c1_c0(BA), p + vec3(-1.0, 0.0, 0.0)), f.x), lerp_Stage1_c1_c0_c0_c0_c1_c0(grad_Stage1_c1_c0_c0_c0_c1_c0(perm_Stage1_c1_c0_c0_c0_c1_c0(AB), p + vec3(0.0, -1.0, 0.0)), grad_Stage1_c1_c0_c0_c0_c1_c0(perm_Stage1_c1_c0_c0_c0_c1_c0(BB), p + vec3(-1.0, -1.0, 0.0)), f.x), f.y), lerp_Stage1_c1_c0_c0_c0_c1_c0(lerp_Stage1_c1_c0_c0_c0_c1_c0(grad_Stage1_c1_c0_c0_c0_c1_c0(perm_Stage1_c1_c0_c0_c0_c1_c0(AA + 1.0), p + vec3(0.0, 0.0, -1.0)), grad_Stage1_c1_c0_c0_c0_c1_c0(perm_Stage1_c1_c0_c0_c0_c1_c0(BA + 1.0), p + vec3(-1.0, 0.0, -1.0)), f.x), lerp_Stage1_c1_c0_c0_c0_c1_c0(grad_Stage1_c1_c0_c0_c0_c1_c0(perm_Stage1_c1_c0_c0_c0_c1_c0(AB + 1.0), p + vec3(0.0, -1.0, -1.0)), grad_Stage1_c1_c0_c0_c0_c1_c0(perm_Stage1_c1_c0_c0_c0_c1_c0(BB + 1.0), p + vec3(-1.0, -1.0, -1.0)), f.x), f.y), f.z);
    return result;
}
float noiseOctaves_Stage1_c1_c0_c0_c0_c1_c0(vec3 p) {
    float result = 0.0;
    float ratio = 1.0;
    for (float i = 0.0;i < 6.0; i++) {
        result += noise_Stage1_c1_c0_c0_c0_c1_c0(p) / ratio;
        p *= 2.0;
        ratio *= 2.0;
    }
    return (result + 1.0) / 2.0;
}
vec4 ImprovedPerlinNoise_Stage1_c1_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 vTransformedCoords_1_Stage0_ensure2D = vTransformedCoords_1_Stage0.xy / vTransformedCoords_1_Stage0.z;
    vec2 coords = vTransformedCoords_1_Stage0_ensure2D * ubaseFrequency_Stage1_c1_c0_c0_c0_c1_c0;
    float r = noiseOctaves_Stage1_c1_c0_c0_c0_c1_c0(vec3(coords, uz_Stage1_c1_c0_c0_c0_c1_c0));
    float g = noiseOctaves_Stage1_c1_c0_c0_c0_c1_c0(vec3(coords, uz_Stage1_c1_c0_c0_c0_c1_c0));
    float b = noiseOctaves_Stage1_c1_c0_c0_c0_c1_c0(vec3(coords, uz_Stage1_c1_c0_c0_c0_c1_c0));
    float a = noiseOctaves_Stage1_c1_c0_c0_c0_c1_c0(vec3(coords, uz_Stage1_c1_c0_c0_c0_c1_c0));
    _output = vec4(r, g, b, a);
    _output = clamp(_output, 0.0, 1.0);
    _output = vec4(_output.xyz * _output.www, _output.w);
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 ComposeTwo_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_in(GaussianConvolution_Stage1_c1_c0_c0_c0_c0_c0(inputColor), ImprovedPerlinNoise_Stage1_c1_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 AlphaThresholdFragmentProcessor_Stage1_c1_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 color = _input;
    vec4 mask_color = texture(uTextureSampler_3_Stage1, vTransformedCoords_2_Stage0);
    if (mask_color.w < 0.5) {
        if (color.w > uouterThreshold_Stage1_c1_c0_c1_c0_c0_c0) {
            float scale = uouterThreshold_Stage1_c1_c0_c1_c0_c0_c0 / color.w;
            color.xyz *= scale;
            color.w = uouterThreshold_Stage1_c1_c0_c1_c0_c0_c0;
        }
    } else if (color.w < uinnerThreshold_Stage1_c1_c0_c1_c0_c0_c0) {
        float scale = uinnerThreshold_Stage1_c1_c0_c1_c0_c0_c0 / max(0.0010000000474974513, color.w);
        color.xyz *= scale;
        color.w = uinnerThreshold_Stage1_c1_c0_c1_c0_c0_c0;
    }
    _output = color;
    return _output;
}
vec4 ClampFragmentProcessor_Stage1_c1_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    {
        _output = clamp(_input, 0.0, 1.0);
    }
    return _output;
}
vec4 blend_dst_over(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + dst;
}
vec4 ComposeTwo_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_dst_over(AlphaThresholdFragmentProcessor_Stage1_c1_c0_c1_c0_c0_c0(inputColor), ClampFragmentProcessor_Stage1_c1_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_dst_atop(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + src.w * dst;
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_dst_atop(ComposeTwo_Stage1_c1_c0_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_src_out(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_src_out(ClampFragmentProcessor_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec3 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
void main() {
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0);
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    {
        vec2 _posTmp = pos2;
        _posTmp = floor(_posTmp) + vec2(0.5, 0.5);
        gl_Position = vec4(_posTmp, 0.0, 1.0);
    }
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

