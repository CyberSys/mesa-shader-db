[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec2 uImageIncrement_Stage1;
uniform vec4 uKernel_Stage1[7];
uniform vec2 uKernelOffset_Stage1;
uniform float uGain_Stage1;
uniform float uBias_Stage1;
uniform sampler2D uTextureSampler_0_Stage1;
noperspective in vec2 vTransformedCoords_0_Stage0;
void main() {
    vec4 output_Stage1;
    {
        vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_0_Stage0 - uKernelOffset_Stage1 * uImageIncrement_Stage1;
        vec4 c;
        {
            float k = uKernel_Stage1[0].x;
            {
                vec2 origCoord = coord;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[0].y;
            {
                vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[0].z;
            {
                vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[0].w;
            {
                vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[1].x;
            {
                vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[1].y;
            {
                vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[1].z;
            {
                vec2 origCoord = coord + uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[1].w;
            {
                vec2 origCoord = coord + vec2(2.0, 1.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[2].x;
            {
                vec2 origCoord = coord + vec2(3.0, 1.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[2].y;
            {
                vec2 origCoord = coord + vec2(4.0, 1.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[2].z;
            {
                vec2 origCoord = coord + vec2(0.0, 2.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[2].w;
            {
                vec2 origCoord = coord + vec2(1.0, 2.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[3].x;
            {
                vec2 origCoord = coord + vec2(2.0, 2.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[3].y;
            {
                vec2 origCoord = coord + vec2(3.0, 2.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[3].z;
            {
                vec2 origCoord = coord + vec2(4.0, 2.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[3].w;
            {
                vec2 origCoord = coord + vec2(0.0, 3.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[4].x;
            {
                vec2 origCoord = coord + vec2(1.0, 3.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[4].y;
            {
                vec2 origCoord = coord + vec2(2.0, 3.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[4].z;
            {
                vec2 origCoord = coord + vec2(3.0, 3.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[4].w;
            {
                vec2 origCoord = coord + vec2(4.0, 3.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[5].x;
            {
                vec2 origCoord = coord + vec2(0.0, 4.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[5].y;
            {
                vec2 origCoord = coord + vec2(1.0, 4.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[5].z;
            {
                vec2 origCoord = coord + vec2(2.0, 4.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[5].w;
            {
                vec2 origCoord = coord + vec2(3.0, 4.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage1[6].x;
            {
                vec2 origCoord = coord + vec2(4.0, 4.0) * uImageIncrement_Stage1;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        output_Stage1 = sum * uGain_Stage1 + uBias_Stage1;
        output_Stage1.w = clamp(output_Stage1.w, 0.0, 1.0);
        output_Stage1.xyz = clamp(output_Stage1.xyz, 0.0, output_Stage1.w);
    }
    {
        sk_FragColor = output_Stage1;
        sk_FragColor = sk_FragColor.wwww;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 position;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

