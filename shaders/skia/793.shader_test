[require]
GLSL >= 1.40
GL_KHR_blend_equation_advanced

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec2 uImageIncrement_Stage1;
uniform vec2 uBounds_Stage1;
uniform vec4 uKernel_Stage1[3];
uniform vec4 uinnerRect_Stage2;
uniform vec2 uradiusPlusHalf_Stage2;
uniform vec2 uImageIncrement_Stage3;
uniform float uSurfaceScale_Stage3;
uniform vec3 uLightColor_Stage3;
uniform float uKS_Stage3;
uniform float uShininess_Stage3;
uniform vec4 uTexDom_Stage3;
uniform vec3 uDecalParams_Stage3;
uniform vec3 uLightDirection_Stage3;
uniform vec4 urectH_Stage4;
uniform float uinvSixSigma_Stage4;
uniform vec4 uinnerRect_Stage5_c0_c0;
uniform vec2 uradiusPlusHalf_Stage5_c0_c0;
uniform vec2 uImageIncrement_Stage5_c1_c0;
uniform vec2 uBounds_Stage5_c1_c0;
uniform vec4 uKernel_Stage5_c1_c0[1];
uniform vec4 uinnerRect_Stage6;
uniform vec2 uradiusPlusHalf_Stage6;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage3;
uniform sampler2D uTextureSampler_0_Stage4;
uniform sampler2D uTextureSampler_0_Stage5;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
vec4 light_Stage3(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    vec3 halfDir = normalize(surfaceToLight + vec3(0.0, 0.0, 1.0));
    float colorScale = uKS_Stage3 * pow(dot(normal, halfDir), uShininess_Stage3);
    vec3 color = lightColor * clamp(colorScale, 0.0, 1.0);
    return vec4(color, max(max(color.x, color.y), color.z));
}
float sobel_Stage3(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage3(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage3(float m[9], float surfaceScale) {
    return pointToNormal_Stage3(sobel_Stage3(0.0, 0.0, m[4], m[5], m[7], m[8], 0.66666698455810547), sobel_Stage3(0.0, 0.0, m[4], m[7], m[5], m[8], 0.66666698455810547), surfaceScale);
}
vec4 CircularRRect_Stage5_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage5_c0_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage5_c0_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    float alpha = clamp(uradiusPlusHalf_Stage5_c0_c0.x - length(dxy), 0.0, 1.0);
    alpha = 1.0 - alpha;
    _output = _input * alpha;
    return _output;
}
vec4 GaussianConvolution_Stage5_c1_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_2_Stage0 - uImageIncrement_Stage5_c1_c0;
    vec2 coordSampled = vec2(0.0, 0.0);
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage5_c1_c0.x, uBounds_Stage5_c1_c0.y - uBounds_Stage5_c1_c0.x) + uBounds_Stage5_c1_c0.x;
    _output += texture(uTextureSampler_0_Stage5, coordSampled) * uKernel_Stage5_c1_c0[0].x;
    coord += uImageIncrement_Stage5_c1_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage5_c1_c0.x, uBounds_Stage5_c1_c0.y - uBounds_Stage5_c1_c0.x) + uBounds_Stage5_c1_c0.x;
    _output += texture(uTextureSampler_0_Stage5, coordSampled) * uKernel_Stage5_c1_c0[0].y;
    coord += uImageIncrement_Stage5_c1_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage5_c1_c0.x, uBounds_Stage5_c1_c0.y - uBounds_Stage5_c1_c0.x) + uBounds_Stage5_c1_c0.x;
    _output += texture(uTextureSampler_0_Stage5, coordSampled) * uKernel_Stage5_c1_c0[0].z;
    coord += uImageIncrement_Stage5_c1_c0;
    _output *= _input;
    return _output;
}
vec4 blend_xor(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + (1.0 - src.w) * dst;
}
void main() {
    vec4 output_Stage1;
    {
        output_Stage1 = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_0_Stage0 - 5.0 * uImageIncrement_Stage1;
        vec2 coordSampled = vec2(0.0, 0.0);
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[0].x;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[0].y;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[0].z;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[0].w;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[1].x;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[1].y;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[1].z;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[1].w;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[2].x;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[2].y;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[2].z;
        coord += uImageIncrement_Stage1;
    }
    vec4 output_Stage2;
    {
        vec2 dxy0 = uinnerRect_Stage2.xy - gl_FragCoord.xy;
        vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage2.zw;
        vec2 dxy = max(max(dxy0, dxy1), 0.0);
        float alpha = clamp(uradiusPlusHalf_Stage2.x - length(dxy), 0.0, 1.0);
        output_Stage2 = vec4(alpha);
    }
    vec4 output_Stage3;
    {
        vec2 coord = vTransformedCoords_1_Stage0;
        float m[9];
        vec4 temp0;
        {
            vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[0] = temp0.w;
        vec4 temp1;
        {
            vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[1] = temp1.w;
        vec4 temp2;
        {
            vec2 origCoord = coord + uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[2] = temp2.w;
        vec4 temp3;
        {
            vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[3] = temp3.w;
        vec4 temp4;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[4] = temp4.w;
        vec4 temp5;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[5] = temp5.w;
        vec4 temp6;
        {
            vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[6] = temp6.w;
        vec4 temp7;
        {
            vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[7] = temp7.w;
        vec4 temp8;
        {
            vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage3;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage3.xy, uTexDom_Stage3.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3.y);
            if (err > uDecalParams_Stage3.z) {
                err = 1.0;
            } else if (uDecalParams_Stage3.z < 1.0) {
                err = 0.0;
            }
            temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[8] = temp8.w;
        vec3 surfaceToLight = uLightDirection_Stage3;
        output_Stage3 = light_Stage3(normal_Stage3(m, uSurfaceScale_Stage3), surfaceToLight, uLightColor_Stage3);
        output_Stage3 *= output_Stage2;
    }
    vec4 output_Stage4;
    {
        float xCoverage, yCoverage;
        {
            float x, y;
            {
                x = max(urectH_Stage4.x - gl_FragCoord.x, gl_FragCoord.x - urectH_Stage4.z);
                y = max(urectH_Stage4.y - gl_FragCoord.y, gl_FragCoord.y - urectH_Stage4.w);
            }
            xCoverage = texture(uTextureSampler_0_Stage4, vec2(x * uinvSixSigma_Stage4, 0.5)).w;
            yCoverage = texture(uTextureSampler_0_Stage4, vec2(y * uinvSixSigma_Stage4, 0.5)).w;
            output_Stage4 = (output_Stage3 * xCoverage) * yCoverage;
        }
        output_Stage4 = (output_Stage3 * xCoverage) * yCoverage;
    }
    vec4 output_Stage5;
    {
        vec4 inputColor = vec4(output_Stage4.xyz, 1.0);
        output_Stage5 = blend_xor(CircularRRect_Stage5_c0_c0(inputColor), GaussianConvolution_Stage5_c1_c0(inputColor));
        output_Stage5 *= output_Stage4.w;
    }
    vec4 output_Stage6;
    {
        vec2 dxy0 = uinnerRect_Stage6.xy - gl_FragCoord.xy;
        vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage6.zw;
        vec2 dxy = max(max(dxy0, dxy1), 0.0);
        float alpha = clamp(uradiusPlusHalf_Stage6.x - length(dxy), 0.0, 1.0);
        output_Stage6 = output_Stage5 * alpha;
    }
    {
        sk_FragColor = output_Stage6 * output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 position;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(localCoord, 1.0)).xy;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

