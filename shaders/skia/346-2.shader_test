[require]
GLSL >= 1.40
GL_KHR_blend_equation_advanced

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec2 uScale_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec4 uTexDom_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec3 uDecalParams_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec3 uedges_Stage1_c1_c0_c0_c0_c1_c0[1];
uniform vec4 ucolor_Stage1_c1_c0_c1_c0_c0_c0;
uniform vec2 uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
uniform vec2 uBounds_Stage1_c1_c0_c1_c0_c1_c0;
uniform vec4 uKernel_Stage1_c1_c0_c1_c0_c1_c0[2];
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
noperspective in vec4 vcolor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
vec4 Big_Ole_Key_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    _output = _input;
    return _output;
}
vec4 DisplacementMap_Stage1_c1_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 dColor = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
    dColor.xyz = dColor.w < 9.9999999747524271e-07 ? vec3(0.0) : clamp(dColor.xyz / dColor.w, 0.0, 1.0);
    vec2 cCoords = vTransformedCoords_1_Stage0 + uScale_Stage1_c1_c0_c0_c0_c0_c0 * (dColor.wz - vec2(0.5));
    {
        vec2 origCoord = cCoords;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        _output = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    return _output;
}
vec4 ConvexPoly_Stage1_c1_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float alpha = 1.0;
    float edge;
    edge = dot(uedges_Stage1_c1_c0_c0_c0_c1_c0[0], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = clamp(edge, 0.0, 1.0);
    alpha *= edge;
    alpha = 1.0 - alpha;
    _output = _input * alpha;
    return _output;
}
vec4 blend_src_over(vec4 src, vec4 dst) {
    return src + (1.0 - src.w) * dst;
}
vec4 blend_darken(vec4 src, vec4 dst) {
    vec4 result = blend_src_over(src, dst);
    result.xyz = min(result.xyz, (1.0 - dst.w) * src.xyz + dst.xyz);
    return result;
}
vec4 ComposeTwo_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_darken(DisplacementMap_Stage1_c1_c0_c0_c0_c0_c0(inputColor), ConvexPoly_Stage1_c1_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ConstColorProcessor_Stage1_c1_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    {
        _output = ucolor_Stage1_c1_c0_c1_c0_c0_c0;
    }
    return _output;
}
vec4 GaussianConvolution_Stage1_c1_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_2_Stage0 - 2.0 * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
    vec2 coordSampled = vec2(0.0, 0.0);
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c1_c0_c1_c0_c1_c0.x, uBounds_Stage1_c1_c0_c1_c0_c1_c0.y - uBounds_Stage1_c1_c0_c1_c0_c1_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c1_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c1_c0[0].x;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c1_c0_c1_c0_c1_c0.x, uBounds_Stage1_c1_c0_c1_c0_c1_c0.y - uBounds_Stage1_c1_c0_c1_c0_c1_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c1_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c1_c0[0].y;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c1_c0_c1_c0_c1_c0.x, uBounds_Stage1_c1_c0_c1_c0_c1_c0.y - uBounds_Stage1_c1_c0_c1_c0_c1_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c1_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c1_c0[0].z;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c1_c0_c1_c0_c1_c0.x, uBounds_Stage1_c1_c0_c1_c0_c1_c0.y - uBounds_Stage1_c1_c0_c1_c0_c1_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c1_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c1_c0[0].w;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
    coordSampled = coord;
    coordSampled.x = mod(coord.x - uBounds_Stage1_c1_c0_c1_c0_c1_c0.x, uBounds_Stage1_c1_c0_c1_c0_c1_c0.y - uBounds_Stage1_c1_c0_c1_c0_c1_c0.x) + uBounds_Stage1_c1_c0_c1_c0_c1_c0.x;
    _output += texture(uTextureSampler_2_Stage1, coordSampled) * uKernel_Stage1_c1_c0_c1_c0_c1_c0[1].x;
    coord += uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
    _output *= _input;
    return _output;
}
vec4 blend_src_out(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src;
}
vec4 ComposeTwo_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_out(ConstColorProcessor_Stage1_c1_c0_c1_c0_c0_c0(inputColor), GaussianConvolution_Stage1_c1_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_difference(vec4 src, vec4 dst) {
    return vec4((src.xyz + dst.xyz) - 2.0 * min(src.xyz * dst.w, dst.xyz * src.w), src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_difference(ComposeTwo_Stage1_c1_c0_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_lighten(vec4 src, vec4 dst) {
    vec4 result = blend_src_over(src, dst);
    result.xyz = max(result.xyz, (1.0 - dst.w) * src.xyz + dst.xyz);
    return result;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_lighten(Big_Ole_Key_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
in vec4 inColor;
noperspective out vec4 vcolor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

