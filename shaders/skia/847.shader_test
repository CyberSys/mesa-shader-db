[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uinnerRect_Stage1_c0_c0;
uniform vec4 uinvRadiiLTRB_Stage1_c0_c0;
uniform vec4 uinnerRect_Stage1_c1_c0;
uniform vec2 uradiusPlusHalf_Stage1_c1_c0;
uniform vec4 ucircle_Stage2;
uniform vec4 uscale0_1_Stage3_c2_c0_c1_c0;
uniform vec4 uscale2_3_Stage3_c2_c0_c1_c0;
uniform vec4 uscale4_5_Stage3_c2_c0_c1_c0;
uniform vec4 uscale6_7_Stage3_c2_c0_c1_c0;
uniform vec4 uscale8_9_Stage3_c2_c0_c1_c0;
uniform vec4 ubias0_1_Stage3_c2_c0_c1_c0;
uniform vec4 ubias2_3_Stage3_c2_c0_c1_c0;
uniform vec4 ubias4_5_Stage3_c2_c0_c1_c0;
uniform vec4 ubias6_7_Stage3_c2_c0_c1_c0;
uniform vec4 ubias8_9_Stage3_c2_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage3_c2_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage3_c2_c0_c1_c0;
noperspective in vec4 vcolor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
vec4 EllipticalRRect_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c0_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c0_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    vec2 Z = max(max(dxy0 * uinvRadiiLTRB_Stage1_c0_c0.xy, dxy1 * uinvRadiiLTRB_Stage1_c0_c0.zw), 0.0);
    float implicit = dot(Z, dxy) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    grad_dot = max(grad_dot, 9.9999997473787516e-05);
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha = clamp(0.5 - approx_dist, 0.0, 1.0);
    _output = _input * alpha;
    return _output;
}
vec4 CircularRRect_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c1_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c1_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    float alpha = clamp(uradiusPlusHalf_Stage1_c1_c0.x - length(dxy), 0.0, 1.0);
    alpha = 1.0 - alpha;
    _output = _input * alpha;
    return _output;
}
vec4 LinearGradientLayout_Stage3_c2_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float t = vTransformedCoords_0_Stage0.x + 9.9999997473787516e-06;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage3_c2_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    if (t < uthresholds1_7_Stage3_c2_c0_c1_c0.w) {
        if (t < uthresholds1_7_Stage3_c2_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage3_c2_c0_c1_c0.x) {
                scale = uscale0_1_Stage3_c2_c0_c1_c0;
                bias = ubias0_1_Stage3_c2_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage3_c2_c0_c1_c0;
                bias = ubias2_3_Stage3_c2_c0_c1_c0;
            }
        } else {
            if (t < uthresholds1_7_Stage3_c2_c0_c1_c0.z) {
                scale = uscale4_5_Stage3_c2_c0_c1_c0;
                bias = ubias4_5_Stage3_c2_c0_c1_c0;
            } else {
                scale = uscale6_7_Stage3_c2_c0_c1_c0;
                bias = ubias6_7_Stage3_c2_c0_c1_c0;
            }
        }
    } else {
        {
            {
                scale = uscale8_9_Stage3_c2_c0_c1_c0;
                bias = ubias8_9_Stage3_c2_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 TiledGradientEffect_Stage3_c2_c0(vec4 _input) {
    vec4 _output;
    vec4 t = LinearGradientLayout_Stage3_c2_c0_c0_c0(vec4(1.0));
    {
        {
            float t_1 = t.x - 1.0;
            float tiled_t = (t_1 - 2.0 * floor(t_1 * 0.5)) - 1.0;
            t.x = abs(tiled_t);
        }
        _output = UnrolledBinaryGradientColorizer_Stage3_c2_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 blend_dst_over(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + dst;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_dst_over(EllipticalRRect_Stage1_c0_c0(inputColor), CircularRRect_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    vec4 output_Stage2;
    {
        float d;
        {
            d = (1.0 - length((ucircle_Stage2.xy - gl_FragCoord.xy) * ucircle_Stage2.w)) * ucircle_Stage2.z;
        }
        {
            output_Stage2 = output_Stage1 * clamp(d, 0.0, 1.0);
        }
    }
    vec4 output_Stage3;
    {
        output_Stage3 = blend_dst_in(output_Stage2, TiledGradientEffect_Stage3_c2_c0(vec4(1.0)));
    }
    {
        sk_FragColor = output_Stage3;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform float uSrcTF_Stage0[7];
uniform mat3 uColorXform_Stage0;
uniform float uDstTF_Stage0[7];
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 position;
in vec4 inColor;
in vec2 inLocalCoord;
noperspective out vec4 vcolor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
float src_tf_Stage0(float x) {
    float G = uSrcTF_Stage0[0];
    float A = uSrcTF_Stage0[1];
    float B = uSrcTF_Stage0[2];
    float C = uSrcTF_Stage0[3];
    float D = uSrcTF_Stage0[4];
    float E = uSrcTF_Stage0[5];
    float F = uSrcTF_Stage0[6];
    float s = sign(x);
    x = abs(x);
    x = x < D ? C * x + F : pow(A * x + B, G) + E;
    return s * x;
}
float dst_tf_Stage0(float x) {
    float G = uDstTF_Stage0[0];
    float A = uDstTF_Stage0[1];
    float B = uDstTF_Stage0[2];
    float C = uDstTF_Stage0[3];
    float D = uDstTF_Stage0[4];
    float E = uDstTF_Stage0[5];
    float F = uDstTF_Stage0[6];
    float s = sign(x);
    x = abs(x);
    x = x < D ? C * x + F : pow(A * x + B, G) + E;
    return s * x;
}
vec4 gamut_xform_Stage0(vec4 color) {
    color.xyz = uColorXform_Stage0 * color.xyz;
    return color;
}
vec4 color_xform_Stage0(vec4 color) {
    float nonZeroAlpha = max(color.w, 9.9999997473787516e-05);
    color = vec4(color.xyz / nonZeroAlpha, nonZeroAlpha);
    color.x = src_tf_Stage0(color.x);
    color.y = src_tf_Stage0(color.y);
    color.z = src_tf_Stage0(color.z);
    color = gamut_xform_Stage0(color);
    color.x = dst_tf_Stage0(color.x);
    color.y = dst_tf_Stage0(color.y);
    color.z = dst_tf_Stage0(color.z);
    color.xyz *= color.w;
    return color;
}
void main() {
    vec4 color = inColor;
    color = color.zyxw;
    color = color_xform_Stage0(color);
    color = vec4(color.xyz * color.w, color.w);
    vcolor_Stage0 = color;
    vec2 pos2 = (uViewM_Stage0 * vec3(position, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

