[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
uniform vec2 uImageIncrement_Stage1;
uniform float uSurfaceScale_Stage1;
uniform vec3 uLightColor_Stage1;
uniform float uKD_Stage1;
uniform vec4 uTexDom_Stage1;
uniform vec3 uDecalParams_Stage1;
uniform vec3 uLightDirection_Stage1;
uniform vec2 uImageIncrement_Stage2_c0_c0;
uniform float uSurfaceScale_Stage2_c0_c0;
uniform vec3 uLightColor_Stage2_c0_c0;
uniform float uKD_Stage2_c0_c0;
uniform vec4 uTexDom_Stage2_c0_c0;
uniform vec3 uDecalParams_Stage2_c0_c0;
uniform vec3 uLightLocation_Stage2_c0_c0;
uniform vec2 uImageIncrement_Stage2_c1_c0;
uniform vec2 uBounds_Stage2_c1_c0;
uniform vec4 uKernel_Stage2_c1_c0[7];
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
uniform sampler2D uTextureSampler_1_Stage2;
noperspective in vec4 vQuadEdge_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
vec4 light_Stage1(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    float colorScale = uKD_Stage1 * dot(normal, surfaceToLight);
    return vec4(lightColor * clamp(colorScale, 0.0, 1.0), 1.0);
}
float sobel_Stage1(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage1(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage1(float m[9], float surfaceScale) {
    return pointToNormal_Stage1(sobel_Stage1(0.0, 0.0, m[3], m[4], m[6], m[7], 0.66666698455810547), sobel_Stage1(m[3], m[6], m[4], m[7], 0.0, 0.0, 0.66666698455810547), surfaceScale);
}
vec4 light_Stage2_c0_c0(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    float colorScale = uKD_Stage2_c0_c0 * dot(normal, surfaceToLight);
    return vec4(lightColor * clamp(colorScale, 0.0, 1.0), 1.0);
}
float sobel_Stage2_c0_c0(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage2_c0_c0(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage2_c0_c0(float m[9], float surfaceScale) {
    return pointToNormal_Stage2_c0_c0(sobel_Stage2_c0_c0(m[0], m[1], m[3], m[4], 0.0, 0.0, 0.66666698455810547), sobel_Stage2_c0_c0(m[0], m[3], m[1], m[4], 0.0, 0.0, 0.66666698455810547), surfaceScale);
}
vec4 DiffuseLighting_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_1_Stage0;
    float m[9];
    vec4 temp0;
    {
        vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage2_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c0_c0.y);
        if (err > uDecalParams_Stage2_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[0] = temp0.w;
    vec4 temp1;
    {
        vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage2_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c0_c0.y);
        if (err > uDecalParams_Stage2_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[1] = temp1.w;
    vec4 temp2;
    {
        vec2 origCoord = coord + uImageIncrement_Stage2_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c0_c0.y);
        if (err > uDecalParams_Stage2_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[2] = temp2.w;
    vec4 temp3;
    {
        vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage2_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c0_c0.y);
        if (err > uDecalParams_Stage2_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[3] = temp3.w;
    vec4 temp4;
    {
        vec2 origCoord = coord;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c0_c0.y);
        if (err > uDecalParams_Stage2_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[4] = temp4.w;
    vec4 temp5;
    {
        vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage2_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c0_c0.y);
        if (err > uDecalParams_Stage2_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[5] = temp5.w;
    vec4 temp6;
    {
        vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage2_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c0_c0.y);
        if (err > uDecalParams_Stage2_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[6] = temp6.w;
    vec4 temp7;
    {
        vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage2_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c0_c0.y);
        if (err > uDecalParams_Stage2_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[7] = temp7.w;
    vec4 temp8;
    {
        vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage2_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c0_c0.y);
        if (err > uDecalParams_Stage2_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[8] = temp8.w;
    vec3 surfaceToLight = normalize(uLightLocation_Stage2_c0_c0 - vec3(gl_FragCoord.xy, uSurfaceScale_Stage2_c0_c0 * m[4]));
    _output = light_Stage2_c0_c0(normal_Stage2_c0_c0(m, uSurfaceScale_Stage2_c0_c0), surfaceToLight, uLightColor_Stage2_c0_c0);
    _output *= _input;
    return _output;
}
vec4 GaussianConvolution_Stage2_c1_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_2_Stage0 - 12.0 * uImageIncrement_Stage2_c1_c0;
    vec2 coordSampled = vec2(0.0, 0.0);
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[0].x;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[0].y;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[0].z;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[0].w;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[1].x;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[1].y;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[1].z;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[1].w;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[2].x;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[2].y;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[2].z;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[2].w;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[3].x;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[3].y;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[3].z;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[3].w;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[4].x;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[4].y;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[4].z;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[4].w;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[5].x;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[5].y;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[5].z;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[5].w;
    coord += uImageIncrement_Stage2_c1_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c1_c0.x, uBounds_Stage2_c1_c0.y - uBounds_Stage2_c1_c0.x) + uBounds_Stage2_c1_c0.x;
    _output += texture(uTextureSampler_1_Stage2, coordSampled) * uKernel_Stage2_c1_c0[6].x;
    coord += uImageIncrement_Stage2_c1_c0;
    _output *= _input;
    return _output;
}
vec4 blend_exclusion(vec4 src, vec4 dst) {
    return vec4((dst.xyz + src.xyz) - (2.0 * dst.xyz) * src.xyz, src.w + (1.0 - src.w) * dst.w);
}
void main() {
    vec4 outputCoverage_Stage0;
    {
        float edgeAlpha;
        vec2 duvdx = dFdx(vQuadEdge_Stage0.xy);
        vec2 duvdy = -dFdy(vQuadEdge_Stage0.xy);
        if (vQuadEdge_Stage0.z > 0.0 && vQuadEdge_Stage0.w > 0.0) {
            edgeAlpha = min(min(vQuadEdge_Stage0.z, vQuadEdge_Stage0.w) + 0.5, 1.0);
        } else {
            vec2 gF = vec2((2.0 * vQuadEdge_Stage0.x) * duvdx.x - duvdx.y, (2.0 * vQuadEdge_Stage0.x) * duvdy.x - duvdy.y);
            edgeAlpha = vQuadEdge_Stage0.x * vQuadEdge_Stage0.x - vQuadEdge_Stage0.y;
            edgeAlpha = clamp(0.5 - edgeAlpha / length(gF), 0.0, 1.0);
        }
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec2 coord = vTransformedCoords_0_Stage0;
        float m[9];
        vec4 temp0;
        {
            vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage1;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1.xy, uTexDom_Stage1.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1.y);
            if (err > uDecalParams_Stage1.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1.z < 1.0) {
                err = 0.0;
            }
            temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[0] = temp0.w;
        vec4 temp1;
        {
            vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage1;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1.xy, uTexDom_Stage1.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1.y);
            if (err > uDecalParams_Stage1.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1.z < 1.0) {
                err = 0.0;
            }
            temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[1] = temp1.w;
        vec4 temp2;
        {
            vec2 origCoord = coord + uImageIncrement_Stage1;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1.xy, uTexDom_Stage1.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1.y);
            if (err > uDecalParams_Stage1.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1.z < 1.0) {
                err = 0.0;
            }
            temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[2] = temp2.w;
        vec4 temp3;
        {
            vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage1;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1.xy, uTexDom_Stage1.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1.y);
            if (err > uDecalParams_Stage1.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1.z < 1.0) {
                err = 0.0;
            }
            temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[3] = temp3.w;
        vec4 temp4;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1.xy, uTexDom_Stage1.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1.y);
            if (err > uDecalParams_Stage1.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1.z < 1.0) {
                err = 0.0;
            }
            temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[4] = temp4.w;
        vec4 temp5;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1.xy, uTexDom_Stage1.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1.y);
            if (err > uDecalParams_Stage1.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1.z < 1.0) {
                err = 0.0;
            }
            temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[5] = temp5.w;
        vec4 temp6;
        {
            vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage1;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1.xy, uTexDom_Stage1.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1.y);
            if (err > uDecalParams_Stage1.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1.z < 1.0) {
                err = 0.0;
            }
            temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[6] = temp6.w;
        vec4 temp7;
        {
            vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage1;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1.xy, uTexDom_Stage1.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1.y);
            if (err > uDecalParams_Stage1.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1.z < 1.0) {
                err = 0.0;
            }
            temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[7] = temp7.w;
        vec4 temp8;
        {
            vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage1;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1.xy, uTexDom_Stage1.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1.y);
            if (err > uDecalParams_Stage1.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1.z < 1.0) {
                err = 0.0;
            }
            temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[8] = temp8.w;
        vec3 surfaceToLight = uLightDirection_Stage1;
        output_Stage1 = light_Stage1(normal_Stage1(m, uSurfaceScale_Stage1), surfaceToLight, uLightColor_Stage1);
        output_Stage1 *= outputCoverage_Stage0;
    }
    vec4 output_Stage2;
    {
        vec4 inputColor = vec4(output_Stage1.xyz, 1.0);
        output_Stage2 = blend_exclusion(DiffuseLighting_Stage2_c0_c0(inputColor), GaussianConvolution_Stage2_c1_c0(inputColor));
        output_Stage2 *= output_Stage1.w;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec4 inQuadEdge;
noperspective out vec4 vQuadEdge_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
void main() {
    vQuadEdge_Stage0 = inQuadEdge;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

