[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform vec4 uscale01_Stage2_c1_c0_c1_c0;
uniform vec4 ubias01_Stage2_c1_c0_c1_c0;
uniform vec4 uscale23_Stage2_c1_c0_c1_c0;
uniform vec4 ubias23_Stage2_c1_c0_c1_c0;
uniform float uthreshold_Stage2_c1_c0_c1_c0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
vec4 ClampFragmentProcessor_Stage1_c0_c0(vec4 _input, vec2 _coords) {
    vec4 _output;
    {
        float alpha = clamp(_input.w, 0.0, 1.0);
        _output = vec4(clamp(_input.xyz, 0.0, alpha), alpha);
    }
    return _output;
}
vec4 RadialGradientLayout_Stage2_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float t = length(vTransformedCoords_1_Stage0);
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 DualIntervalGradientColorizer_Stage2_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    if (t < uthreshold_Stage2_c1_c0_c1_c0) {
        scale = uscale01_Stage2_c1_c0_c1_c0;
        bias = ubias01_Stage2_c1_c0_c1_c0;
    } else {
        scale = uscale23_Stage2_c1_c0_c1_c0;
        bias = ubias23_Stage2_c1_c0_c1_c0;
    }
    _output = t * scale + bias;
    return _output;
}
vec4 TiledGradientEffect_Stage2_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 t = RadialGradientLayout_Stage2_c1_c0_c0_c0(vec4(1.0));
    {
        {
            float t_1 = t.x - 1.0;
            float tiled_t = (t_1 - 2.0 * floor(t_1 * 0.5)) - 1.0;
            t.x = abs(tiled_t);
        }
        _output = DualIntervalGradientColorizer_Stage2_c1_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec2 coord = vTransformedCoords_0_Stage0 - vec2(0.5);
        vec2 f = fract(coord);
        coord += 0.5 - f;
        vec4 wx = mat4(0.055555555555555552, 0.88888888888888884, 0.055555555555555552, 0.0, -0.5, 0.0, 0.5, 0.0, 0.83333333333333337, -2.0, 1.5, -0.33333333333333331, -0.3888888888888889, 1.1666666666666667, -1.1666666666666667, 0.3888888888888889) * vec4(1.0, f.x, f.x * f.x, (f.x * f.x) * f.x);
        vec4 wy = mat4(0.055555555555555552, 0.88888888888888884, 0.055555555555555552, 0.0, -0.5, 0.0, 0.5, 0.0, 0.83333333333333337, -2.0, 1.5, -0.33333333333333331, -0.3888888888888889, 1.1666666666666667, -1.1666666666666667, 0.3888888888888889) * vec4(1.0, f.y, f.y * f.y, (f.y * f.y) * f.y);
        vec4 rowColors[4];
        rowColors[0] = ClampFragmentProcessor_Stage1_c0_c0(vec4(1.0), coord + vec2(-1.0, -1.0));
        rowColors[1] = ClampFragmentProcessor_Stage1_c0_c0(vec4(1.0), coord + vec2(0.0, -1.0));
        rowColors[2] = ClampFragmentProcessor_Stage1_c0_c0(vec4(1.0), coord + vec2(1.0, -1.0));
        rowColors[3] = ClampFragmentProcessor_Stage1_c0_c0(vec4(1.0), coord + vec2(2.0, -1.0));
        vec4 s0 = ((wx.x * rowColors[0] + wx.y * rowColors[1]) + wx.z * rowColors[2]) + wx.w * rowColors[3];
        rowColors[0] = ClampFragmentProcessor_Stage1_c0_c0(vec4(1.0), coord + vec2(-1.0, 0.0));
        rowColors[1] = ClampFragmentProcessor_Stage1_c0_c0(vec4(1.0), coord);
        rowColors[2] = ClampFragmentProcessor_Stage1_c0_c0(vec4(1.0), coord + vec2(1.0, 0.0));
        rowColors[3] = ClampFragmentProcessor_Stage1_c0_c0(vec4(1.0), coord + vec2(2.0, 0.0));
        vec4 s1 = ((wx.x * rowColors[0] + wx.y * rowColors[1]) + wx.z * rowColors[2]) + wx.w * rowColors[3];
        rowColors[0] = ClampFragmentProcessor_Stage1_c0_c0(vec4(1.0), coord + vec2(-1.0, 1.0));
        rowColors[1] = ClampFragmentProcessor_Stage1_c0_c0(vec4(1.0), coord + vec2(0.0, 1.0));
        rowColors[2] = ClampFragmentProcessor_Stage1_c0_c0(vec4(1.0), coord + vec2(1.0, 1.0));
        rowColors[3] = ClampFragmentProcessor_Stage1_c0_c0(vec4(1.0), coord + vec2(2.0, 1.0));
        vec4 s2 = ((wx.x * rowColors[0] + wx.y * rowColors[1]) + wx.z * rowColors[2]) + wx.w * rowColors[3];
        rowColors[0] = ClampFragmentProcessor_Stage1_c0_c0(vec4(1.0), coord + vec2(-1.0, 2.0));
        rowColors[1] = ClampFragmentProcessor_Stage1_c0_c0(vec4(1.0), coord + vec2(0.0, 2.0));
        rowColors[2] = ClampFragmentProcessor_Stage1_c0_c0(vec4(1.0), coord + vec2(1.0, 2.0));
        rowColors[3] = ClampFragmentProcessor_Stage1_c0_c0(vec4(1.0), coord + vec2(2.0, 2.0));
        vec4 s3 = ((wx.x * rowColors[0] + wx.y * rowColors[1]) + wx.z * rowColors[2]) + wx.w * rowColors[3];
        vec4 bicubicColor = ((wy.x * s0 + wy.y * s1) + wy.z * s2) + wy.w * s3;
        bicubicColor = clamp(bicubicColor, 0.0, 1.0);
        output_Stage1 = bicubicColor;
    }
    vec4 output_Stage2;
    {
        output_Stage2 = blend_dst_in(output_Stage1, TiledGradientEffect_Stage2_c1_c0(vec4(1.0)));
    }
    {
        sk_FragColor = outputColor_Stage0 * output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 position;
in vec2 inLocalCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vec2 pos2 = (uViewM_Stage0 * vec3(position, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

