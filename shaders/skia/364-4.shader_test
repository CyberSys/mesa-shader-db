[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec2 uImageIncrement_Stage2_c0_c0;
uniform vec2 uBounds_Stage2_c0_c0;
uniform vec4 uKernel_Stage2_c0_c0[2];
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
vec4 GaussianConvolution_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_1_Stage0 - 2.0 * uImageIncrement_Stage2_c0_c0;
    vec2 coordSampled = vec2(0.0, 0.0);
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c0_c0.x, uBounds_Stage2_c0_c0.y - uBounds_Stage2_c0_c0.x) + uBounds_Stage2_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[0].x;
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c0_c0.x, uBounds_Stage2_c0_c0.y - uBounds_Stage2_c0_c0.x) + uBounds_Stage2_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[0].y;
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c0_c0.x, uBounds_Stage2_c0_c0.y - uBounds_Stage2_c0_c0.x) + uBounds_Stage2_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[0].z;
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c0_c0.x, uBounds_Stage2_c0_c0.y - uBounds_Stage2_c0_c0.x) + uBounds_Stage2_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[0].w;
    coord += uImageIncrement_Stage2_c0_c0;
    coordSampled = coord;
    coordSampled.y = mod(coord.y - uBounds_Stage2_c0_c0.x, uBounds_Stage2_c0_c0.y - uBounds_Stage2_c0_c0.x) + uBounds_Stage2_c0_c0.x;
    _output += texture(uTextureSampler_0_Stage2, coordSampled) * uKernel_Stage2_c0_c0[1].x;
    coord += uImageIncrement_Stage2_c0_c0;
    _output *= _input;
    return _output;
}
vec4 ClampFragmentProcessor_Stage2_c1_c0(vec4 _input) {
    vec4 _output;
    {
        float alpha = clamp(_input.w, 0.0, 1.0);
        _output = vec4(clamp(_input.xyz, 0.0, alpha), alpha);
    }
    return _output;
}
vec4 blend_exclusion(vec4 src, vec4 dst) {
    return vec4((dst.xyz + src.xyz) - (2.0 * dst.xyz) * src.xyz, src.w + (1.0 - src.w) * dst.w);
}
void main() {
    vec4 output_Stage1;
    {
        output_Stage1 = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
    }
    vec4 output_Stage2;
    {
        vec4 inputColor = vec4(output_Stage1.xyz, 1.0);
        output_Stage2 = blend_exclusion(GaussianConvolution_Stage2_c0_c0(inputColor), ClampFragmentProcessor_Stage2_c1_c0(inputColor));
        output_Stage2 *= output_Stage1.w;
    }
    {
        sk_FragColor = output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 position;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(localCoord, 1.0)).xy;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

