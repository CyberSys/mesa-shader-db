[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform vec2 uImageIncrement_Stage1;
uniform vec2 uBounds_Stage1;
uniform vec4 uKernel_Stage1[7];
uniform vec4 uinnerRect_Stage2;
uniform vec2 uradiusPlusHalf_Stage2;
uniform sampler2D uTextureSampler_0_Stage1;
noperspective in vec2 vTransformedCoords_0_Stage0;
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        output_Stage1 = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_0_Stage0 - 12.0 * uImageIncrement_Stage1;
        vec2 coordSampled = vec2(0.0, 0.0);
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[0].x;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[0].y;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[0].z;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[0].w;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[1].x;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[1].y;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[1].z;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[1].w;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[2].x;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[2].y;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[2].z;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[2].w;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[3].x;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[3].y;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[3].z;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[3].w;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[4].x;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[4].y;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[4].z;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[4].w;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[5].x;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[5].y;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[5].z;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[5].w;
        coord += uImageIncrement_Stage1;
        coordSampled = coord;
        coordSampled.y = mod(coord.y - uBounds_Stage1.x, uBounds_Stage1.y - uBounds_Stage1.x) + uBounds_Stage1.x;
        output_Stage1 += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1[6].x;
        coord += uImageIncrement_Stage1;
        output_Stage1 *= outputColor_Stage0;
    }
    vec4 output_Stage2;
    {
        vec2 dxy0 = uinnerRect_Stage2.xy - gl_FragCoord.xy;
        vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage2.zw;
        vec2 dxy = max(max(dxy0, dxy1), 0.0);
        float alpha = clamp(uradiusPlusHalf_Stage2.x - length(dxy), 0.0, 1.0);
        output_Stage2 = output_Stage1 * alpha;
    }
    {
        sk_FragColor = output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

