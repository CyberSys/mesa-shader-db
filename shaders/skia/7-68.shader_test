[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 urectUniform_Stage1_c0_c0;
uniform vec4 urectUniform_Stage1_c1_c0;
flat in vec4 vcolor_Stage0;
vec4 AARectEffect_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    float alpha;
    {
        float xSub, ySub;
        xSub = min(gl_FragCoord.x - urectUniform_Stage1_c0_c0.x, 0.0);
        xSub += min(urectUniform_Stage1_c0_c0.z - gl_FragCoord.x, 0.0);
        ySub = min(gl_FragCoord.y - urectUniform_Stage1_c0_c0.y, 0.0);
        ySub += min(urectUniform_Stage1_c0_c0.w - gl_FragCoord.y, 0.0);
        alpha = (1.0 + max(xSub, -1.0)) * (1.0 + max(ySub, -1.0));
    }
    {
        alpha = 1.0 - alpha;
    }
    _output = _input * alpha;
    return _output;
}
vec4 AARectEffect_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    float alpha;
    {
        float xSub, ySub;
        xSub = min(gl_FragCoord.x - urectUniform_Stage1_c1_c0.x, 0.0);
        xSub += min(urectUniform_Stage1_c1_c0.z - gl_FragCoord.x, 0.0);
        ySub = min(gl_FragCoord.y - urectUniform_Stage1_c1_c0.y, 0.0);
        ySub += min(urectUniform_Stage1_c1_c0.w - gl_FragCoord.y, 0.0);
        alpha = (1.0 + max(xSub, -1.0)) * (1.0 + max(ySub, -1.0));
    }
    _output = _input * alpha;
    return _output;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
    }
    vec4 output_Stage1;
    {
        output_Stage1 = AARectEffect_Stage1_c1_c0(AARectEffect_Stage1_c0_c0(vec4(1.0)));
    }
    {
        sk_FragColor = outputColor_Stage0 * output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
in vec2 position;
in vec4 color;
flat out vec4 vcolor_Stage0;
void main() {
    vcolor_Stage0 = color;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

