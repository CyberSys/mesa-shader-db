[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform float uinnerThreshold_Stage1;
uniform float uouterThreshold_Stage1;
uniform sampler2D uTextureSampler_0_Stage1;
noperspective in vec4 vcolor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
void main() {
    vec4 output_Stage1;
    {
        vec4 color = vec4(1.0);
        vec4 mask_color = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
        if (mask_color.w < 0.5) {
            if (1.0 > uouterThreshold_Stage1) {
                float scale = uouterThreshold_Stage1;
                color.xyz *= scale;
                color.w = uouterThreshold_Stage1;
            }
        } else if (1.0 < uinnerThreshold_Stage1) {
            float scale = uinnerThreshold_Stage1 / max(0.0010000000474974513, 1.0);
            color.xyz *= scale;
            color.w = uinnerThreshold_Stage1;
        }
        output_Stage1 = color;
    }
    {
        sk_FragColor = 1.0 - output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inLocalCoord;
noperspective out vec4 vcolor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

