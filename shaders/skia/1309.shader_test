[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uColor_Stage0;
uniform vec4 ucolor_Stage1_c0_c0_c0_c0;
uniform vec4 uellipse_Stage1_c0_c0_c1_c0;
uniform vec4 uinnerRect_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec2 uradiusPlusHalf_Stage1_c1_c0_c0_c0_c1_c0;
uniform mat4 um_Stage1_c1_c0_c1_c0;
uniform vec4 uv_Stage1_c1_c0_c1_c0;
vec4 ConstColorProcessor_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    {
        _output = ucolor_Stage1_c0_c0_c0_c0;
    }
    return _output;
}
vec4 EllipseEffect_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 d = gl_FragCoord.xy - uellipse_Stage1_c0_c0_c1_c0.xy;
    vec2 Z = d * uellipse_Stage1_c0_c0_c1_c0.zw;
    float implicit = dot(Z, d) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    {
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
    }
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha;
    {
        alpha = approx_dist > 0.0 ? 1.0 : 0.0;
    }
    _output = _input * alpha;
    return _output;
}
vec4 blend_src_over(vec4 src, vec4 dst) {
    return src + (1.0 - src.w) * dst;
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_over(ConstColorProcessor_Stage1_c0_c0_c0_c0(inputColor), EllipseEffect_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ConfigConversionEffect_Stage1_c1_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    _output = floor(_input * 255.0 + 0.5) / 255.0;
    {
        _output.xyz = floor((_output.xyz * _output.w) * 255.0 + 0.5) / 255.0;
    }
    return _output;
}
vec4 CircularRRect_Stage1_c1_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c1_c0_c0_c0_c1_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c1_c0_c0_c0_c1_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    float alpha = clamp(uradiusPlusHalf_Stage1_c1_c0_c0_c0_c1_c0.x - length(dxy), 0.0, 1.0);
    _output = _input * alpha;
    return _output;
}
vec4 ComposeTwo_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_over(ConfigConversionEffect_Stage1_c1_c0_c0_c0_c0_c0(inputColor), CircularRRect_Stage1_c1_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ColorMatrixFragmentProcessor_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = _input;
    {
        float nonZeroAlpha = max(inputColor.w, 9.9999997473787516e-05);
        inputColor = vec4(inputColor.xyz / nonZeroAlpha, inputColor.w);
    }
    _output = um_Stage1_c1_c0_c1_c0 * inputColor + uv_Stage1_c1_c0_c1_c0;
    {
        _output = clamp(_output, 0.0, 1.0);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 blend_plus(vec4 src, vec4 dst) {
    return min(src + dst, 1.0);
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_plus(ComposeTwo_Stage1_c1_c0_c0_c0(inputColor), ColorMatrixFragmentProcessor_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
float _blend_color_luminance(vec3 color) {
    return dot(vec3(0.30000001192092896, 0.5899999737739563, 0.10999999940395355), color);
}
vec3 _blend_set_color_luminance(vec3 hueSatColor, float alpha, vec3 lumColor) {
    float lum = _blend_color_luminance(lumColor);
    vec3 result = (lum - _blend_color_luminance(hueSatColor)) + hueSatColor;
    float minComp = min(min(result.x, result.y), result.z);
    float maxComp = max(max(result.x, result.y), result.z);
    if (minComp < 0.0 && lum != minComp) {
        result = lum + ((result - lum) * lum) / (lum - minComp);
    }
    if (maxComp > alpha && maxComp != lum) {
        return lum + ((result - lum) * (alpha - lum)) / (maxComp - lum);
    }
    return result;
}
vec4 blend_luminosity(vec4 src, vec4 dst) {
    float alpha = dst.w * src.w;
    vec3 sda = src.xyz * dst.w;
    vec3 dsa = dst.xyz * src.w;
    return vec4((((_blend_set_color_luminance(dsa, alpha, sda) + dst.xyz) - dsa) + src.xyz) - sda, (src.w + dst.w) - alpha);
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_luminosity(ComposeTwo_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
in vec2 inPosition;
void main() {
    vec2 pos2 = inPosition;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

