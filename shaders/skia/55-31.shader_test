[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uCoordTransformMatrix_2_Stage0;
uniform vec4 uborder_Stage1;
uniform vec4 usubset_Stage1;
uniform vec4 unorm_Stage1;
uniform vec4 uk_Stage2;
uniform vec4 uborder_Stage2_c0_c0;
uniform vec4 usubset_Stage2_c0_c0;
uniform vec4 unorm_Stage2_c0_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
vec4 TextureEffect_Stage2_c0_c0(vec4 _input, vec2 _coords) {
    _coords = _coords * uCoordTransformMatrix_2_Stage0.xz + uCoordTransformMatrix_2_Stage0.yw;
    vec4 _output;
    vec2 inCoord = _coords;
    inCoord *= unorm_Stage2_c0_c0.xy;
    vec2 subsetCoord;
    subsetCoord.x = inCoord.x;
    subsetCoord.y = inCoord.y;
    vec2 clampedCoord;
    clampedCoord.x = subsetCoord.x;
    clampedCoord.y = subsetCoord.y;
    vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord * unorm_Stage2_c0_c0.zw);
    if (inCoord.x < usubset_Stage2_c0_c0.x || inCoord.x > usubset_Stage2_c0_c0.z) {
        textureColor = uborder_Stage2_c0_c0;
    }
    if (inCoord.y < usubset_Stage2_c0_c0.y || inCoord.y > usubset_Stage2_c0_c0.w) {
        textureColor = uborder_Stage2_c0_c0;
    }
    _output = _input * textureColor;
    return _output;
}
void main() {
    vec4 output_Stage1;
    {
        vec2 inCoord = vTransformedCoords_0_Stage0;
        inCoord *= unorm_Stage1.xy;
        vec2 subsetCoord;
        subsetCoord.x = inCoord.x;
        subsetCoord.y = inCoord.y;
        vec2 clampedCoord;
        clampedCoord.x = subsetCoord.x;
        clampedCoord.y = subsetCoord.y;
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord * unorm_Stage1.zw);
        if (inCoord.x < usubset_Stage1.x || inCoord.x > usubset_Stage1.z) {
            textureColor = uborder_Stage1;
        }
        if (inCoord.y < usubset_Stage1.y || inCoord.y > usubset_Stage1.w) {
            textureColor = uborder_Stage1;
        }
        output_Stage1 = textureColor;
    }
    vec4 output_Stage2;
    {
        output_Stage2 = output_Stage1;
        vec4 dst = TextureEffect_Stage2_c0_c0(vec4(1.0), vTransformedCoords_1_Stage0);
        output_Stage2 = clamp((((uk_Stage2.x * output_Stage2) * dst + uk_Stage2.y * output_Stage2) + uk_Stage2.z * dst) + uk_Stage2.w, 0.0, 1.0);
        {
            output_Stage2.xyz = min(output_Stage2.xyz, output_Stage2.w);
        }
    }
    {
        sk_FragColor = output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 position;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(localCoord, 1.0)).xy;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

