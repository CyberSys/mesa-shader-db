[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uCoordTransformMatrix_2_Stage0;
uniform vec2 ubaseFrequency_Stage1;
uniform float uz_Stage1;
uniform vec2 ufocalParams_Stage2_c0_c0_c0_c0;
uniform vec4 uscale01_Stage2_c0_c0_c1_c0;
uniform vec4 ubias01_Stage2_c0_c0_c1_c0;
uniform vec4 uscale23_Stage2_c0_c0_c1_c0;
uniform vec4 ubias23_Stage2_c0_c0_c1_c0;
uniform float uthreshold_Stage2_c0_c0_c1_c0;
uniform vec2 uImageIncrement_Stage3_c1_c0;
uniform float uSurfaceScale_Stage3_c1_c0;
uniform vec3 uLightColor_Stage3_c1_c0;
uniform float uKS_Stage3_c1_c0;
uniform float uShininess_Stage3_c1_c0;
uniform vec4 uTexDom_Stage3_c1_c0;
uniform vec3 uDecalParams_Stage3_c1_c0;
uniform vec3 uLightLocation_Stage3_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_0_Stage3;
noperspective in vec4 vcolor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
vec3 fade_Stage1(vec3 t) {
    return ((t * t) * t) * (t * (t * 6.0 - 15.0) + 10.0);
}
float perm_Stage1(float x) {
    return texture(uTextureSampler_0_Stage1, vec2(fract(x / 256.0), 0.0)).x * 255.0;
}
float grad_Stage1(float x, vec3 p) {
    return dot(texture(uTextureSampler_1_Stage1, vec2(fract(x / 16.0), 0.0)).xyz * 255.0 - vec3(1.0), p);
}
float lerp_Stage1(float a, float b, float w) {
    return a + w * (b - a);
}
float noise_Stage1(vec3 p) {
    vec3 P = mod(floor(p), 256.0);
    p -= floor(p);
    vec3 f = fade_Stage1(p);
    float A = perm_Stage1(P.x) + P.y;
    float AA = perm_Stage1(A) + P.z;
    float AB = perm_Stage1(A + 1.0) + P.z;
    float B = perm_Stage1(P.x + 1.0) + P.y;
    float BA = perm_Stage1(B) + P.z;
    float BB = perm_Stage1(B + 1.0) + P.z;
    float result = lerp_Stage1(lerp_Stage1(lerp_Stage1(grad_Stage1(perm_Stage1(AA), p), grad_Stage1(perm_Stage1(BA), p + vec3(-1.0, 0.0, 0.0)), f.x), lerp_Stage1(grad_Stage1(perm_Stage1(AB), p + vec3(0.0, -1.0, 0.0)), grad_Stage1(perm_Stage1(BB), p + vec3(-1.0, -1.0, 0.0)), f.x), f.y), lerp_Stage1(lerp_Stage1(grad_Stage1(perm_Stage1(AA + 1.0), p + vec3(0.0, 0.0, -1.0)), grad_Stage1(perm_Stage1(BA + 1.0), p + vec3(-1.0, 0.0, -1.0)), f.x), lerp_Stage1(grad_Stage1(perm_Stage1(AB + 1.0), p + vec3(0.0, -1.0, -1.0)), grad_Stage1(perm_Stage1(BB + 1.0), p + vec3(-1.0, -1.0, -1.0)), f.x), f.y), f.z);
    return result;
}
float noiseOctaves_Stage1(vec3 p) {
    float result = 0.0;
    float ratio = 1.0;
    for (float i = 0.0;i < 4.0; i++) {
        result += noise_Stage1(p) / ratio;
        p *= 2.0;
        ratio *= 2.0;
    }
    return (result + 1.0) / 2.0;
}
vec4 TwoPointConicalGradientLayout_Stage2_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 p = vTransformedCoords_1_Stage0;
    float t = -1.0;
    float v = 1.0;
    {
        {
            float r0_2 = ufocalParams_Stage2_c0_c0_c0_c0.y;
            t = r0_2 - p.y * p.y;
            if (t >= 0.0) {
                t = p.x + sqrt(t);
            } else {
                v = -1.0;
            }
        }
    }
    _output = vec4(t, v, 0.0, 0.0);
    return _output;
}
vec4 DualIntervalGradientColorizer_Stage2_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    if (t < uthreshold_Stage2_c0_c0_c1_c0) {
        scale = uscale01_Stage2_c0_c0_c1_c0;
        bias = ubias01_Stage2_c0_c0_c1_c0;
    } else {
        scale = uscale23_Stage2_c0_c0_c1_c0;
        bias = ubias23_Stage2_c0_c0_c1_c0;
    }
    _output = t * scale + bias;
    return _output;
}
vec4 TiledGradientEffect_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = TwoPointConicalGradientLayout_Stage2_c0_c0_c0_c0(vec4(1.0));
    if (t.y < 0.0) {
        _output = vec4(0.0);
    } else {
        {
            float t_1 = t.x - 1.0;
            float tiled_t = (t_1 - 2.0 * floor(t_1 * 0.5)) - 1.0;
            t.x = abs(tiled_t);
        }
        _output = DualIntervalGradientColorizer_Stage2_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 light_Stage3_c1_c0(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    vec3 halfDir = normalize(surfaceToLight + vec3(0.0, 0.0, 1.0));
    float colorScale = uKS_Stage3_c1_c0 * pow(dot(normal, halfDir), uShininess_Stage3_c1_c0);
    vec3 color = lightColor * clamp(colorScale, 0.0, 1.0);
    return vec4(color, max(max(color.x, color.y), color.z));
}
float sobel_Stage3_c1_c0(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage3_c1_c0(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage3_c1_c0(float m[9], float surfaceScale) {
    return pointToNormal_Stage3_c1_c0(sobel_Stage3_c1_c0(m[1], m[2], m[4], m[5], m[7], m[8], 0.5), sobel_Stage3_c1_c0(0.0, 0.0, m[1], m[7], m[2], m[8], 0.33333298563957214), surfaceScale);
}
vec4 SpecularLighting_Stage3_c1_c0(vec4 _input, vec2 _coords) {
    _coords = _coords * uCoordTransformMatrix_2_Stage0.xz + uCoordTransformMatrix_2_Stage0.yw;
    vec4 _output;
    vec2 coord = _coords;
    float m[9];
    vec4 temp0;
    {
        vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage3_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage3_c1_c0.xy, uTexDom_Stage3_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3_c1_c0.y);
        if (err > uDecalParams_Stage3_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage3_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[0] = temp0.w;
    vec4 temp1;
    {
        vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage3_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage3_c1_c0.xy, uTexDom_Stage3_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3_c1_c0.y);
        if (err > uDecalParams_Stage3_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage3_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[1] = temp1.w;
    vec4 temp2;
    {
        vec2 origCoord = coord + uImageIncrement_Stage3_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage3_c1_c0.xy, uTexDom_Stage3_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3_c1_c0.y);
        if (err > uDecalParams_Stage3_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage3_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[2] = temp2.w;
    vec4 temp3;
    {
        vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage3_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage3_c1_c0.xy, uTexDom_Stage3_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3_c1_c0.y);
        if (err > uDecalParams_Stage3_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage3_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[3] = temp3.w;
    vec4 temp4;
    {
        vec2 origCoord = coord;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage3_c1_c0.xy, uTexDom_Stage3_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3_c1_c0.y);
        if (err > uDecalParams_Stage3_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage3_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[4] = temp4.w;
    vec4 temp5;
    {
        vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage3_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage3_c1_c0.xy, uTexDom_Stage3_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3_c1_c0.y);
        if (err > uDecalParams_Stage3_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage3_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[5] = temp5.w;
    vec4 temp6;
    {
        vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage3_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage3_c1_c0.xy, uTexDom_Stage3_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3_c1_c0.y);
        if (err > uDecalParams_Stage3_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage3_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[6] = temp6.w;
    vec4 temp7;
    {
        vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage3_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage3_c1_c0.xy, uTexDom_Stage3_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3_c1_c0.y);
        if (err > uDecalParams_Stage3_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage3_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[7] = temp7.w;
    vec4 temp8;
    {
        vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage3_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage3_c1_c0.xy, uTexDom_Stage3_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage3, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3_c1_c0.y);
        if (err > uDecalParams_Stage3_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage3_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[8] = temp8.w;
    vec3 surfaceToLight = normalize(uLightLocation_Stage3_c1_c0 - vec3(gl_FragCoord.xy, uSurfaceScale_Stage3_c1_c0 * m[4]));
    _output = light_Stage3_c1_c0(normal_Stage3_c1_c0(m, uSurfaceScale_Stage3_c1_c0), surfaceToLight, uLightColor_Stage3_c1_c0);
    _output *= _input;
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 output_Stage1;
    {
        vec2 coords = vTransformedCoords_0_Stage0 * ubaseFrequency_Stage1;
        float r = noiseOctaves_Stage1(vec3(coords, uz_Stage1));
        float g = noiseOctaves_Stage1(vec3(coords, uz_Stage1));
        float b = noiseOctaves_Stage1(vec3(coords, uz_Stage1));
        float a = noiseOctaves_Stage1(vec3(coords, uz_Stage1));
        output_Stage1 = vec4(r, g, b, a);
        output_Stage1 = clamp(output_Stage1, 0.0, 1.0);
        output_Stage1 = vec4(output_Stage1.xyz * output_Stage1.www, output_Stage1.w);
    }
    vec4 output_Stage2;
    {
        output_Stage2 = blend_dst_in(output_Stage1, TiledGradientEffect_Stage2_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage3;
    {
        output_Stage3 = SpecularLighting_Stage3_c1_c0(output_Stage2, gl_FragCoord.xy);
    }
    {
        sk_FragColor = output_Stage3;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 inPosition;
in vec4 inColor;
noperspective out vec4 vcolor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

