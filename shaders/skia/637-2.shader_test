[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uCoordTransformMatrix_1_Stage0;
uniform vec4 uellipse_Stage2_c0_c0;
uniform vec4 urectUniform_Stage2_c1_c0;
uniform vec2 uScale_Stage5;
uniform vec4 uTexDom_Stage5;
uniform vec3 uDecalParams_Stage5;
uniform sampler2D uTextureSampler_0_Stage3;
uniform sampler2D uTextureSampler_0_Stage5;
uniform sampler2D uTextureSampler_1_Stage5;
noperspective in vec2 vEllipseOffsets_Stage0;
noperspective in vec4 vEllipseRadii_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vTransformedCoords_3_Stage0;
vec4 EllipseEffect_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 d = gl_FragCoord.xy - uellipse_Stage2_c0_c0.xy;
    vec2 Z = d * uellipse_Stage2_c0_c0.zw;
    float implicit = dot(Z, d) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    {
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
    }
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha;
    {
        alpha = clamp(0.5 + approx_dist, 0.0, 1.0);
    }
    _output = _input * alpha;
    return _output;
}
vec4 AARectEffect_Stage2_c1_c0(vec4 _input) {
    vec4 _output;
    float alpha;
    {
        alpha = float(all(greaterThan(vec4(gl_FragCoord.xy, urectUniform_Stage2_c1_c0.zw), vec4(urectUniform_Stage2_c1_c0.xy, gl_FragCoord.xy))) ? 1 : 0);
    }
    _output = _input * alpha;
    return _output;
}
vec4 TextureEffect_Stage3_c2_c0(vec4 _input, vec2 _coords) {
    _coords = _coords * uCoordTransformMatrix_1_Stage0.xz + uCoordTransformMatrix_1_Stage0.yw;
    vec4 _output;
    _output = texture(uTextureSampler_0_Stage3, _coords) * _input;
    return _output;
}
vec4 blend_src_over(vec4 src, vec4 dst) {
    return src + (1.0 - src.w) * dst;
}
vec4 blend_darken(vec4 src, vec4 dst) {
    vec4 result = blend_src_over(src, dst);
    result.xyz = min(result.xyz, (1.0 - dst.w) * src.xyz + dst.xyz);
    return result;
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vinColor_Stage0;
        vec2 offset = vEllipseOffsets_Stage0;
        offset *= vEllipseRadii_Stage0.xy;
        float test = dot(offset, offset) - 1.0;
        vec2 grad = (2.0 * offset) * vEllipseRadii_Stage0.xy;
        float grad_dot = dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        offset = vEllipseOffsets_Stage0 * vEllipseRadii_Stage0.zw;
        test = dot(offset, offset) - 1.0;
        grad = (2.0 * offset) * vEllipseRadii_Stage0.zw;
        grad_dot = dot(grad, grad);
        invlen = inversesqrt(grad_dot);
        edgeAlpha *= clamp(0.5 + test * invlen, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        output_Stage1 = floor(outputColor_Stage0 * 255.0 + 0.5) / 255.0;
        {
            output_Stage1.xyz = floor((output_Stage1.xyz * output_Stage1.w) * 255.0 + 0.5) / 255.0;
        }
    }
    vec4 output_Stage2;
    {
        vec4 inputColor = vec4(output_Stage1.xyz, 1.0);
        output_Stage2 = blend_darken(EllipseEffect_Stage2_c0_c0(inputColor), AARectEffect_Stage2_c1_c0(inputColor));
        output_Stage2 *= output_Stage1.w;
    }
    vec4 output_Stage3;
    {
        float coord = vTransformedCoords_0_Stage0.x - 0.5;
        float f = fract(coord);
        coord += 0.5 - f;
        float f2 = f * f;
        vec4 w = mat4(0.055555555555555552, 0.88888888888888884, 0.055555555555555552, 0.0, -0.5, 0.0, 0.5, 0.0, 0.83333333333333337, -2.0, 1.5, -0.33333333333333331, -0.3888888888888889, 1.1666666666666667, -1.1666666666666667, 0.3888888888888889) * vec4(1.0, f, f2, f2 * f);
        vec4 c[4];
        c[0] = TextureEffect_Stage3_c2_c0(vec4(1.0), vec2(coord + -1.0, vTransformedCoords_0_Stage0.y));
        c[1] = TextureEffect_Stage3_c2_c0(vec4(1.0), vec2(coord, vTransformedCoords_0_Stage0.y));
        c[2] = TextureEffect_Stage3_c2_c0(vec4(1.0), vec2(coord + 1.0, vTransformedCoords_0_Stage0.y));
        c[3] = TextureEffect_Stage3_c2_c0(vec4(1.0), vec2(coord + 2.0, vTransformedCoords_0_Stage0.y));
        vec4 bicubicColor = ((c[0] * w.x + c[1] * w.y) + c[2] * w.z) + c[3] * w.w;
        bicubicColor.xyz = max(vec3(0.0), min(bicubicColor.xyz, bicubicColor.www));
        output_Stage3 = bicubicColor * outputCoverage_Stage0;
    }
    vec4 output_Stage4;
    {
        output_Stage4 = floor(output_Stage3 * 255.0 + 0.5) / 255.0;
        {
            output_Stage4.xyz = output_Stage4.w <= 0.0 ? vec3(0.0) : floor((output_Stage4.xyz / output_Stage4.w) * 255.0 + 0.5) / 255.0;
        }
    }
    vec4 output_Stage5;
    {
        vec4 dColor = texture(uTextureSampler_0_Stage5, vTransformedCoords_2_Stage0);
        dColor.xyz = dColor.w < 9.9999999747524271e-07 ? vec3(0.0) : clamp(dColor.xyz / dColor.w, 0.0, 1.0);
        vec2 cCoords = vTransformedCoords_3_Stage0 + uScale_Stage5 * (dColor.zw - vec2(0.5));
        {
            vec2 origCoord = cCoords;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            output_Stage5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
    }
    {
        sk_FragColor = output_Stage5 * output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffset;
in vec4 inEllipseRadii;
noperspective out vec2 vEllipseOffsets_Stage0;
noperspective out vec4 vEllipseRadii_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vTransformedCoords_3_Stage0;
void main() {
    vEllipseOffsets_Stage0 = inEllipseOffset;
    vEllipseRadii_Stage0 = inEllipseRadii;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

