[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec2 uScale_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec4 uTexDom_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec3 uDecalParams_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec4 uinnerRect_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec4 uinvRadiiLTRB_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec4 ucircleData_Stage1_c1_c0_c1_c0_c0_c0;
uniform vec2 uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
uniform vec4 uKernel_Stage1_c1_c0_c1_c0_c1_c0[2];
uniform vec2 uKernelOffset_Stage1_c1_c0_c1_c0_c1_c0;
uniform float uGain_Stage1_c1_c0_c1_c0_c1_c0;
uniform float uBias_Stage1_c1_c0_c1_c0_c1_c0;
uniform vec4 uTexDom_Stage1_c1_c0_c1_c0_c1_c0;
uniform vec3 uDecalParams_Stage1_c1_c0_c1_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
uniform sampler2D uTextureSampler_3_Stage1;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
vec4 ClampFragmentProcessor_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    {
        float alpha = clamp(_input.w, 0.0, 1.0);
        _output = vec4(clamp(_input.xyz, 0.0, alpha), alpha);
    }
    return _output;
}
vec4 DisplacementMap_Stage1_c1_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 dColor = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
    dColor.xyz = dColor.w < 9.9999999747524271e-07 ? vec3(0.0) : clamp(dColor.xyz / dColor.w, 0.0, 1.0);
    vec2 cCoords = vTransformedCoords_1_Stage0 + uScale_Stage1_c1_c0_c0_c0_c0_c0 * (dColor.zz - vec2(0.5));
    {
        vec2 origCoord = cCoords;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        _output = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    return _output;
}
vec4 EllipticalRRect_Stage1_c1_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c1_c0_c0_c0_c1_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c1_c0_c0_c0_c1_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    vec2 Z = max(max(dxy0 * uinvRadiiLTRB_Stage1_c1_c0_c0_c0_c1_c0.xy, dxy1 * uinvRadiiLTRB_Stage1_c1_c0_c0_c0_c1_c0.zw), 0.0);
    float implicit = dot(Z, dxy) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    grad_dot = max(grad_dot, 9.9999997473787516e-05);
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha = clamp(0.5 - approx_dist, 0.0, 1.0);
    _output = _input * alpha;
    return _output;
}
vec4 blend_dst_atop(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + src.w * dst;
}
vec4 ComposeTwo_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_dst_atop(DisplacementMap_Stage1_c1_c0_c0_c0_c0_c0(inputColor), EllipticalRRect_Stage1_c1_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 CircleBlurFragmentProcessor_Stage1_c1_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 vec = vec2((gl_FragCoord.x - ucircleData_Stage1_c1_c0_c1_c0_c0_c0.x) * ucircleData_Stage1_c1_c0_c1_c0_c0_c0.w, (gl_FragCoord.y - ucircleData_Stage1_c1_c0_c1_c0_c0_c0.y) * ucircleData_Stage1_c1_c0_c1_c0_c0_c0.w);
    float dist = length(vec) + (0.5 - ucircleData_Stage1_c1_c0_c1_c0_c0_c0.z) * ucircleData_Stage1_c1_c0_c1_c0_c0_c0.w;
    _output = _input * texture(uTextureSampler_2_Stage1, vec2(dist, 0.5)).w;
    return _output;
}
vec4 MatrixConvolution_Stage1_c1_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_2_Stage0 - uKernelOffset_Stage1_c1_c0_c1_c0_c1_c0 * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
    vec4 c;
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[0].x;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_3_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[0].y;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_3_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[0].z;
        {
            vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_3_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[0].w;
        {
            vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_3_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[1].x;
        {
            vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_3_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[1].y;
        {
            vec2 origCoord = coord + vec2(5.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_3_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c1_c0_c1_c0_c1_c0[1].z;
        {
            vec2 origCoord = coord + vec2(6.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.zw);
            vec4 textureColor = texture(uTextureSampler_3_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.y);
            if (err > uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        sum += c * k;
    }
    _output = sum * uGain_Stage1_c1_c0_c1_c0_c1_c0 + uBias_Stage1_c1_c0_c1_c0_c1_c0;
    _output.w = clamp(_output.w, 0.0, 1.0);
    _output.xyz = clamp(_output.xyz, 0.0, _output.w);
    _output *= _input;
    return _output;
}
vec4 blend_src_over(vec4 src, vec4 dst) {
    return src + (1.0 - src.w) * dst;
}
vec4 ComposeTwo_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_over(CircleBlurFragmentProcessor_Stage1_c1_c0_c1_c0_c0_c0(inputColor), MatrixConvolution_Stage1_c1_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_modulate(vec4 src, vec4 dst) {
    return src * dst;
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_modulate(ComposeTwo_Stage1_c1_c0_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_xor(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + (1.0 - src.w) * dst;
}
void main() {
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(vec4(1.0).xyz, 1.0);
        output_Stage1 = blend_xor(ClampFragmentProcessor_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 position;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(localCoord, 1.0)).xy;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

