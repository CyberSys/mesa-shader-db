[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uCoordTransformMatrix_2_Stage0;
uniform vec4 usubset_Stage2_c0_c0;
uniform vec4 uclamp_Stage2_c0_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
vec4 TextureEffect_Stage2_c0_c0(vec4 _input, vec2 _coords) {
    _coords = _coords * uCoordTransformMatrix_2_Stage0.xz + uCoordTransformMatrix_2_Stage0.yw;
    vec4 _output;
    vec2 inCoord = _coords;
    vec2 subsetCoord;
    {
        float w = usubset_Stage2_c0_c0.z - usubset_Stage2_c0_c0.x;
        float w2 = 2.0 * w;
        float m = mod(inCoord.x - usubset_Stage2_c0_c0.x, w2);
        subsetCoord.x = mix(m, w2 - m, step(w, m)) + usubset_Stage2_c0_c0.x;
    }
    {
        float w = usubset_Stage2_c0_c0.w - usubset_Stage2_c0_c0.y;
        float w2 = 2.0 * w;
        float m = mod(inCoord.y - usubset_Stage2_c0_c0.y, w2);
        subsetCoord.y = mix(m, w2 - m, step(w, m)) + usubset_Stage2_c0_c0.y;
    }
    vec2 clampedCoord;
    clampedCoord.x = clamp(subsetCoord.x, uclamp_Stage2_c0_c0.x, uclamp_Stage2_c0_c0.z);
    clampedCoord.y = clamp(subsetCoord.y, uclamp_Stage2_c0_c0.y, uclamp_Stage2_c0_c0.w);
    vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
    _output = _input * textureColor;
    return _output;
}
void main() {
    vec4 output_Stage1;
    {
        output_Stage1 = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
    }
    vec4 output_Stage2;
    {
        float coord = vTransformedCoords_1_Stage0.y - 0.5;
        float f = fract(coord);
        coord += 0.5 - f;
        float f2 = f * f;
        vec4 w = mat4(0.055555555555555552, 0.88888888888888884, 0.055555555555555552, 0.0, -0.5, 0.0, 0.5, 0.0, 0.83333333333333337, -2.0, 1.5, -0.33333333333333331, -0.3888888888888889, 1.1666666666666667, -1.1666666666666667, 0.3888888888888889) * vec4(1.0, f, f2, f2 * f);
        vec4 c[4];
        c[0] = TextureEffect_Stage2_c0_c0(vec4(1.0), vec2(vTransformedCoords_1_Stage0.x, coord + -1.0));
        c[1] = TextureEffect_Stage2_c0_c0(vec4(1.0), vec2(vTransformedCoords_1_Stage0.x, coord));
        c[2] = TextureEffect_Stage2_c0_c0(vec4(1.0), vec2(vTransformedCoords_1_Stage0.x, coord + 1.0));
        c[3] = TextureEffect_Stage2_c0_c0(vec4(1.0), vec2(vTransformedCoords_1_Stage0.x, coord + 2.0));
        vec4 bicubicColor = ((c[0] * w.x + c[1] * w.y) + c[2] * w.z) + c[3] * w.w;
        bicubicColor.xyz = max(vec3(0.0), min(bicubicColor.xyz, bicubicColor.www));
        output_Stage2 = bicubicColor * output_Stage1;
    }
    {
        sk_FragColor = output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 position;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(localCoord, 1.0)).xy;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

