[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform mat4 um_Stage1;
uniform vec4 uv_Stage1;
uniform vec2 uImageIncrement_Stage2_c0_c0;
uniform float uSurfaceScale_Stage2_c0_c0;
uniform vec3 uLightColor_Stage2_c0_c0;
uniform float uKD_Stage2_c0_c0;
uniform vec4 uTexDom_Stage2_c0_c0;
uniform vec3 uDecalParams_Stage2_c0_c0;
uniform vec3 uLightLocation_Stage2_c0_c0;
uniform float uExponent_Stage2_c0_c0;
uniform float uCosInnerConeAngle_Stage2_c0_c0;
uniform float uCosOuterConeAngle_Stage2_c0_c0;
uniform float uConeScale_Stage2_c0_c0;
uniform vec3 uS_Stage2_c0_c0;
uniform vec4 uleftBorderColor_Stage3_c1_c0;
uniform vec4 urightBorderColor_Stage3_c1_c0;
uniform float ubias_Stage3_c1_c0_c0_c0;
uniform float uscale_Stage3_c1_c0_c0_c0;
uniform vec4 uscale0_1_Stage3_c1_c0_c1_c0;
uniform vec4 uscale2_3_Stage3_c1_c0_c1_c0;
uniform vec4 uscale4_5_Stage3_c1_c0_c1_c0;
uniform vec4 uscale6_7_Stage3_c1_c0_c1_c0;
uniform vec4 ubias0_1_Stage3_c1_c0_c1_c0;
uniform vec4 ubias2_3_Stage3_c1_c0_c1_c0;
uniform vec4 ubias4_5_Stage3_c1_c0_c1_c0;
uniform vec4 ubias6_7_Stage3_c1_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage3_c1_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage3_c1_c0_c1_c0;
uniform float uPixelSize_Stage4_c2_c0;
uniform vec2 uRange_Stage4_c2_c0;
uniform vec2 uScale_Stage4_c3_c0;
uniform vec4 uTexDom_Stage4_c3_c0;
uniform vec3 uDecalParams_Stage4_c3_c0;
uniform vec2 uImageIncrement_Stage5;
uniform float uSurfaceScale_Stage5;
uniform vec3 uLightColor_Stage5;
uniform float uKS_Stage5;
uniform float uShininess_Stage5;
uniform vec4 uTexDom_Stage5;
uniform vec3 uDecalParams_Stage5;
uniform vec3 uLightLocation_Stage5;
uniform float uExponent_Stage5;
uniform float uCosInnerConeAngle_Stage5;
uniform float uCosOuterConeAngle_Stage5;
uniform float uConeScale_Stage5;
uniform vec3 uS_Stage5;
uniform vec2 uImageIncrement_Stage6;
uniform vec4 uKernel_Stage6[2];
uniform vec2 uKernelOffset_Stage6;
uniform float uGain_Stage6;
uniform float uBias_Stage6;
uniform sampler2D uTextureSampler_0_Stage2;
uniform sampler2D uTextureSampler_0_Stage4;
uniform sampler2D uTextureSampler_1_Stage4;
uniform sampler2D uTextureSampler_2_Stage4;
uniform sampler2D uTextureSampler_0_Stage5;
uniform sampler2D uTextureSampler_0_Stage6;
noperspective in vec4 vcolor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vTransformedCoords_3_Stage0;
noperspective in vec2 vTransformedCoords_4_Stage0;
noperspective in vec2 vTransformedCoords_5_Stage0;
noperspective in vec2 vTransformedCoords_6_Stage0;
vec4 light_Stage2_c0_c0(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    float colorScale = uKD_Stage2_c0_c0 * dot(normal, surfaceToLight);
    return vec4(lightColor * clamp(colorScale, 0.0, 1.0), 1.0);
}
float sobel_Stage2_c0_c0(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage2_c0_c0(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage2_c0_c0(float m[9], float surfaceScale) {
    return pointToNormal_Stage2_c0_c0(sobel_Stage2_c0_c0(0.0, 0.0, m[4], m[5], m[7], m[8], 0.66666698455810547), sobel_Stage2_c0_c0(0.0, 0.0, m[4], m[7], m[5], m[8], 0.66666698455810547), surfaceScale);
}
vec3 lightColor_Stage2_c0_c0(vec3 surfaceToLight) {
    float cosAngle = -dot(surfaceToLight, uS_Stage2_c0_c0);
    if (cosAngle < uCosOuterConeAngle_Stage2_c0_c0) {
        return vec3(0.0);
    }
    float scale = pow(cosAngle, uExponent_Stage2_c0_c0);
    if (cosAngle < uCosInnerConeAngle_Stage2_c0_c0) {
        return ((uLightColor_Stage2_c0_c0 * scale) * (cosAngle - uCosOuterConeAngle_Stage2_c0_c0)) * uConeScale_Stage2_c0_c0;
    }
    return uLightColor_Stage2_c0_c0;
}
vec4 DiffuseLighting_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_0_Stage0;
    float m[9];
    vec4 temp0;
    {
        vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage2_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c0_c0.y);
        if (err > uDecalParams_Stage2_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[0] = temp0.w;
    vec4 temp1;
    {
        vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage2_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c0_c0.y);
        if (err > uDecalParams_Stage2_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[1] = temp1.w;
    vec4 temp2;
    {
        vec2 origCoord = coord + uImageIncrement_Stage2_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c0_c0.y);
        if (err > uDecalParams_Stage2_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[2] = temp2.w;
    vec4 temp3;
    {
        vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage2_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c0_c0.y);
        if (err > uDecalParams_Stage2_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[3] = temp3.w;
    vec4 temp4;
    {
        vec2 origCoord = coord;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c0_c0.y);
        if (err > uDecalParams_Stage2_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[4] = temp4.w;
    vec4 temp5;
    {
        vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage2_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c0_c0.y);
        if (err > uDecalParams_Stage2_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[5] = temp5.w;
    vec4 temp6;
    {
        vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage2_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c0_c0.y);
        if (err > uDecalParams_Stage2_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[6] = temp6.w;
    vec4 temp7;
    {
        vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage2_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c0_c0.y);
        if (err > uDecalParams_Stage2_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[7] = temp7.w;
    vec4 temp8;
    {
        vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage2_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage2_c0_c0.xy, uTexDom_Stage2_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2_c0_c0.y);
        if (err > uDecalParams_Stage2_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage2_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[8] = temp8.w;
    vec3 surfaceToLight = normalize(uLightLocation_Stage2_c0_c0 - vec3(gl_FragCoord.xy, uSurfaceScale_Stage2_c0_c0 * m[4]));
    _output = light_Stage2_c0_c0(normal_Stage2_c0_c0(m, uSurfaceScale_Stage2_c0_c0), surfaceToLight, lightColor_Stage2_c0_c0(surfaceToLight));
    _output *= _input;
    return _output;
}
vec4 SweepGradientLayout_Stage3_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float angle;
    {
        angle = atan(-vTransformedCoords_1_Stage0.y, -vTransformedCoords_1_Stage0.x);
    }
    float t = ((angle * 0.15915493667125702 + 0.5) + ubias_Stage3_c1_c0_c0_c0) * uscale_Stage3_c1_c0_c0_c0;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage3_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage3_c1_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage3_c1_c0_c1_c0.x) {
                scale = uscale0_1_Stage3_c1_c0_c1_c0;
                bias = ubias0_1_Stage3_c1_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage3_c1_c0_c1_c0;
                bias = ubias2_3_Stage3_c1_c0_c1_c0;
            }
        } else {
            if (t < uthresholds1_7_Stage3_c1_c0_c1_c0.z) {
                scale = uscale4_5_Stage3_c1_c0_c1_c0;
                bias = ubias4_5_Stage3_c1_c0_c1_c0;
            } else {
                scale = uscale6_7_Stage3_c1_c0_c1_c0;
                bias = ubias6_7_Stage3_c1_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 ClampedGradientEffect_Stage3_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 t = SweepGradientLayout_Stage3_c1_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage3_c1_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage3_c1_c0;
    } else {
        _output = UnrolledBinaryGradientColorizer_Stage3_c1_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 Morphology_Stage4_c2_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(1.0, 1.0, 1.0, 1.0);
    vec2 coord = vTransformedCoords_2_Stage0;
    coord.y -= 6.0 * uPixelSize_Stage4_c2_c0;
    for (int i = 0;i < 13; i++) {
        _output = min(_output, texture(uTextureSampler_0_Stage4, coord));
        coord.y += uPixelSize_Stage4_c2_c0;
    }
    _output *= _input;
    return _output;
}
vec4 DisplacementMap_Stage4_c3_c0(vec4 _input) {
    vec4 _output;
    vec4 dColor = texture(uTextureSampler_1_Stage4, vTransformedCoords_3_Stage0);
    dColor.xyz = dColor.w < 9.9999999747524271e-07 ? vec3(0.0) : clamp(dColor.xyz / dColor.w, 0.0, 1.0);
    vec2 cCoords = vTransformedCoords_4_Stage0 + uScale_Stage4_c3_c0 * (dColor.zz - vec2(0.5));
    {
        vec2 origCoord = cCoords;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage4_c3_c0.xy, uTexDom_Stage4_c3_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage4, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c3_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c3_c0.y);
        if (err > uDecalParams_Stage4_c3_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage4_c3_c0.z < 1.0) {
            err = 0.0;
        }
        _output = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    return _output;
}
vec4 light_Stage5(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    vec3 halfDir = normalize(surfaceToLight + vec3(0.0, 0.0, 1.0));
    float colorScale = uKS_Stage5 * pow(dot(normal, halfDir), uShininess_Stage5);
    vec3 color = lightColor * clamp(colorScale, 0.0, 1.0);
    return vec4(color, max(max(color.x, color.y), color.z));
}
float sobel_Stage5(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage5(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage5(float m[9], float surfaceScale) {
    return pointToNormal_Stage5(sobel_Stage5(m[0], m[1], m[3], m[4], 0.0, 0.0, 0.66666698455810547), sobel_Stage5(m[0], m[3], m[1], m[4], 0.0, 0.0, 0.66666698455810547), surfaceScale);
}
vec3 lightColor_Stage5(vec3 surfaceToLight) {
    float cosAngle = -dot(surfaceToLight, uS_Stage5);
    if (cosAngle < uCosOuterConeAngle_Stage5) {
        return vec3(0.0);
    }
    float scale = pow(cosAngle, uExponent_Stage5);
    if (cosAngle < uCosInnerConeAngle_Stage5) {
        return ((uLightColor_Stage5 * scale) * (cosAngle - uCosOuterConeAngle_Stage5)) * uConeScale_Stage5;
    }
    return uLightColor_Stage5;
}
vec4 blend_src(vec4 src, vec4 dst) {
    return src;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
vec4 blend_dst_atop(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + src.w * dst;
}
void main() {
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(1.0);
        {
            float nonZeroAlpha = max(1.0, 9.9999997473787516e-05);
            inputColor = vec4(vec4(1.0).xyz / nonZeroAlpha, 1.0);
        }
        output_Stage1 = um_Stage1 * inputColor + uv_Stage1;
        {
            output_Stage1 = clamp(output_Stage1, 0.0, 1.0);
        }
    }
    vec4 output_Stage2;
    {
        output_Stage2 = blend_src(DiffuseLighting_Stage2_c0_c0(vec4(1.0)), output_Stage1);
    }
    vec4 output_Stage3;
    {
        output_Stage3 = blend_dst_in(output_Stage2, ClampedGradientEffect_Stage3_c1_c0(vec4(1.0)));
    }
    vec4 output_Stage4;
    {
        vec4 inputColor = vec4(output_Stage3.xyz, 1.0);
        output_Stage4 = blend_dst_atop(Morphology_Stage4_c2_c0(inputColor), DisplacementMap_Stage4_c3_c0(inputColor));
        output_Stage4 *= output_Stage3.w;
    }
    vec4 output_Stage5;
    {
        vec2 coord = vTransformedCoords_5_Stage0;
        float m[9];
        vec4 temp0;
        {
            vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[0] = temp0.w;
        vec4 temp1;
        {
            vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[1] = temp1.w;
        vec4 temp2;
        {
            vec2 origCoord = coord + uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[2] = temp2.w;
        vec4 temp3;
        {
            vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[3] = temp3.w;
        vec4 temp4;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[4] = temp4.w;
        vec4 temp5;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[5] = temp5.w;
        vec4 temp6;
        {
            vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[6] = temp6.w;
        vec4 temp7;
        {
            vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[7] = temp7.w;
        vec4 temp8;
        {
            vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[8] = temp8.w;
        vec3 surfaceToLight = normalize(uLightLocation_Stage5 - vec3(gl_FragCoord.xy, uSurfaceScale_Stage5 * m[4]));
        output_Stage5 = light_Stage5(normal_Stage5(m, uSurfaceScale_Stage5), surfaceToLight, lightColor_Stage5(surfaceToLight));
        output_Stage5 *= output_Stage4;
    }
    vec4 output_Stage6;
    {
        vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_6_Stage0 - uKernelOffset_Stage6 * uImageIncrement_Stage6;
        vec4 c;
        {
            float k = uKernel_Stage6[0].x;
            {
                vec2 origCoord = coord;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage6, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage6[0].y;
            {
                vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage6;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage6, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage6[0].z;
            {
                vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage6;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage6, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage6[0].w;
            {
                vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage6;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage6, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage6[1].x;
            {
                vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage6;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage6, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage6[1].y;
            {
                vec2 origCoord = coord + vec2(5.0, 0.0) * uImageIncrement_Stage6;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage6, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage6[1].z;
            {
                vec2 origCoord = coord + vec2(6.0, 0.0) * uImageIncrement_Stage6;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage6, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        {
            float k = uKernel_Stage6[1].w;
            {
                vec2 origCoord = coord + vec2(7.0, 0.0) * uImageIncrement_Stage6;
                vec2 clampedCoord;
                clampedCoord = origCoord;
                vec4 textureColor = texture(uTextureSampler_0_Stage6, clampedCoord);
                c = textureColor;
            }
            sum += c * k;
        }
        output_Stage6 = sum * uGain_Stage6 + uBias_Stage6;
        output_Stage6.w = clamp(output_Stage6.w, 0.0, 1.0);
        output_Stage6.xyz = clamp(output_Stage6.xyz, 0.0, output_Stage6.w);
        output_Stage6 *= output_Stage5;
    }
    {
        sk_FragColor = output_Stage6;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
uniform mat3 uCoordTransformMatrix_4_Stage0;
uniform mat3 uCoordTransformMatrix_5_Stage0;
uniform mat3 uCoordTransformMatrix_6_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inLocalCoord;
noperspective out vec4 vcolor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vTransformedCoords_3_Stage0;
noperspective out vec2 vTransformedCoords_4_Stage0;
noperspective out vec2 vTransformedCoords_5_Stage0;
noperspective out vec2 vTransformedCoords_6_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_4_Stage0 = (uCoordTransformMatrix_4_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_5_Stage0 = (uCoordTransformMatrix_5_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_6_Stage0 = (uCoordTransformMatrix_6_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

