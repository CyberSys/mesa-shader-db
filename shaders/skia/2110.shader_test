[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec2 uDstTextureUpperLeft_Stage2;
uniform vec2 uDstTextureCoordScale_Stage2;
uniform sampler2D uTextureSampler_0_Stage0;
uniform sampler2D uDstTextureSampler_Stage2;
in vec2 vTextureCoords_Stage0;
flat in int vTexIndex_Stage0;
in vec2 vIntTextureCoords_Stage0;
in vec4 vinColor_Stage0;
vec4 Big_Ole_Key_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    _output = _input;
    return _output;
}
vec4 blend_src(vec4 src, vec4 dst) {
    return src;
}
void main() {
    vec4 outputCoverage_Stage0;
    {
        vec2 uv = vTextureCoords_Stage0;
        vec4 texColor;
        {
            texColor = texture(uTextureSampler_0_Stage0, uv);
        }
        float distance = 7.96875 * (texColor.x - 0.50196081399917603);
        float afwidth;
        vec2 dist_grad = vec2(dFdx(distance), -dFdy(distance));
        float dg_len2 = dot(dist_grad, dist_grad);
        if (dg_len2 < 9.9999997473787516e-05) {
            dist_grad = vec2(0.70709997415542603, 0.70709997415542603);
        } else {
            dist_grad = dist_grad * inversesqrt(dg_len2);
        }
        vec2 Jdx = dFdx(vIntTextureCoords_Stage0);
        vec2 Jdy = -dFdy(vIntTextureCoords_Stage0);
        vec2 grad = vec2(dist_grad.x * Jdx.x + dist_grad.y * Jdy.x, dist_grad.x * Jdx.y + dist_grad.y * Jdy.y);
        afwidth = 0.64999997615814209 * length(grad);
        float val = clamp((distance + afwidth) / (2.0 * afwidth), 0.0, 1.0);
        outputCoverage_Stage0 = vec4(val);
    }
    vec4 output_Stage1;
    {
        output_Stage1 = Big_Ole_Key_Stage1_c0_c0(vec4(1.0));
    }
    {
        if (all(lessThanEqual(outputCoverage_Stage0.xyz, vec3(0.0)))) {
            discard;
        }
        vec2 _dstTexCoord = (gl_FragCoord.xy - uDstTextureUpperLeft_Stage2) * uDstTextureCoordScale_Stage2;
        _dstTexCoord.y = 1.0 - _dstTexCoord.y;
        vec4 _dstColor = texture(uDstTextureSampler_Stage2, _dstTexCoord);
        sk_FragColor = blend_src(output_Stage1, _dstColor);
        sk_FragColor = outputCoverage_Stage0 * sk_FragColor + (vec4(1.0) - outputCoverage_Stage0) * _dstColor;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform vec2 uAtlasDimensionsInv_Stage0;
uniform mat3 uViewM_Stage0;
in vec2 inPosition;
in vec4 inColor;
in uvec2 inTextureCoords;
out vec2 vTextureCoords_Stage0;
flat out int vTexIndex_Stage0;
out vec2 vIntTextureCoords_Stage0;
out vec4 vinColor_Stage0;
void main() {
    ivec2 signedCoords = ivec2(int(inTextureCoords.x), int(inTextureCoords.y));
    vec2 unormTexCoords = vec2(float(signedCoords.x / 2), float(signedCoords.y / 2));
    vTextureCoords_Stage0 = unormTexCoords * uAtlasDimensionsInv_Stage0;
    vTexIndex_Stage0 = 0;
    vIntTextureCoords_Stage0 = unormTexCoords;
    vinColor_Stage0 = inColor;
    vec3 pos3 = uViewM_Stage0 * vec3(inPosition, 1.0);
    gl_Position = vec4(pos3.x, pos3.y, 0.0, pos3.z);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

