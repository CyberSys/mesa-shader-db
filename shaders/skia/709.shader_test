[require]
GLSL >= 1.40
GL_KHR_blend_equation_advanced

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform float ucornerRadius_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec4 uproxyRect_Stage1_c0_c0_c0_c0_c0_c0;
uniform float ublurRadius_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec2 uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec4 uKernel_Stage1_c0_c0_c0_c0_c1_c0[4];
uniform vec2 uKernelOffset_Stage1_c0_c0_c0_c0_c1_c0;
uniform float uGain_Stage1_c0_c0_c0_c0_c1_c0;
uniform float uBias_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec2 uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
uniform float uSurfaceScale_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec3 uLightColor_Stage1_c0_c0_c1_c0_c0_c0;
uniform float uKS_Stage1_c0_c0_c1_c0_c0_c0;
uniform float uShininess_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec4 uTexDom_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec3 uDecalParams_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec3 uLightLocation_Stage1_c0_c0_c1_c0_c0_c0;
uniform float uPixelSize_Stage1_c0_c0_c1_c0_c1_c0;
uniform vec2 uRange_Stage1_c0_c0_c1_c0_c1_c0;
uniform vec4 ucolor0_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec4 ucolor1_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec4 ucolor2_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec4 ucolor3_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec4 ucolor4_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec4 ucolor5_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec2 uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
uniform float uSurfaceScale_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec3 uLightColor_Stage1_c1_c0_c0_c0_c1_c0;
uniform float uKS_Stage1_c1_c0_c0_c0_c1_c0;
uniform float uShininess_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec4 uTexDom_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec3 uDecalParams_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec3 uLightDirection_Stage1_c1_c0_c0_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
uniform sampler2D uTextureSampler_3_Stage1;
uniform sampler2D uTextureSampler_4_Stage1;
noperspective in vec4 vcolor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vTransformedCoords_3_Stage0;
noperspective in vec2 vTransformedCoords_4_Stage0;
noperspective in vec2 vTransformedCoords_5_Stage0;
vec4 RRectBlurEffect_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 translatedFragPos = gl_FragCoord.xy - uproxyRect_Stage1_c0_c0_c0_c0_c0_c0.xy;
    float threshold = ucornerRadius_Stage1_c0_c0_c0_c0_c0_c0 + 2.0 * ublurRadius_Stage1_c0_c0_c0_c0_c0_c0;
    vec2 middle = (uproxyRect_Stage1_c0_c0_c0_c0_c0_c0.zw - uproxyRect_Stage1_c0_c0_c0_c0_c0_c0.xy) - 2.0 * threshold;
    if (translatedFragPos.x >= threshold && translatedFragPos.x < middle.x + threshold) {
        translatedFragPos.x = threshold;
    } else if (translatedFragPos.x >= middle.x + threshold) {
        translatedFragPos.x -= middle.x - 1.0;
    }
    if (translatedFragPos.y > threshold && translatedFragPos.y < middle.y + threshold) {
        translatedFragPos.y = threshold;
    } else if (translatedFragPos.y >= middle.y + threshold) {
        translatedFragPos.y -= middle.y - 1.0;
    }
    vec2 proxyDims = vec2(2.0 * threshold + 1.0);
    vec2 texCoord = translatedFragPos / proxyDims;
    _output = _input * texture(uTextureSampler_0_Stage1, texCoord);
    return _output;
}
vec4 MatrixConvolution_Stage1_c0_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_0_Stage0 - uKernelOffset_Stage1_c0_c0_c0_c0_c1_c0 * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    vec4 c;
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c1_c0[0].x;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c1_c0[0].y;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c1_c0[0].z;
        {
            vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c1_c0[0].w;
        {
            vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c1_c0[1].x;
        {
            vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c1_c0[1].y;
        {
            vec2 origCoord = coord + vec2(5.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c1_c0[1].z;
        {
            vec2 origCoord = coord + vec2(6.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c1_c0[1].w;
        {
            vec2 origCoord = coord + vec2(7.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c1_c0[2].x;
        {
            vec2 origCoord = coord + vec2(8.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c1_c0[2].y;
        {
            vec2 origCoord = coord + vec2(9.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c1_c0[2].z;
        {
            vec2 origCoord = coord + vec2(10.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c1_c0[2].w;
        {
            vec2 origCoord = coord + vec2(11.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c1_c0[3].x;
        {
            vec2 origCoord = coord + vec2(12.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c1_c0[3].y;
        {
            vec2 origCoord = coord + vec2(13.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c1_c0[3].z;
        {
            vec2 origCoord = coord + vec2(14.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c1_c0[3].w;
        {
            vec2 origCoord = coord + vec2(15.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
            vec2 clampedCoord;
            clampedCoord = origCoord;
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            c = textureColor;
        }
        sum += c * k;
    }
    _output = sum * uGain_Stage1_c0_c0_c0_c0_c1_c0 + uBias_Stage1_c0_c0_c0_c0_c1_c0;
    _output.w = clamp(_output.w, 0.0, 1.0);
    _output.xyz = clamp(_output.xyz, 0.0, _output.w);
    _output *= _input;
    return _output;
}
vec4 blend_screen(vec4 src, vec4 dst) {
    return src + (1.0 - src) * dst;
}
vec4 ComposeTwo_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_screen(RRectBlurEffect_Stage1_c0_c0_c0_c0_c0_c0(inputColor), MatrixConvolution_Stage1_c0_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 light_Stage1_c0_c0_c1_c0_c0_c0(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    vec3 halfDir = normalize(surfaceToLight + vec3(0.0, 0.0, 1.0));
    float colorScale = uKS_Stage1_c0_c0_c1_c0_c0_c0 * pow(dot(normal, halfDir), uShininess_Stage1_c0_c0_c1_c0_c0_c0);
    vec3 color = lightColor * clamp(colorScale, 0.0, 1.0);
    return vec4(color, max(max(color.x, color.y), color.z));
}
float sobel_Stage1_c0_c0_c1_c0_c0_c0(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage1_c0_c0_c1_c0_c0_c0(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage1_c0_c0_c1_c0_c0_c0(float m[9], float surfaceScale) {
    return pointToNormal_Stage1_c0_c0_c1_c0_c0_c0(sobel_Stage1_c0_c0_c1_c0_c0_c0(0.0, 0.0, m[3], m[5], m[6], m[8], 0.33333298563957214), sobel_Stage1_c0_c0_c1_c0_c0_c0(0.0, 0.0, m[4], m[7], m[5], m[8], 0.5), surfaceScale);
}
vec4 SpecularLighting_Stage1_c0_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_1_Stage0;
    float m[9];
    vec4 temp0;
    {
        vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c1_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c1_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[0] = temp0.w;
    vec4 temp1;
    {
        vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c1_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c1_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[1] = temp1.w;
    vec4 temp2;
    {
        vec2 origCoord = coord + uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c1_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c1_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[2] = temp2.w;
    vec4 temp3;
    {
        vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c1_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c1_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[3] = temp3.w;
    vec4 temp4;
    {
        vec2 origCoord = coord;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c1_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c1_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[4] = temp4.w;
    vec4 temp5;
    {
        vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c1_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c1_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[5] = temp5.w;
    vec4 temp6;
    {
        vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c1_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c1_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[6] = temp6.w;
    vec4 temp7;
    {
        vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c1_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c1_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[7] = temp7.w;
    vec4 temp8;
    {
        vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c1_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c1_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c1_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[8] = temp8.w;
    vec3 surfaceToLight = normalize(uLightLocation_Stage1_c0_c0_c1_c0_c0_c0 - vec3(gl_FragCoord.xy, uSurfaceScale_Stage1_c0_c0_c1_c0_c0_c0 * m[4]));
    _output = light_Stage1_c0_c0_c1_c0_c0_c0(normal_Stage1_c0_c0_c1_c0_c0_c0(m, uSurfaceScale_Stage1_c0_c0_c1_c0_c0_c0), surfaceToLight, uLightColor_Stage1_c0_c0_c1_c0_c0_c0);
    _output *= _input;
    return _output;
}
vec4 Morphology_Stage1_c0_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_2_Stage0;
    coord.y -= uPixelSize_Stage1_c0_c0_c1_c0_c1_c0;
    for (int i = 0;i < 3; i++) {
        _output = max(_output, texture(uTextureSampler_3_Stage1, coord));
        coord.y += uPixelSize_Stage1_c0_c0_c1_c0_c1_c0;
    }
    _output *= _input;
    return _output;
}
vec4 blend_xor(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + (1.0 - src.w) * dst;
}
vec4 ComposeTwo_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_xor(SpecularLighting_Stage1_c0_c0_c1_c0_c0_c0(inputColor), Morphology_Stage1_c0_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_src_out(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src;
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_out(ComposeTwo_Stage1_c0_c0_c0_c0(inputColor), ComposeTwo_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 Overdraw_Stage1_c1_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    _output = _input;
    float alpha = 255.0 * _output.w;
    if (alpha < 0.5) {
        _output = ucolor0_Stage1_c1_c0_c0_c0_c0_c0;
    } else if (alpha < 1.5) {
        _output = ucolor1_Stage1_c1_c0_c0_c0_c0_c0;
    } else if (alpha < 2.5) {
        _output = ucolor2_Stage1_c1_c0_c0_c0_c0_c0;
    } else if (alpha < 3.5) {
        _output = ucolor3_Stage1_c1_c0_c0_c0_c0_c0;
    } else if (alpha < 4.5) {
        _output = ucolor4_Stage1_c1_c0_c0_c0_c0_c0;
    } else {
        _output = ucolor5_Stage1_c1_c0_c0_c0_c0_c0;
    }
    return _output;
}
vec4 light_Stage1_c1_c0_c0_c0_c1_c0(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    vec3 halfDir = normalize(surfaceToLight + vec3(0.0, 0.0, 1.0));
    float colorScale = uKS_Stage1_c1_c0_c0_c0_c1_c0 * pow(dot(normal, halfDir), uShininess_Stage1_c1_c0_c0_c0_c1_c0);
    vec3 color = lightColor * clamp(colorScale, 0.0, 1.0);
    return vec4(color, max(max(color.x, color.y), color.z));
}
float sobel_Stage1_c1_c0_c0_c0_c1_c0(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage1_c1_c0_c0_c0_c1_c0(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage1_c1_c0_c0_c0_c1_c0(float m[9], float surfaceScale) {
    return pointToNormal_Stage1_c1_c0_c0_c0_c1_c0(sobel_Stage1_c1_c0_c0_c0_c1_c0(m[0], m[2], m[3], m[5], 0.0, 0.0, 0.33333298563957214), sobel_Stage1_c1_c0_c0_c0_c1_c0(m[0], m[3], m[1], m[4], m[2], m[5], 0.5), surfaceScale);
}
vec4 SpecularLighting_Stage1_c1_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_4_Stage0;
    float m[9];
    vec4 temp0;
    {
        vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[0] = temp0.w;
    vec4 temp1;
    {
        vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[1] = temp1.w;
    vec4 temp2;
    {
        vec2 origCoord = coord + uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[2] = temp2.w;
    vec4 temp3;
    {
        vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[3] = temp3.w;
    vec4 temp4;
    {
        vec2 origCoord = coord;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[4] = temp4.w;
    vec4 temp5;
    {
        vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[5] = temp5.w;
    vec4 temp6;
    {
        vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[6] = temp6.w;
    vec4 temp7;
    {
        vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[7] = temp7.w;
    vec4 temp8;
    {
        vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_4_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[8] = temp8.w;
    vec3 surfaceToLight = uLightDirection_Stage1_c1_c0_c0_c0_c1_c0;
    _output = light_Stage1_c1_c0_c0_c0_c1_c0(normal_Stage1_c1_c0_c0_c0_c1_c0(m, uSurfaceScale_Stage1_c1_c0_c0_c0_c1_c0), surfaceToLight, uLightColor_Stage1_c1_c0_c0_c0_c1_c0);
    _output *= _input;
    return _output;
}
vec4 ComposeTwo_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_out(Overdraw_Stage1_c1_c0_c0_c0_c0_c0(inputColor), SpecularLighting_Stage1_c1_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 Dither_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = _input;
    float value;
    {
        uint x = uint(vTransformedCoords_5_Stage0.x);
        uint y = uint(vTransformedCoords_5_Stage0.y);
        uint m = (((((y & 1u) << 5u | (x & 1u) << 4u) | (y & 2u) << 2u) | (x & 2u) << 1u) | (y & 4u) >> 1u) | (x & 4u) >> 2u;
        value = float(m) / 64.0 - 0.4921875;
    }
    _output = vec4(clamp(_output.xyz + value * 0.0039215688593685627, 0.0, _output.w), _output.w);
    return _output;
}
vec4 blend_src_over(vec4 src, vec4 dst) {
    return src + (1.0 - src.w) * dst;
}
vec4 blend_lighten(vec4 src, vec4 dst) {
    vec4 result = blend_src_over(src, dst);
    result.xyz = max(result.xyz, (1.0 - dst.w) * src.xyz + dst.xyz);
    return result;
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_lighten(ComposeTwo_Stage1_c1_c0_c0_c0(inputColor), Dither_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_lighten(ComposeTwo_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
uniform mat3 uCoordTransformMatrix_4_Stage0;
uniform mat3 uCoordTransformMatrix_5_Stage0;
in vec2 inPosition;
in vec4 inColor;
noperspective out vec4 vcolor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vTransformedCoords_3_Stage0;
noperspective out vec2 vTransformedCoords_4_Stage0;
noperspective out vec2 vTransformedCoords_5_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_4_Stage0 = (uCoordTransformMatrix_4_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_5_Stage0 = (uCoordTransformMatrix_5_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

