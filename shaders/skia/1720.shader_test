[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform vec4 ucircle_Stage2_c0_c0;
uniform float uinnerThreshold_Stage2_c1_c0;
uniform float uouterThreshold_Stage2_c1_c0;
uniform vec4 urectH_Stage3;
uniform float uinvSixSigma_Stage3;
uniform vec4 ucolor_Stage4_c2_c0;
uniform float uPixelSize_Stage5;
uniform vec2 uRange_Stage5;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
uniform sampler2D uTextureSampler_0_Stage3;
uniform sampler2D uTextureSampler_0_Stage5;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
vec4 CircleEffect_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    float d;
    {
        d = (length((ucircle_Stage2_c0_c0.xy - gl_FragCoord.xy) * ucircle_Stage2_c0_c0.w) - 1.0) * ucircle_Stage2_c0_c0.z;
    }
    {
        _output = _input * clamp(d, 0.0, 1.0);
    }
    return _output;
}
vec4 AlphaThresholdFragmentProcessor_Stage2_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 color = _input;
    vec4 mask_color = texture(uTextureSampler_0_Stage2, vTransformedCoords_0_Stage0);
    if (mask_color.w < 0.5) {
        if (color.w > uouterThreshold_Stage2_c1_c0) {
            float scale = uouterThreshold_Stage2_c1_c0 / color.w;
            color.xyz *= scale;
            color.w = uouterThreshold_Stage2_c1_c0;
        }
    } else if (color.w < uinnerThreshold_Stage2_c1_c0) {
        float scale = uinnerThreshold_Stage2_c1_c0 / max(0.0010000000474974513, color.w);
        color.xyz *= scale;
        color.w = uinnerThreshold_Stage2_c1_c0;
    }
    _output = color;
    return _output;
}
vec4 ConstColorProcessor_Stage4_c2_c0(vec4 _input) {
    vec4 _output;
    {
        _output = _input.w * ucolor_Stage4_c2_c0;
    }
    return _output;
}
vec4 blend_xor(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + (1.0 - src.w) * dst;
}
vec4 blend_src_atop(vec4 src, vec4 dst) {
    return dst.w * src + (1.0 - src.w) * dst;
}
void main() {
    vec4 output_Stage1;
    {
        float nonZeroAlpha = max(1.0, 9.9999997473787516e-05);
        vec4 coord = vec4(vec4(1.0).xyz / nonZeroAlpha, nonZeroAlpha);
        coord = coord * 0.9960939884185791 + vec4(0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579);
        output_Stage1.w = texture(uTextureSampler_0_Stage1, vec2(coord.w, 0.125)).w;
        output_Stage1.x = texture(uTextureSampler_0_Stage1, vec2(coord.x, 0.375)).w;
        output_Stage1.y = texture(uTextureSampler_0_Stage1, vec2(coord.y, 0.625)).w;
        output_Stage1.z = texture(uTextureSampler_0_Stage1, vec2(coord.z, 0.875)).w;
        output_Stage1.xyz *= output_Stage1.w;
    }
    vec4 output_Stage2;
    {
        vec4 inputColor = vec4(output_Stage1.xyz, 1.0);
        output_Stage2 = blend_xor(CircleEffect_Stage2_c0_c0(inputColor), AlphaThresholdFragmentProcessor_Stage2_c1_c0(inputColor));
        output_Stage2 *= output_Stage1.w;
    }
    vec4 output_Stage3;
    {
        float xCoverage, yCoverage;
        {
            float x, y;
            {
                x = max(urectH_Stage3.x - gl_FragCoord.x, gl_FragCoord.x - urectH_Stage3.z);
                y = max(urectH_Stage3.y - gl_FragCoord.y, gl_FragCoord.y - urectH_Stage3.w);
            }
            xCoverage = texture(uTextureSampler_0_Stage3, vec2(x * uinvSixSigma_Stage3, 0.5)).w;
            yCoverage = texture(uTextureSampler_0_Stage3, vec2(y * uinvSixSigma_Stage3, 0.5)).w;
            output_Stage3 = (output_Stage2 * xCoverage) * yCoverage;
        }
        output_Stage3 = (output_Stage2 * xCoverage) * yCoverage;
    }
    vec4 output_Stage4;
    {
        output_Stage4 = blend_src_atop(output_Stage3, ConstColorProcessor_Stage4_c2_c0(vec4(1.0)));
    }
    vec4 output_Stage5;
    {
        output_Stage5 = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_1_Stage0;
        coord.x -= 2.0 * uPixelSize_Stage5;
        for (int i = 0;i < 5; i++) {
            output_Stage5 = max(output_Stage5, texture(uTextureSampler_0_Stage5, coord));
            coord.x += uPixelSize_Stage5;
        }
        output_Stage5 *= output_Stage4;
    }
    {
        sk_FragColor = 1.0 - output_Stage5;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 inPosition;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

