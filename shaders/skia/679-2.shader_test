[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec2 uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec2 uBounds_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec4 uKernel_Stage1_c0_c0_c0_c0_c1_c0[4];
uniform vec4 uellipse_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec4 urectUniform_Stage1_c0_c0_c1_c0_c1_c0;
uniform vec2 uScale_Stage1_c1_c0_c0_c0;
uniform vec4 uTexDom_Stage1_c1_c0_c0_c0;
uniform vec3 uDecalParams_Stage1_c1_c0_c0_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
uniform sampler2D uTextureSampler_3_Stage1;
noperspective in vec4 vinCircleEdge_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
vec4 ColorTableEffect_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float nonZeroAlpha = max(_input.w, 9.9999997473787516e-05);
    vec4 coord = vec4(_input.xyz / nonZeroAlpha, nonZeroAlpha);
    coord = coord * 0.9960939884185791 + vec4(0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579);
    _output.w = texture(uTextureSampler_0_Stage1, vec2(coord.w, 0.125)).w;
    _output.x = texture(uTextureSampler_0_Stage1, vec2(coord.x, 0.375)).w;
    _output.y = texture(uTextureSampler_0_Stage1, vec2(coord.y, 0.625)).w;
    _output.z = texture(uTextureSampler_0_Stage1, vec2(coord.z, 0.875)).w;
    _output.xyz *= _output.w;
    return _output;
}
vec4 GaussianConvolution_Stage1_c0_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_0_Stage0 - 6.0 * uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    vec2 coordSampled = vec2(0.0, 0.0);
    coordSampled = coord;
    if (coord.y >= uBounds_Stage1_c0_c0_c0_c0_c1_c0.x && coord.y <= uBounds_Stage1_c0_c0_c0_c0_c1_c0.y) {
        _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[0].x;
    }
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    if (coord.y >= uBounds_Stage1_c0_c0_c0_c0_c1_c0.x && coord.y <= uBounds_Stage1_c0_c0_c0_c0_c1_c0.y) {
        _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[0].y;
    }
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    if (coord.y >= uBounds_Stage1_c0_c0_c0_c0_c1_c0.x && coord.y <= uBounds_Stage1_c0_c0_c0_c0_c1_c0.y) {
        _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[0].z;
    }
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    if (coord.y >= uBounds_Stage1_c0_c0_c0_c0_c1_c0.x && coord.y <= uBounds_Stage1_c0_c0_c0_c0_c1_c0.y) {
        _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[0].w;
    }
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    if (coord.y >= uBounds_Stage1_c0_c0_c0_c0_c1_c0.x && coord.y <= uBounds_Stage1_c0_c0_c0_c0_c1_c0.y) {
        _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[1].x;
    }
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    if (coord.y >= uBounds_Stage1_c0_c0_c0_c0_c1_c0.x && coord.y <= uBounds_Stage1_c0_c0_c0_c0_c1_c0.y) {
        _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[1].y;
    }
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    if (coord.y >= uBounds_Stage1_c0_c0_c0_c0_c1_c0.x && coord.y <= uBounds_Stage1_c0_c0_c0_c0_c1_c0.y) {
        _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[1].z;
    }
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    if (coord.y >= uBounds_Stage1_c0_c0_c0_c0_c1_c0.x && coord.y <= uBounds_Stage1_c0_c0_c0_c0_c1_c0.y) {
        _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[1].w;
    }
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    if (coord.y >= uBounds_Stage1_c0_c0_c0_c0_c1_c0.x && coord.y <= uBounds_Stage1_c0_c0_c0_c0_c1_c0.y) {
        _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[2].x;
    }
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    if (coord.y >= uBounds_Stage1_c0_c0_c0_c0_c1_c0.x && coord.y <= uBounds_Stage1_c0_c0_c0_c0_c1_c0.y) {
        _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[2].y;
    }
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    if (coord.y >= uBounds_Stage1_c0_c0_c0_c0_c1_c0.x && coord.y <= uBounds_Stage1_c0_c0_c0_c0_c1_c0.y) {
        _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[2].z;
    }
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    if (coord.y >= uBounds_Stage1_c0_c0_c0_c0_c1_c0.x && coord.y <= uBounds_Stage1_c0_c0_c0_c0_c1_c0.y) {
        _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[2].w;
    }
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    coordSampled = coord;
    if (coord.y >= uBounds_Stage1_c0_c0_c0_c0_c1_c0.x && coord.y <= uBounds_Stage1_c0_c0_c0_c0_c1_c0.y) {
        _output += texture(uTextureSampler_1_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c0_c0_c1_c0[3].x;
    }
    coord += uImageIncrement_Stage1_c0_c0_c0_c0_c1_c0;
    _output *= _input;
    return _output;
}
float _guarded_divide(float n, float d) {
    return n / d;
}
float _color_dodge_component(float sc, float sa, float dc, float da) {
    if (dc == 0.0) {
        return sc * (1.0 - da);
    } else {
        float d = sa - sc;
        if (d == 0.0) {
            return (sa * da + sc * (1.0 - da)) + dc * (1.0 - sa);
        }
        d = min(da, _guarded_divide(dc * sa, d));
        return (d * sa + sc * (1.0 - da)) + dc * (1.0 - sa);
    }
}
vec4 blend_color_dodge(vec4 src, vec4 dst) {
    return vec4(_color_dodge_component(src.x, src.w, dst.x, dst.w), _color_dodge_component(src.y, src.w, dst.y, dst.w), _color_dodge_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_color_dodge(ColorTableEffect_Stage1_c0_c0_c0_c0_c0_c0(inputColor), GaussianConvolution_Stage1_c0_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 EllipseEffect_Stage1_c0_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 d = gl_FragCoord.xy - uellipse_Stage1_c0_c0_c1_c0_c0_c0.xy;
    vec2 Z = d * uellipse_Stage1_c0_c0_c1_c0_c0_c0.zw;
    float implicit = dot(Z, d) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    {
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
    }
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha;
    {
        alpha = clamp(0.5 - approx_dist, 0.0, 1.0);
    }
    _output = _input * alpha;
    return _output;
}
vec4 AARectEffect_Stage1_c0_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float alpha;
    {
        float xSub, ySub;
        xSub = min(gl_FragCoord.x - urectUniform_Stage1_c0_c0_c1_c0_c1_c0.x, 0.0);
        xSub += min(urectUniform_Stage1_c0_c0_c1_c0_c1_c0.z - gl_FragCoord.x, 0.0);
        ySub = min(gl_FragCoord.y - urectUniform_Stage1_c0_c0_c1_c0_c1_c0.y, 0.0);
        ySub += min(urectUniform_Stage1_c0_c0_c1_c0_c1_c0.w - gl_FragCoord.y, 0.0);
        alpha = (1.0 + max(xSub, -1.0)) * (1.0 + max(ySub, -1.0));
    }
    {
        alpha = 1.0 - alpha;
    }
    _output = _input * alpha;
    return _output;
}
vec4 blend_src_out(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src;
}
vec4 ComposeTwo_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_out(EllipseEffect_Stage1_c0_c0_c1_c0_c0_c0(inputColor), AARectEffect_Stage1_c0_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
float _blend_color_saturation(vec3 color) {
    return max(max(color.x, color.y), color.z) - min(min(color.x, color.y), color.z);
}
vec3 _blend_set_color_saturation_helper(vec3 minMidMax, float sat) {
    if (minMidMax.x < minMidMax.z) {
        return vec3(0.0, (sat * (minMidMax.y - minMidMax.x)) / (minMidMax.z - minMidMax.x), sat);
    }
    return vec3(0.0);
}
vec3 _blend_set_color_saturation(vec3 hueLumColor, vec3 satColor) {
    float sat = _blend_color_saturation(satColor);
    if (hueLumColor.x <= hueLumColor.y) {
        if (hueLumColor.y <= hueLumColor.z) {
            hueLumColor.xyz = _blend_set_color_saturation_helper(hueLumColor, sat);
        } else if (hueLumColor.x <= hueLumColor.z) {
            hueLumColor.xzy = _blend_set_color_saturation_helper(hueLumColor.xzy, sat);
        } else {
            hueLumColor.zxy = _blend_set_color_saturation_helper(hueLumColor.zxy, sat);
        }
    } else if (hueLumColor.x <= hueLumColor.z) {
        hueLumColor.yxz = _blend_set_color_saturation_helper(hueLumColor.yxz, sat);
    } else if (hueLumColor.y <= hueLumColor.z) {
        hueLumColor.yzx = _blend_set_color_saturation_helper(hueLumColor.yzx, sat);
    } else {
        hueLumColor.zyx = _blend_set_color_saturation_helper(hueLumColor.zyx, sat);
    }
    return hueLumColor;
}
float _blend_color_luminance(vec3 color) {
    return dot(vec3(0.30000001192092896, 0.5899999737739563, 0.10999999940395355), color);
}
vec3 _blend_set_color_luminance(vec3 hueSatColor, float alpha, vec3 lumColor) {
    float lum = _blend_color_luminance(lumColor);
    vec3 result = (lum - _blend_color_luminance(hueSatColor)) + hueSatColor;
    float minComp = min(min(result.x, result.y), result.z);
    float maxComp = max(max(result.x, result.y), result.z);
    if (minComp < 0.0 && lum != minComp) {
        result = lum + ((result - lum) * lum) / (lum - minComp);
    }
    if (maxComp > alpha && maxComp != lum) {
        return lum + ((result - lum) * (alpha - lum)) / (maxComp - lum);
    }
    return result;
}
vec4 blend_saturation(vec4 src, vec4 dst) {
    float alpha = dst.w * src.w;
    vec3 sda = src.xyz * dst.w;
    vec3 dsa = dst.xyz * src.w;
    return vec4((((_blend_set_color_luminance(_blend_set_color_saturation(dsa, sda), alpha, dsa) + dst.xyz) - dsa) + src.xyz) - sda, (src.w + dst.w) - alpha);
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_saturation(ComposeTwo_Stage1_c0_c0_c0_c0(inputColor), ComposeTwo_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 DisplacementMap_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 dColor = texture(uTextureSampler_2_Stage1, vTransformedCoords_1_Stage0);
    dColor.xyz = dColor.w < 9.9999999747524271e-07 ? vec3(0.0) : clamp(dColor.xyz / dColor.w, 0.0, 1.0);
    vec2 cCoords = vTransformedCoords_2_Stage0 + uScale_Stage1_c1_c0_c0_c0 * (dColor.zw - vec2(0.5));
    {
        vec2 origCoord = cCoords;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_3_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        _output = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    return _output;
}
vec4 ClampFragmentProcessor_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    {
        float alpha = clamp(_input.w, 0.0, 1.0);
        _output = vec4(clamp(_input.xyz, 0.0, alpha), alpha);
    }
    return _output;
}
vec4 blend_dst_atop(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + src.w * dst;
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_dst_atop(DisplacementMap_Stage1_c1_c0_c0_c0(inputColor), ClampFragmentProcessor_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_src_over(vec4 src, vec4 dst) {
    return src + (1.0 - src.w) * dst;
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        vec4 circleEdge;
        circleEdge = vinCircleEdge_Stage0;
        outputColor_Stage0 = vinColor_Stage0;
        float d = length(circleEdge.xy);
        float distanceToOuterEdge = circleEdge.z * (1.0 - d);
        float edgeAlpha = clamp(distanceToOuterEdge, 0.0, 1.0);
        float distanceToInnerEdge = circleEdge.z * (d - circleEdge.w);
        float innerAlpha = clamp(distanceToInnerEdge, 0.0, 1.0);
        edgeAlpha *= innerAlpha;
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_src_over(ComposeTwo_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = (vec4(1.0) - output_Stage1) * outputCoverage_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec4 inCircleEdge;
noperspective out vec4 vinCircleEdge_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
void main() {
    vinCircleEdge_Stage0 = inCircleEdge;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

