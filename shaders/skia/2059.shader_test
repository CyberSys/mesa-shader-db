[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uleftBorderColor_Stage1_c0_c0;
uniform vec4 urightBorderColor_Stage1_c0_c0;
uniform vec4 ustart_Stage1_c0_c0_c1_c0;
uniform vec4 uend_Stage1_c0_c0_c1_c0;
uniform float uPixelSize_Stage3;
uniform vec2 uRange_Stage3;
uniform sampler2D uTextureSampler_0_Stage3;
noperspective in vec2 vEllipseOffsets_Stage0;
noperspective in vec4 vEllipseRadii_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
vec4 LinearGradientLayout_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float t = vTransformedCoords_0_Stage0.x + 9.9999997473787516e-06;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 SingleIntervalGradientColorizer_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    _output = (1.0 - t) * ustart_Stage1_c0_c0_c1_c0 + t * uend_Stage1_c0_c0_c1_c0;
    return _output;
}
vec4 ClampedGradientEffect_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = LinearGradientLayout_Stage1_c0_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage1_c0_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage1_c0_c0;
    } else {
        _output = SingleIntervalGradientColorizer_Stage1_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputCoverage_Stage0;
    {
        vec2 offset = vEllipseOffsets_Stage0;
        float test = dot(offset, offset) - 1.0;
        vec2 grad = (2.0 * offset) * vEllipseRadii_Stage0.xy;
        float grad_dot = dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        output_Stage1 = blend_dst_in(outputCoverage_Stage0, ClampedGradientEffect_Stage1_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage2;
    {
        {
            output_Stage2 = clamp(output_Stage1, 0.0, 1.0);
        }
    }
    vec4 output_Stage3;
    {
        output_Stage3 = vec4(1.0, 1.0, 1.0, 1.0);
        vec2 coord = vTransformedCoords_1_Stage0;
        coord.y -= 8.0 * uPixelSize_Stage3;
        for (int i = 0;i < 17; i++) {
            output_Stage3 = min(output_Stage3, texture(uTextureSampler_0_Stage3, coord));
            coord.y += uPixelSize_Stage3;
        }
        output_Stage3 *= output_Stage2;
    }
    {
        sk_FragColor = output_Stage3;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffset;
in vec4 inEllipseRadii;
noperspective out vec2 vEllipseOffsets_Stage0;
noperspective out vec4 vEllipseRadii_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vEllipseOffsets_Stage0 = inEllipseOffset;
    vEllipseRadii_Stage0 = inEllipseRadii;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

