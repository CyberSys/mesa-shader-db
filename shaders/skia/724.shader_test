[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 uleftBorderColor_Stage2_c0_c0;
uniform vec4 urightBorderColor_Stage2_c0_c0;
uniform vec4 uscale0_1_Stage2_c0_c0_c1_c0;
uniform vec4 uscale2_3_Stage2_c0_c0_c1_c0;
uniform vec4 uscale4_5_Stage2_c0_c0_c1_c0;
uniform vec4 uscale6_7_Stage2_c0_c0_c1_c0;
uniform vec4 uscale8_9_Stage2_c0_c0_c1_c0;
uniform vec4 ubias0_1_Stage2_c0_c0_c1_c0;
uniform vec4 ubias2_3_Stage2_c0_c0_c1_c0;
uniform vec4 ubias4_5_Stage2_c0_c0_c1_c0;
uniform vec4 ubias6_7_Stage2_c0_c0_c1_c0;
uniform vec4 ubias8_9_Stage2_c0_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage2_c0_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage2_c0_c0_c1_c0;
uniform vec4 ucircleData_Stage3;
uniform vec3 uedges_Stage4_c1_c0[7];
uniform vec2 uImageIncrement_Stage5;
uniform float uSurfaceScale_Stage5;
uniform vec3 uLightColor_Stage5;
uniform float uKS_Stage5;
uniform float uShininess_Stage5;
uniform vec4 uTexDom_Stage5;
uniform vec3 uDecalParams_Stage5;
uniform vec3 uLightDirection_Stage5;
uniform sampler2D uTextureSampler_0_Stage3;
uniform sampler2D uTextureSampler_0_Stage5;
noperspective in vec2 vEllipseOffsets0_Stage0;
noperspective in vec2 vEllipseOffsets1_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
vec4 RadialGradientLayout_Stage2_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float t = length(vTransformedCoords_0_Stage0);
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage2_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.w) {
        if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.x) {
                scale = uscale0_1_Stage2_c0_c0_c1_c0;
                bias = ubias0_1_Stage2_c0_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage2_c0_c0_c1_c0;
                bias = ubias2_3_Stage2_c0_c0_c1_c0;
            }
        } else {
            if (t < uthresholds1_7_Stage2_c0_c0_c1_c0.z) {
                scale = uscale4_5_Stage2_c0_c0_c1_c0;
                bias = ubias4_5_Stage2_c0_c0_c1_c0;
            } else {
                scale = uscale6_7_Stage2_c0_c0_c1_c0;
                bias = ubias6_7_Stage2_c0_c0_c1_c0;
            }
        }
    } else {
        {
            {
                scale = uscale8_9_Stage2_c0_c0_c1_c0;
                bias = ubias8_9_Stage2_c0_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 ClampedGradientEffect_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = RadialGradientLayout_Stage2_c0_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage2_c0_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage2_c0_c0;
    } else {
        _output = UnrolledBinaryGradientColorizer_Stage2_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 ConvexPoly_Stage4_c1_c0(vec4 _input) {
    vec4 _output;
    float alpha = 1.0;
    float edge;
    edge = dot(uedges_Stage4_c1_c0[0], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage4_c1_c0[1], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage4_c1_c0[2], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage4_c1_c0[3], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage4_c1_c0[4], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage4_c1_c0[5], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage4_c1_c0[6], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    _output = _input * alpha;
    return _output;
}
vec4 light_Stage5(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    vec3 halfDir = normalize(surfaceToLight + vec3(0.0, 0.0, 1.0));
    float colorScale = uKS_Stage5 * pow(dot(normal, halfDir), uShininess_Stage5);
    vec3 color = lightColor * clamp(colorScale, 0.0, 1.0);
    return vec4(color, max(max(color.x, color.y), color.z));
}
float sobel_Stage5(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage5(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage5(float m[9], float surfaceScale) {
    return pointToNormal_Stage5(sobel_Stage5(0.0, 0.0, m[3], m[5], m[6], m[8], 0.33333298563957214), sobel_Stage5(0.0, 0.0, m[4], m[7], m[5], m[8], 0.5), surfaceScale);
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
vec4 blend_dst_out(vec4 src, vec4 dst) {
    return (1.0 - src.w) * dst;
}
void main() {
    vec4 outputCoverage_Stage0;
    {
        vec2 scaledOffset = vEllipseOffsets0_Stage0;
        float test = dot(scaledOffset, scaledOffset) - 1.0;
        vec2 duvdx = dFdx(vEllipseOffsets0_Stage0);
        vec2 duvdy = -dFdy(vEllipseOffsets0_Stage0);
        vec2 grad = vec2(vEllipseOffsets0_Stage0.x * duvdx.x + vEllipseOffsets0_Stage0.y * duvdx.y, vEllipseOffsets0_Stage0.x * duvdy.x + vEllipseOffsets0_Stage0.y * duvdy.y);
        float grad_dot = 4.0 * dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        output_Stage1 = floor(outputCoverage_Stage0 * 255.0 + 0.5) / 255.0;
        {
            output_Stage1.xyz = floor((output_Stage1.xyz * output_Stage1.w) * 255.0 + 0.5) / 255.0;
        }
    }
    vec4 output_Stage2;
    {
        output_Stage2 = blend_dst_in(output_Stage1, ClampedGradientEffect_Stage2_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage3;
    {
        vec2 vec = vec2((gl_FragCoord.x - ucircleData_Stage3.x) * ucircleData_Stage3.w, (gl_FragCoord.y - ucircleData_Stage3.y) * ucircleData_Stage3.w);
        float dist = length(vec) + (0.5 - ucircleData_Stage3.z) * ucircleData_Stage3.w;
        output_Stage3 = output_Stage2 * texture(uTextureSampler_0_Stage3, vec2(dist, 0.5)).w;
    }
    vec4 output_Stage4;
    {
        output_Stage4 = blend_dst_out(output_Stage3, ConvexPoly_Stage4_c1_c0(vec4(1.0)));
    }
    vec4 output_Stage5;
    {
        vec2 coord = vTransformedCoords_1_Stage0;
        float m[9];
        vec4 temp0;
        {
            vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[0] = temp0.w;
        vec4 temp1;
        {
            vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[1] = temp1.w;
        vec4 temp2;
        {
            vec2 origCoord = coord + uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[2] = temp2.w;
        vec4 temp3;
        {
            vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[3] = temp3.w;
        vec4 temp4;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[4] = temp4.w;
        vec4 temp5;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[5] = temp5.w;
        vec4 temp6;
        {
            vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[6] = temp6.w;
        vec4 temp7;
        {
            vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[7] = temp7.w;
        vec4 temp8;
        {
            vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage5;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage5.xy, uTexDom_Stage5.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage5, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage5.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage5.y);
            if (err > uDecalParams_Stage5.z) {
                err = 1.0;
            } else if (uDecalParams_Stage5.z < 1.0) {
                err = 0.0;
            }
            temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[8] = temp8.w;
        vec3 surfaceToLight = uLightDirection_Stage5;
        output_Stage5 = light_Stage5(normal_Stage5(m, uSurfaceScale_Stage5), surfaceToLight, uLightColor_Stage5);
        output_Stage5 *= output_Stage4;
    }
    {
        sk_FragColor = vec4(0.0);
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffsets0;
in vec2 inEllipseOffsets1;
noperspective out vec2 vEllipseOffsets0_Stage0;
noperspective out vec2 vEllipseOffsets1_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
void main() {
    vEllipseOffsets0_Stage0 = inEllipseOffsets0;
    vEllipseOffsets1_Stage0 = inEllipseOffsets1;
    vinColor_Stage0 = inColor;
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

