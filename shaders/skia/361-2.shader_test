[require]
GLSL >= 1.40
GL_KHR_blend_equation_advanced

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uleftBorderColor_Stage2_c0_c0;
uniform vec4 urightBorderColor_Stage2_c0_c0;
uniform float ubias_Stage2_c0_c0_c0_c0;
uniform float uscale_Stage2_c0_c0_c0_c0;
uniform vec4 uscale01_Stage2_c0_c0_c1_c0;
uniform vec4 ubias01_Stage2_c0_c0_c1_c0;
uniform vec4 uscale23_Stage2_c0_c0_c1_c0;
uniform vec4 ubias23_Stage2_c0_c0_c1_c0;
uniform float uthreshold_Stage2_c0_c0_c1_c0;
uniform vec4 uleftBorderColor_Stage3_c1_c0;
uniform vec4 urightBorderColor_Stage3_c1_c0;
uniform vec4 uscale0_1_Stage3_c1_c0_c1_c0;
uniform vec4 uscale2_3_Stage3_c1_c0_c1_c0;
uniform vec4 uscale4_5_Stage3_c1_c0_c1_c0;
uniform vec4 ubias0_1_Stage3_c1_c0_c1_c0;
uniform vec4 ubias2_3_Stage3_c1_c0_c1_c0;
uniform vec4 ubias4_5_Stage3_c1_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage3_c1_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage3_c1_c0_c1_c0;
uniform vec2 uImageIncrement_Stage4;
uniform vec2 uBounds_Stage4;
uniform vec4 uKernel_Stage4[5];
uniform vec2 ubaseFrequency_Stage5;
uniform float uz_Stage5;
uniform vec4 uleftBorderColor_Stage6_c2_c0;
uniform vec4 urightBorderColor_Stage6_c2_c0;
uniform float ubias_Stage6_c2_c0_c0_c0;
uniform float uscale_Stage6_c2_c0_c0_c0;
uniform vec4 uscale0_1_Stage6_c2_c0_c1_c0;
uniform vec4 uscale2_3_Stage6_c2_c0_c1_c0;
uniform vec4 uscale4_5_Stage6_c2_c0_c1_c0;
uniform vec4 uscale6_7_Stage6_c2_c0_c1_c0;
uniform vec4 ubias0_1_Stage6_c2_c0_c1_c0;
uniform vec4 ubias2_3_Stage6_c2_c0_c1_c0;
uniform vec4 ubias4_5_Stage6_c2_c0_c1_c0;
uniform vec4 ubias6_7_Stage6_c2_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage6_c2_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage6_c2_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage4;
uniform sampler2D uTextureSampler_0_Stage5;
uniform sampler2D uTextureSampler_1_Stage5;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vTransformedCoords_3_Stage0;
noperspective in vec2 vTransformedCoords_4_Stage0;
flat in vec4 vcolor_Stage0;
vec4 SweepGradientLayout_Stage2_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float angle;
    {
        angle = atan(-vTransformedCoords_0_Stage0.y, -vTransformedCoords_0_Stage0.x);
    }
    float t = ((angle * 0.15915493667125702 + 0.5) + ubias_Stage2_c0_c0_c0_c0) * uscale_Stage2_c0_c0_c0_c0;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 DualIntervalGradientColorizer_Stage2_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    if (t < uthreshold_Stage2_c0_c0_c1_c0) {
        scale = uscale01_Stage2_c0_c0_c1_c0;
        bias = ubias01_Stage2_c0_c0_c1_c0;
    } else {
        scale = uscale23_Stage2_c0_c0_c1_c0;
        bias = ubias23_Stage2_c0_c0_c1_c0;
    }
    _output = t * scale + bias;
    return _output;
}
vec4 ClampedGradientEffect_Stage2_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = SweepGradientLayout_Stage2_c0_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage2_c0_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage2_c0_c0;
    } else {
        _output = DualIntervalGradientColorizer_Stage2_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 LinearGradientLayout_Stage3_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float t = vTransformedCoords_1_Stage0.x + 9.9999997473787516e-06;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage3_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage3_c1_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage3_c1_c0_c1_c0.x) {
                scale = uscale0_1_Stage3_c1_c0_c1_c0;
                bias = ubias0_1_Stage3_c1_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage3_c1_c0_c1_c0;
                bias = ubias2_3_Stage3_c1_c0_c1_c0;
            }
        } else {
            {
                scale = uscale4_5_Stage3_c1_c0_c1_c0;
                bias = ubias4_5_Stage3_c1_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 ClampedGradientEffect_Stage3_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 t = LinearGradientLayout_Stage3_c1_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage3_c1_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage3_c1_c0;
    } else {
        _output = UnrolledBinaryGradientColorizer_Stage3_c1_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec3 fade_Stage5(vec3 t) {
    return ((t * t) * t) * (t * (t * 6.0 - 15.0) + 10.0);
}
float perm_Stage5(float x) {
    return texture(uTextureSampler_0_Stage5, vec2(fract(x / 256.0), 0.0)).x * 255.0;
}
float grad_Stage5(float x, vec3 p) {
    return dot(texture(uTextureSampler_1_Stage5, vec2(fract(x / 16.0), 0.0)).xyz * 255.0 - vec3(1.0), p);
}
float lerp_Stage5(float a, float b, float w) {
    return a + w * (b - a);
}
float noise_Stage5(vec3 p) {
    vec3 P = mod(floor(p), 256.0);
    p -= floor(p);
    vec3 f = fade_Stage5(p);
    float A = perm_Stage5(P.x) + P.y;
    float AA = perm_Stage5(A) + P.z;
    float AB = perm_Stage5(A + 1.0) + P.z;
    float B = perm_Stage5(P.x + 1.0) + P.y;
    float BA = perm_Stage5(B) + P.z;
    float BB = perm_Stage5(B + 1.0) + P.z;
    float result = lerp_Stage5(lerp_Stage5(lerp_Stage5(grad_Stage5(perm_Stage5(AA), p), grad_Stage5(perm_Stage5(BA), p + vec3(-1.0, 0.0, 0.0)), f.x), lerp_Stage5(grad_Stage5(perm_Stage5(AB), p + vec3(0.0, -1.0, 0.0)), grad_Stage5(perm_Stage5(BB), p + vec3(-1.0, -1.0, 0.0)), f.x), f.y), lerp_Stage5(lerp_Stage5(grad_Stage5(perm_Stage5(AA + 1.0), p + vec3(0.0, 0.0, -1.0)), grad_Stage5(perm_Stage5(BA + 1.0), p + vec3(-1.0, 0.0, -1.0)), f.x), lerp_Stage5(grad_Stage5(perm_Stage5(AB + 1.0), p + vec3(0.0, -1.0, -1.0)), grad_Stage5(perm_Stage5(BB + 1.0), p + vec3(-1.0, -1.0, -1.0)), f.x), f.y), f.z);
    return result;
}
float noiseOctaves_Stage5(vec3 p) {
    float result = 0.0;
    float ratio = 1.0;
    for (float i = 0.0;i < 2.0; i++) {
        result += noise_Stage5(p) / ratio;
        p *= 2.0;
        ratio *= 2.0;
    }
    return (result + 1.0) / 2.0;
}
vec4 SweepGradientLayout_Stage6_c2_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float angle;
    {
        angle = atan(-vTransformedCoords_4_Stage0.y, -vTransformedCoords_4_Stage0.x);
    }
    float t = ((angle * 0.15915493667125702 + 0.5) + ubias_Stage6_c2_c0_c0_c0) * uscale_Stage6_c2_c0_c0_c0;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage6_c2_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage6_c2_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage6_c2_c0_c1_c0.x) {
                scale = uscale0_1_Stage6_c2_c0_c1_c0;
                bias = ubias0_1_Stage6_c2_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage6_c2_c0_c1_c0;
                bias = ubias2_3_Stage6_c2_c0_c1_c0;
            }
        } else {
            if (t < uthresholds1_7_Stage6_c2_c0_c1_c0.z) {
                scale = uscale4_5_Stage6_c2_c0_c1_c0;
                bias = ubias4_5_Stage6_c2_c0_c1_c0;
            } else {
                scale = uscale6_7_Stage6_c2_c0_c1_c0;
                bias = ubias6_7_Stage6_c2_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 ClampedGradientEffect_Stage6_c2_c0(vec4 _input) {
    vec4 _output;
    vec4 t = SweepGradientLayout_Stage6_c2_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage6_c2_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage6_c2_c0;
    } else {
        _output = UnrolledBinaryGradientColorizer_Stage6_c2_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
    }
    vec4 output_Stage2;
    {
        output_Stage2 = blend_dst_in(vec4(1.0), ClampedGradientEffect_Stage2_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage3;
    {
        output_Stage3 = blend_dst_in(output_Stage2, ClampedGradientEffect_Stage3_c1_c0(vec4(1.0)));
    }
    vec4 output_Stage4;
    {
        output_Stage4 = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_2_Stage0 - 9.0 * uImageIncrement_Stage4;
        vec2 coordSampled = vec2(0.0, 0.0);
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage4.x, uBounds_Stage4.y - uBounds_Stage4.x) + uBounds_Stage4.x;
        output_Stage4 += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4[0].x;
        coord += uImageIncrement_Stage4;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage4.x, uBounds_Stage4.y - uBounds_Stage4.x) + uBounds_Stage4.x;
        output_Stage4 += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4[0].y;
        coord += uImageIncrement_Stage4;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage4.x, uBounds_Stage4.y - uBounds_Stage4.x) + uBounds_Stage4.x;
        output_Stage4 += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4[0].z;
        coord += uImageIncrement_Stage4;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage4.x, uBounds_Stage4.y - uBounds_Stage4.x) + uBounds_Stage4.x;
        output_Stage4 += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4[0].w;
        coord += uImageIncrement_Stage4;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage4.x, uBounds_Stage4.y - uBounds_Stage4.x) + uBounds_Stage4.x;
        output_Stage4 += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4[1].x;
        coord += uImageIncrement_Stage4;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage4.x, uBounds_Stage4.y - uBounds_Stage4.x) + uBounds_Stage4.x;
        output_Stage4 += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4[1].y;
        coord += uImageIncrement_Stage4;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage4.x, uBounds_Stage4.y - uBounds_Stage4.x) + uBounds_Stage4.x;
        output_Stage4 += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4[1].z;
        coord += uImageIncrement_Stage4;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage4.x, uBounds_Stage4.y - uBounds_Stage4.x) + uBounds_Stage4.x;
        output_Stage4 += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4[1].w;
        coord += uImageIncrement_Stage4;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage4.x, uBounds_Stage4.y - uBounds_Stage4.x) + uBounds_Stage4.x;
        output_Stage4 += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4[2].x;
        coord += uImageIncrement_Stage4;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage4.x, uBounds_Stage4.y - uBounds_Stage4.x) + uBounds_Stage4.x;
        output_Stage4 += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4[2].y;
        coord += uImageIncrement_Stage4;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage4.x, uBounds_Stage4.y - uBounds_Stage4.x) + uBounds_Stage4.x;
        output_Stage4 += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4[2].z;
        coord += uImageIncrement_Stage4;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage4.x, uBounds_Stage4.y - uBounds_Stage4.x) + uBounds_Stage4.x;
        output_Stage4 += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4[2].w;
        coord += uImageIncrement_Stage4;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage4.x, uBounds_Stage4.y - uBounds_Stage4.x) + uBounds_Stage4.x;
        output_Stage4 += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4[3].x;
        coord += uImageIncrement_Stage4;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage4.x, uBounds_Stage4.y - uBounds_Stage4.x) + uBounds_Stage4.x;
        output_Stage4 += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4[3].y;
        coord += uImageIncrement_Stage4;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage4.x, uBounds_Stage4.y - uBounds_Stage4.x) + uBounds_Stage4.x;
        output_Stage4 += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4[3].z;
        coord += uImageIncrement_Stage4;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage4.x, uBounds_Stage4.y - uBounds_Stage4.x) + uBounds_Stage4.x;
        output_Stage4 += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4[3].w;
        coord += uImageIncrement_Stage4;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage4.x, uBounds_Stage4.y - uBounds_Stage4.x) + uBounds_Stage4.x;
        output_Stage4 += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4[4].x;
        coord += uImageIncrement_Stage4;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage4.x, uBounds_Stage4.y - uBounds_Stage4.x) + uBounds_Stage4.x;
        output_Stage4 += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4[4].y;
        coord += uImageIncrement_Stage4;
        coordSampled = coord;
        coordSampled.x = mod(coord.x - uBounds_Stage4.x, uBounds_Stage4.y - uBounds_Stage4.x) + uBounds_Stage4.x;
        output_Stage4 += texture(uTextureSampler_0_Stage4, coordSampled) * uKernel_Stage4[4].z;
        coord += uImageIncrement_Stage4;
        output_Stage4 *= output_Stage3;
    }
    vec4 output_Stage5;
    {
        vec2 coords = vTransformedCoords_3_Stage0 * ubaseFrequency_Stage5;
        float r = noiseOctaves_Stage5(vec3(coords, uz_Stage5));
        float g = noiseOctaves_Stage5(vec3(coords, uz_Stage5));
        float b = noiseOctaves_Stage5(vec3(coords, uz_Stage5));
        float a = noiseOctaves_Stage5(vec3(coords, uz_Stage5));
        output_Stage5 = vec4(r, g, b, a);
        output_Stage5 = clamp(output_Stage5, 0.0, 1.0);
        output_Stage5 = vec4(output_Stage5.xyz * output_Stage5.www, output_Stage5.w);
    }
    vec4 output_Stage6;
    {
        output_Stage6 = blend_dst_in(output_Stage5, ClampedGradientEffect_Stage6_c2_c0(vec4(1.0)));
    }
    {
        sk_FragColor = output_Stage6 * outputColor_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
uniform mat3 uCoordTransformMatrix_4_Stage0;
in vec2 position;
in vec4 color;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vTransformedCoords_3_Stage0;
noperspective out vec2 vTransformedCoords_4_Stage0;
flat out vec4 vcolor_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_4_Stage0 = (uCoordTransformMatrix_4_Stage0 * vec3(localCoord, 1.0)).xy;
    vcolor_Stage0 = color;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

