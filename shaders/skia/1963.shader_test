[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uinnerRect_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec2 uradiusPlusHalf_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec2 ubaseFrequency_Stage1_c0_c0_c0_c0_c1_c0;
uniform float uz_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec4 urectH_Stage1_c0_c0_c1_c0;
uniform float uinvSixSigma_Stage1_c0_c0_c1_c0;
uniform vec2 uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
uniform float uSurfaceScale_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec3 uLightColor_Stage1_c1_c0_c0_c0_c0_c0;
uniform float uKS_Stage1_c1_c0_c0_c0_c0_c0;
uniform float uShininess_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec4 uTexDom_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec3 uDecalParams_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec3 uLightLocation_Stage1_c1_c0_c0_c0_c0_c0;
uniform float uExponent_Stage1_c1_c0_c0_c0_c0_c0;
uniform float uCosInnerConeAngle_Stage1_c1_c0_c0_c0_c0_c0;
uniform float uCosOuterConeAngle_Stage1_c1_c0_c0_c0_c0_c0;
uniform float uConeScale_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec3 uS_Stage1_c1_c0_c0_c0_c0_c0;
uniform float uinnerThreshold_Stage1_c1_c0_c0_c0_c1_c0;
uniform float uouterThreshold_Stage1_c1_c0_c0_c0_c1_c0;
uniform float uinnerThreshold_Stage1_c1_c0_c1_c0_c0_c0;
uniform float uouterThreshold_Stage1_c1_c0_c1_c0_c0_c0;
uniform vec4 ucolor_Stage1_c1_c0_c1_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
uniform sampler2D uTextureSampler_3_Stage1;
uniform sampler2D uTextureSampler_4_Stage1;
uniform sampler2D uTextureSampler_5_Stage1;
noperspective in vec4 vcolor_Stage0;
noperspective in vec3 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vTransformedCoords_3_Stage0;
noperspective in float vinCoverage_Stage0;
vec4 CircularRRect_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c0_c0_c0_c0_c0_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c0_c0_c0_c0_c0_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    float alpha = clamp(uradiusPlusHalf_Stage1_c0_c0_c0_c0_c0_c0.x - length(dxy), 0.0, 1.0);
    alpha = 1.0 - alpha;
    _output = _input * alpha;
    return _output;
}
vec3 fade_Stage1_c0_c0_c0_c0_c1_c0(vec3 t) {
    return ((t * t) * t) * (t * (t * 6.0 - 15.0) + 10.0);
}
float perm_Stage1_c0_c0_c0_c0_c1_c0(float x) {
    return texture(uTextureSampler_0_Stage1, vec2(fract(x / 256.0), 0.0)).x * 255.0;
}
float grad_Stage1_c0_c0_c0_c0_c1_c0(float x, vec3 p) {
    return dot(texture(uTextureSampler_1_Stage1, vec2(fract(x / 16.0), 0.0)).xyz * 255.0 - vec3(1.0), p);
}
float lerp_Stage1_c0_c0_c0_c0_c1_c0(float a, float b, float w) {
    return a + w * (b - a);
}
float noise_Stage1_c0_c0_c0_c0_c1_c0(vec3 p) {
    vec3 P = mod(floor(p), 256.0);
    p -= floor(p);
    vec3 f = fade_Stage1_c0_c0_c0_c0_c1_c0(p);
    float A = perm_Stage1_c0_c0_c0_c0_c1_c0(P.x) + P.y;
    float AA = perm_Stage1_c0_c0_c0_c0_c1_c0(A) + P.z;
    float AB = perm_Stage1_c0_c0_c0_c0_c1_c0(A + 1.0) + P.z;
    float B = perm_Stage1_c0_c0_c0_c0_c1_c0(P.x + 1.0) + P.y;
    float BA = perm_Stage1_c0_c0_c0_c0_c1_c0(B) + P.z;
    float BB = perm_Stage1_c0_c0_c0_c0_c1_c0(B + 1.0) + P.z;
    float result = lerp_Stage1_c0_c0_c0_c0_c1_c0(lerp_Stage1_c0_c0_c0_c0_c1_c0(lerp_Stage1_c0_c0_c0_c0_c1_c0(grad_Stage1_c0_c0_c0_c0_c1_c0(perm_Stage1_c0_c0_c0_c0_c1_c0(AA), p), grad_Stage1_c0_c0_c0_c0_c1_c0(perm_Stage1_c0_c0_c0_c0_c1_c0(BA), p + vec3(-1.0, 0.0, 0.0)), f.x), lerp_Stage1_c0_c0_c0_c0_c1_c0(grad_Stage1_c0_c0_c0_c0_c1_c0(perm_Stage1_c0_c0_c0_c0_c1_c0(AB), p + vec3(0.0, -1.0, 0.0)), grad_Stage1_c0_c0_c0_c0_c1_c0(perm_Stage1_c0_c0_c0_c0_c1_c0(BB), p + vec3(-1.0, -1.0, 0.0)), f.x), f.y), lerp_Stage1_c0_c0_c0_c0_c1_c0(lerp_Stage1_c0_c0_c0_c0_c1_c0(grad_Stage1_c0_c0_c0_c0_c1_c0(perm_Stage1_c0_c0_c0_c0_c1_c0(AA + 1.0), p + vec3(0.0, 0.0, -1.0)), grad_Stage1_c0_c0_c0_c0_c1_c0(perm_Stage1_c0_c0_c0_c0_c1_c0(BA + 1.0), p + vec3(-1.0, 0.0, -1.0)), f.x), lerp_Stage1_c0_c0_c0_c0_c1_c0(grad_Stage1_c0_c0_c0_c0_c1_c0(perm_Stage1_c0_c0_c0_c0_c1_c0(AB + 1.0), p + vec3(0.0, -1.0, -1.0)), grad_Stage1_c0_c0_c0_c0_c1_c0(perm_Stage1_c0_c0_c0_c0_c1_c0(BB + 1.0), p + vec3(-1.0, -1.0, -1.0)), f.x), f.y), f.z);
    return result;
}
float noiseOctaves_Stage1_c0_c0_c0_c0_c1_c0(vec3 p) {
    float result = 0.0;
    float ratio = 1.0;
    for (float i = 0.0;i < 9.0; i++) {
        result += noise_Stage1_c0_c0_c0_c0_c1_c0(p) / ratio;
        p *= 2.0;
        ratio *= 2.0;
    }
    return (result + 1.0) / 2.0;
}
vec4 ImprovedPerlinNoise_Stage1_c0_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 vTransformedCoords_0_Stage0_ensure2D = vTransformedCoords_0_Stage0.xy / vTransformedCoords_0_Stage0.z;
    vec2 coords = vTransformedCoords_0_Stage0_ensure2D * ubaseFrequency_Stage1_c0_c0_c0_c0_c1_c0;
    float r = noiseOctaves_Stage1_c0_c0_c0_c0_c1_c0(vec3(coords, uz_Stage1_c0_c0_c0_c0_c1_c0));
    float g = noiseOctaves_Stage1_c0_c0_c0_c0_c1_c0(vec3(coords, uz_Stage1_c0_c0_c0_c0_c1_c0));
    float b = noiseOctaves_Stage1_c0_c0_c0_c0_c1_c0(vec3(coords, uz_Stage1_c0_c0_c0_c0_c1_c0));
    float a = noiseOctaves_Stage1_c0_c0_c0_c0_c1_c0(vec3(coords, uz_Stage1_c0_c0_c0_c0_c1_c0));
    _output = vec4(r, g, b, a);
    _output = clamp(_output, 0.0, 1.0);
    _output = vec4(_output.xyz * _output.www, _output.w);
    return _output;
}
float _guarded_divide(float n, float d) {
    return n / d;
}
float _color_burn_component(float sc, float sa, float dc, float da) {
    if (da == dc) {
        return (sa * da + sc * (1.0 - da)) + dc * (1.0 - sa);
    } else if (sc == 0.0) {
        return dc * (1.0 - sa);
    }
    float d = max(0.0, da - _guarded_divide((da - dc) * sa, sc));
    return (d * sa + sc * (1.0 - da)) + dc * (1.0 - sa);
}
vec4 blend_color_burn(vec4 src, vec4 dst) {
    return vec4(_color_burn_component(src.x, src.w, dst.x, dst.w), _color_burn_component(src.y, src.w, dst.y, dst.w), _color_burn_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_color_burn(CircularRRect_Stage1_c0_c0_c0_c0_c0_c0(inputColor), ImprovedPerlinNoise_Stage1_c0_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 RectBlurEffect_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float xCoverage, yCoverage;
    {
        float x, y;
        {
            x = max(urectH_Stage1_c0_c0_c1_c0.x - gl_FragCoord.x, gl_FragCoord.x - urectH_Stage1_c0_c0_c1_c0.z);
            y = max(urectH_Stage1_c0_c0_c1_c0.y - gl_FragCoord.y, gl_FragCoord.y - urectH_Stage1_c0_c0_c1_c0.w);
        }
        xCoverage = texture(uTextureSampler_2_Stage1, vec2(x * uinvSixSigma_Stage1_c0_c0_c1_c0, 0.5)).w;
        yCoverage = texture(uTextureSampler_2_Stage1, vec2(y * uinvSixSigma_Stage1_c0_c0_c1_c0, 0.5)).w;
        _output = (_input * xCoverage) * yCoverage;
    }
    _output = (_input * xCoverage) * yCoverage;
    return _output;
}
float _blend_color_saturation(vec3 color) {
    return max(max(color.x, color.y), color.z) - min(min(color.x, color.y), color.z);
}
vec3 _blend_set_color_saturation_helper(vec3 minMidMax, float sat) {
    if (minMidMax.x < minMidMax.z) {
        return vec3(0.0, (sat * (minMidMax.y - minMidMax.x)) / (minMidMax.z - minMidMax.x), sat);
    }
    return vec3(0.0);
}
vec3 _blend_set_color_saturation(vec3 hueLumColor, vec3 satColor) {
    float sat = _blend_color_saturation(satColor);
    if (hueLumColor.x <= hueLumColor.y) {
        if (hueLumColor.y <= hueLumColor.z) {
            hueLumColor.xyz = _blend_set_color_saturation_helper(hueLumColor, sat);
        } else if (hueLumColor.x <= hueLumColor.z) {
            hueLumColor.xzy = _blend_set_color_saturation_helper(hueLumColor.xzy, sat);
        } else {
            hueLumColor.zxy = _blend_set_color_saturation_helper(hueLumColor.zxy, sat);
        }
    } else if (hueLumColor.x <= hueLumColor.z) {
        hueLumColor.yxz = _blend_set_color_saturation_helper(hueLumColor.yxz, sat);
    } else if (hueLumColor.y <= hueLumColor.z) {
        hueLumColor.yzx = _blend_set_color_saturation_helper(hueLumColor.yzx, sat);
    } else {
        hueLumColor.zyx = _blend_set_color_saturation_helper(hueLumColor.zyx, sat);
    }
    return hueLumColor;
}
float _blend_color_luminance(vec3 color) {
    return dot(vec3(0.30000001192092896, 0.5899999737739563, 0.10999999940395355), color);
}
vec3 _blend_set_color_luminance(vec3 hueSatColor, float alpha, vec3 lumColor) {
    float lum = _blend_color_luminance(lumColor);
    vec3 result = (lum - _blend_color_luminance(hueSatColor)) + hueSatColor;
    float minComp = min(min(result.x, result.y), result.z);
    float maxComp = max(max(result.x, result.y), result.z);
    if (minComp < 0.0 && lum != minComp) {
        result = lum + ((result - lum) * lum) / (lum - minComp);
    }
    if (maxComp > alpha && maxComp != lum) {
        return lum + ((result - lum) * (alpha - lum)) / (maxComp - lum);
    }
    return result;
}
vec4 blend_hue(vec4 src, vec4 dst) {
    float alpha = dst.w * src.w;
    vec3 sda = src.xyz * dst.w;
    vec3 dsa = dst.xyz * src.w;
    return vec4((((_blend_set_color_luminance(_blend_set_color_saturation(sda, dsa), alpha, dsa) + dst.xyz) - dsa) + src.xyz) - sda, (src.w + dst.w) - alpha);
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_hue(ComposeTwo_Stage1_c0_c0_c0_c0(inputColor), RectBlurEffect_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 light_Stage1_c1_c0_c0_c0_c0_c0(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    vec3 halfDir = normalize(surfaceToLight + vec3(0.0, 0.0, 1.0));
    float colorScale = uKS_Stage1_c1_c0_c0_c0_c0_c0 * pow(dot(normal, halfDir), uShininess_Stage1_c1_c0_c0_c0_c0_c0);
    vec3 color = lightColor * clamp(colorScale, 0.0, 1.0);
    return vec4(color, max(max(color.x, color.y), color.z));
}
float sobel_Stage1_c1_c0_c0_c0_c0_c0(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage1_c1_c0_c0_c0_c0_c0(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage1_c1_c0_c0_c0_c0_c0(float m[9], float surfaceScale) {
    return pointToNormal_Stage1_c1_c0_c0_c0_c0_c0(sobel_Stage1_c1_c0_c0_c0_c0_c0(m[0], m[1], m[3], m[4], m[6], m[7], 0.5), sobel_Stage1_c1_c0_c0_c0_c0_c0(m[0], m[6], m[1], m[7], 0.0, 0.0, 0.33333298563957214), surfaceScale);
}
vec3 lightColor_Stage1_c1_c0_c0_c0_c0_c0(vec3 surfaceToLight) {
    float cosAngle = -dot(surfaceToLight, uS_Stage1_c1_c0_c0_c0_c0_c0);
    if (cosAngle < uCosOuterConeAngle_Stage1_c1_c0_c0_c0_c0_c0) {
        return vec3(0.0);
    }
    float scale = pow(cosAngle, uExponent_Stage1_c1_c0_c0_c0_c0_c0);
    if (cosAngle < uCosInnerConeAngle_Stage1_c1_c0_c0_c0_c0_c0) {
        return ((uLightColor_Stage1_c1_c0_c0_c0_c0_c0 * scale) * (cosAngle - uCosOuterConeAngle_Stage1_c1_c0_c0_c0_c0_c0)) * uConeScale_Stage1_c1_c0_c0_c0_c0_c0;
    }
    return uLightColor_Stage1_c1_c0_c0_c0_c0_c0;
}
vec4 SpecularLighting_Stage1_c1_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_1_Stage0;
    float m[9];
    vec4 temp0;
    {
        vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_3_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[0] = temp0.w;
    vec4 temp1;
    {
        vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_3_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[1] = temp1.w;
    vec4 temp2;
    {
        vec2 origCoord = coord + uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_3_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[2] = temp2.w;
    vec4 temp3;
    {
        vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_3_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[3] = temp3.w;
    vec4 temp4;
    {
        vec2 origCoord = coord;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_3_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[4] = temp4.w;
    vec4 temp5;
    {
        vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_3_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[5] = temp5.w;
    vec4 temp6;
    {
        vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_3_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[6] = temp6.w;
    vec4 temp7;
    {
        vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_3_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[7] = temp7.w;
    vec4 temp8;
    {
        vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage1_c1_c0_c0_c0_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c1_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_3_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[8] = temp8.w;
    vec3 surfaceToLight = normalize(uLightLocation_Stage1_c1_c0_c0_c0_c0_c0 - vec3(gl_FragCoord.xy, uSurfaceScale_Stage1_c1_c0_c0_c0_c0_c0 * m[4]));
    _output = light_Stage1_c1_c0_c0_c0_c0_c0(normal_Stage1_c1_c0_c0_c0_c0_c0(m, uSurfaceScale_Stage1_c1_c0_c0_c0_c0_c0), surfaceToLight, lightColor_Stage1_c1_c0_c0_c0_c0_c0(surfaceToLight));
    _output *= _input;
    return _output;
}
vec4 AlphaThresholdFragmentProcessor_Stage1_c1_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 color = _input;
    vec4 mask_color = texture(uTextureSampler_4_Stage1, vTransformedCoords_2_Stage0);
    if (mask_color.w < 0.5) {
        if (color.w > uouterThreshold_Stage1_c1_c0_c0_c0_c1_c0) {
            float scale = uouterThreshold_Stage1_c1_c0_c0_c0_c1_c0 / color.w;
            color.xyz *= scale;
            color.w = uouterThreshold_Stage1_c1_c0_c0_c0_c1_c0;
        }
    } else if (color.w < uinnerThreshold_Stage1_c1_c0_c0_c0_c1_c0) {
        float scale = uinnerThreshold_Stage1_c1_c0_c0_c0_c1_c0 / max(0.0010000000474974513, color.w);
        color.xyz *= scale;
        color.w = uinnerThreshold_Stage1_c1_c0_c0_c0_c1_c0;
    }
    _output = color;
    return _output;
}
vec4 blend_screen(vec4 src, vec4 dst) {
    return src + (1.0 - src) * dst;
}
vec4 ComposeTwo_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_screen(SpecularLighting_Stage1_c1_c0_c0_c0_c0_c0(inputColor), AlphaThresholdFragmentProcessor_Stage1_c1_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 AlphaThresholdFragmentProcessor_Stage1_c1_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 color = _input;
    vec4 mask_color = texture(uTextureSampler_5_Stage1, vTransformedCoords_3_Stage0);
    if (mask_color.w < 0.5) {
        if (color.w > uouterThreshold_Stage1_c1_c0_c1_c0_c0_c0) {
            float scale = uouterThreshold_Stage1_c1_c0_c1_c0_c0_c0 / color.w;
            color.xyz *= scale;
            color.w = uouterThreshold_Stage1_c1_c0_c1_c0_c0_c0;
        }
    } else if (color.w < uinnerThreshold_Stage1_c1_c0_c1_c0_c0_c0) {
        float scale = uinnerThreshold_Stage1_c1_c0_c1_c0_c0_c0 / max(0.0010000000474974513, color.w);
        color.xyz *= scale;
        color.w = uinnerThreshold_Stage1_c1_c0_c1_c0_c0_c0;
    }
    _output = color;
    return _output;
}
vec4 ConstColorProcessor_Stage1_c1_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    {
        _output = ucolor_Stage1_c1_c0_c1_c0_c1_c0;
    }
    return _output;
}
vec4 blend_src_atop(vec4 src, vec4 dst) {
    return dst.w * src + (1.0 - src.w) * dst;
}
vec4 ComposeTwo_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_atop(AlphaThresholdFragmentProcessor_Stage1_c1_c0_c1_c0_c0_c0(inputColor), ConstColorProcessor_Stage1_c1_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_color_burn(ComposeTwo_Stage1_c1_c0_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
        float alpha = 1.0;
        alpha = vinCoverage_Stage0;
        outputCoverage_Stage0 = vec4(alpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_hue(ComposeTwo_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = outputCoverage_Stage0 * output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
in vec2 inPosition;
in vec4 inColor;
in float inCoverage;
noperspective out vec4 vcolor_Stage0;
noperspective out vec3 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vTransformedCoords_3_Stage0;
noperspective out float vinCoverage_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0);
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(inPosition, 1.0)).xy;
    vinCoverage_Stage0 = inCoverage;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

