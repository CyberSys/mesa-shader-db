[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform vec4 uinnerRect_Stage1_c0_c0;
uniform vec2 uradiusPlusHalf_Stage1_c0_c0;
in vec2 vTransformedCoords_0_Stage0;
vec4 CircularRRect_Stage1_c0_c0(vec4 _input, vec2 _coords) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c0_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c0_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    float alpha = clamp(uradiusPlusHalf_Stage1_c0_c0.x - length(dxy), 0.0, 1.0);
    alpha = 1.0 - alpha;
    _output = _input * alpha;
    return _output;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        float coord = vTransformedCoords_0_Stage0.x - 0.5;
        float f = fract(coord);
        coord += 0.5 - f;
        float f2 = f * f;
        vec4 w = mat4(0.055555555555555552, 0.88888888888888884, 0.055555555555555552, 0.0, -0.5, 0.0, 0.5, 0.0, 0.83333333333333337, -2.0, 1.5, -0.33333333333333331, -0.3888888888888889, 1.1666666666666667, -1.1666666666666667, 0.3888888888888889) * vec4(1.0, f, f2, f2 * f);
        vec4 c[4];
        c[0] = CircularRRect_Stage1_c0_c0(vec4(1.0), vec2(coord + -1.0, vTransformedCoords_0_Stage0.y));
        c[1] = CircularRRect_Stage1_c0_c0(vec4(1.0), vec2(coord, vTransformedCoords_0_Stage0.y));
        c[2] = CircularRRect_Stage1_c0_c0(vec4(1.0), vec2(coord + 1.0, vTransformedCoords_0_Stage0.y));
        c[3] = CircularRRect_Stage1_c0_c0(vec4(1.0), vec2(coord + 2.0, vTransformedCoords_0_Stage0.y));
        vec4 bicubicColor = ((c[0] * w.x + c[1] * w.y) + c[2] * w.z) + c[3] * w.w;
        bicubicColor = clamp(bicubicColor, 0.0, 1.0);
        output_Stage1 = bicubicColor * outputColor_Stage0;
    }
    vec4 output_Stage2;
    {
        output_Stage2 = floor(vec4(255.0) + 0.5) / 255.0;
        {
            output_Stage2.xyz = floor((output_Stage2.xyz * output_Stage2.w) * 255.0 + 0.5) / 255.0;
        }
    }
    {
        sk_FragColor = output_Stage1 * output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
out vec2 vTransformedCoords_0_Stage0;
void main() {
    vec3 pos3 = uViewM_Stage0 * vec3(inPosition, 1.0);
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    {
        vec2 _posTmp = vec2(pos3.x / pos3.z, pos3.y / pos3.z);
        _posTmp = floor(_posTmp) + vec2(0.5, 0.5);
        gl_Position = vec4(_posTmp, 0.0, 1.0);
    }
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

