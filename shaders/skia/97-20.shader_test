[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uleftBorderColor_Stage1_c0_c0;
uniform vec4 urightBorderColor_Stage1_c0_c0;
uniform vec4 uscale01_Stage1_c0_c0_c1_c0;
uniform vec4 ubias01_Stage1_c0_c0_c1_c0;
uniform vec4 uscale23_Stage1_c0_c0_c1_c0;
uniform vec4 ubias23_Stage1_c0_c0_c1_c0;
uniform float uthreshold_Stage1_c0_c0_c1_c0;
uniform float ucornerRadius_Stage2;
uniform vec4 uproxyRect_Stage2;
uniform float ublurRadius_Stage2;
uniform mat4 um_Stage3;
uniform vec4 uv_Stage3;
uniform vec2 uImageIncrement_Stage4;
uniform float uSurfaceScale_Stage4;
uniform vec3 uLightColor_Stage4;
uniform float uKD_Stage4;
uniform vec4 uTexDom_Stage4;
uniform vec3 uDecalParams_Stage4;
uniform vec3 uLightDirection_Stage4;
uniform vec4 uboundsUniform_Stage6;
uniform float uxInvZoom_Stage6;
uniform float uyInvZoom_Stage6;
uniform float uxInvInset_Stage6;
uniform float uyInvInset_Stage6;
uniform vec2 uoffset_Stage6;
uniform sampler2D uTextureSampler_0_Stage2;
uniform sampler2D uTextureSampler_0_Stage4;
uniform sampler2D uTextureSampler_0_Stage6;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
vec4 LinearGradientLayout_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float t = vTransformedCoords_0_Stage0.x + 9.9999997473787516e-06;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 DualIntervalGradientColorizer_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    if (t < uthreshold_Stage1_c0_c0_c1_c0) {
        scale = uscale01_Stage1_c0_c0_c1_c0;
        bias = ubias01_Stage1_c0_c0_c1_c0;
    } else {
        scale = uscale23_Stage1_c0_c0_c1_c0;
        bias = ubias23_Stage1_c0_c0_c1_c0;
    }
    _output = t * scale + bias;
    return _output;
}
vec4 ClampedGradientEffect_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = LinearGradientLayout_Stage1_c0_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage1_c0_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage1_c0_c0;
    } else {
        _output = DualIntervalGradientColorizer_Stage1_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 light_Stage4(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    float colorScale = uKD_Stage4 * dot(normal, surfaceToLight);
    return vec4(lightColor * clamp(colorScale, 0.0, 1.0), 1.0);
}
float sobel_Stage4(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage4(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage4(float m[9], float surfaceScale) {
    return pointToNormal_Stage4(sobel_Stage4(m[0], m[2], m[3], m[5], m[6], m[8], 0.25), sobel_Stage4(m[0], m[6], m[1], m[7], m[2], m[8], 0.25), surfaceScale);
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 output_Stage1;
    {
        output_Stage1 = blend_dst_in(vec4(1.0), ClampedGradientEffect_Stage1_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage2;
    {
        vec2 translatedFragPos = gl_FragCoord.xy - uproxyRect_Stage2.xy;
        float threshold = ucornerRadius_Stage2 + 2.0 * ublurRadius_Stage2;
        vec2 middle = (uproxyRect_Stage2.zw - uproxyRect_Stage2.xy) - 2.0 * threshold;
        if (translatedFragPos.x >= threshold && translatedFragPos.x < middle.x + threshold) {
            translatedFragPos.x = threshold;
        } else if (translatedFragPos.x >= middle.x + threshold) {
            translatedFragPos.x -= middle.x - 1.0;
        }
        if (translatedFragPos.y > threshold && translatedFragPos.y < middle.y + threshold) {
            translatedFragPos.y = threshold;
        } else if (translatedFragPos.y >= middle.y + threshold) {
            translatedFragPos.y -= middle.y - 1.0;
        }
        vec2 proxyDims = vec2(2.0 * threshold + 1.0);
        vec2 texCoord = translatedFragPos / proxyDims;
        output_Stage2 = output_Stage1 * texture(uTextureSampler_0_Stage2, texCoord);
    }
    vec4 output_Stage3;
    {
        vec4 inputColor = output_Stage2;
        {
            float nonZeroAlpha = max(inputColor.w, 9.9999997473787516e-05);
            inputColor = vec4(inputColor.xyz / nonZeroAlpha, inputColor.w);
        }
        output_Stage3 = um_Stage3 * inputColor + uv_Stage3;
        {
            output_Stage3 = clamp(output_Stage3, 0.0, 1.0);
        }
    }
    vec4 output_Stage4;
    {
        vec2 coord = vTransformedCoords_1_Stage0;
        float m[9];
        vec4 temp0;
        {
            vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage4;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
            if (err > uDecalParams_Stage4.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4.z < 1.0) {
                err = 0.0;
            }
            temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[0] = temp0.w;
        vec4 temp1;
        {
            vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage4;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
            if (err > uDecalParams_Stage4.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4.z < 1.0) {
                err = 0.0;
            }
            temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[1] = temp1.w;
        vec4 temp2;
        {
            vec2 origCoord = coord + uImageIncrement_Stage4;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
            if (err > uDecalParams_Stage4.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4.z < 1.0) {
                err = 0.0;
            }
            temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[2] = temp2.w;
        vec4 temp3;
        {
            vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage4;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
            if (err > uDecalParams_Stage4.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4.z < 1.0) {
                err = 0.0;
            }
            temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[3] = temp3.w;
        vec4 temp4;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
            if (err > uDecalParams_Stage4.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4.z < 1.0) {
                err = 0.0;
            }
            temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[4] = temp4.w;
        vec4 temp5;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage4;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
            if (err > uDecalParams_Stage4.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4.z < 1.0) {
                err = 0.0;
            }
            temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[5] = temp5.w;
        vec4 temp6;
        {
            vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage4;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
            if (err > uDecalParams_Stage4.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4.z < 1.0) {
                err = 0.0;
            }
            temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[6] = temp6.w;
        vec4 temp7;
        {
            vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage4;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
            if (err > uDecalParams_Stage4.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4.z < 1.0) {
                err = 0.0;
            }
            temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[7] = temp7.w;
        vec4 temp8;
        {
            vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage4;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage4.xy, uTexDom_Stage4.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4.y);
            if (err > uDecalParams_Stage4.z) {
                err = 1.0;
            } else if (uDecalParams_Stage4.z < 1.0) {
                err = 0.0;
            }
            temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[8] = temp8.w;
        vec3 surfaceToLight = uLightDirection_Stage4;
        output_Stage4 = light_Stage4(normal_Stage4(m, uSurfaceScale_Stage4), surfaceToLight, uLightColor_Stage4);
        output_Stage4 *= output_Stage3;
    }
    vec4 output_Stage5;
    {
        output_Stage5 = floor(output_Stage4 * 255.0 + 0.5) / 255.0;
        {
            output_Stage5.xyz = floor((output_Stage5.xyz * output_Stage5.w) * 255.0 + 0.5) / 255.0;
        }
    }
    vec4 output_Stage6;
    {
        vec2 coord = vTransformedCoords_2_Stage0;
        vec2 zoom_coord = uoffset_Stage6 + coord * vec2(uxInvZoom_Stage6, uyInvZoom_Stage6);
        vec2 delta = (coord - uboundsUniform_Stage6.xy) * uboundsUniform_Stage6.zw;
        delta = min(delta, vec2(1.0, 1.0) - delta);
        delta *= vec2(uxInvInset_Stage6, uyInvInset_Stage6);
        float weight = 0.0;
        if (delta.x < 2.0 && delta.y < 2.0) {
            delta = vec2(2.0, 2.0) - delta;
            float dist = length(delta);
            dist = max(2.0 - dist, 0.0);
            weight = min(dist * dist, 1.0);
        } else {
            vec2 delta_squared = delta * delta;
            weight = min(min(delta_squared.x, delta_squared.y), 1.0);
        }
        output_Stage6 = texture(uTextureSampler_0_Stage6, mix(coord, zoom_coord, weight));
    }
    {
        sk_FragColor = output_Stage6 * output_Stage5;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 position;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(localCoord, 1.0)).xy;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

