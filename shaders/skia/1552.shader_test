[require]
GLSL >= 1.40

[fragment shader]
#version 140

uniform mat4 um_Stage1;
uniform vec4 uv_Stage1;
uniform vec4 uboundsUniform_Stage3;
uniform float uxInvZoom_Stage3;
uniform float uyInvZoom_Stage3;
uniform float uxInvInset_Stage3;
uniform float uyInvInset_Stage3;
uniform vec2 uoffset_Stage3;
uniform float uinnerThreshold_Stage4_c0_c0;
uniform float uouterThreshold_Stage4_c0_c0;
uniform vec2 uScale_Stage4_c1_c0;
uniform vec4 uTexDom_Stage4_c1_c0;
uniform vec3 uDecalParams_Stage4_c1_c0;
uniform vec2 ubaseFrequency_Stage5_c2_c0;
uniform sampler2D uTextureSampler_0_Stage3;
uniform sampler2D uTextureSampler_0_Stage4;
uniform sampler2D uTextureSampler_1_Stage4;
uniform sampler2D uTextureSampler_2_Stage4;
uniform sampler2D uTextureSampler_0_Stage5;
uniform sampler2D uTextureSampler_1_Stage5;
uniform sampler2D uTextureSampler_0_Stage6;
noperspective in vec4 vinCircleEdge_Stage0;
noperspective in vec3 vinClipPlane_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vTransformedCoords_3_Stage0;
noperspective in vec2 vTransformedCoords_4_Stage0;
vec4 AlphaThresholdFragmentProcessor_Stage4_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 color = _input;
    vec4 mask_color = texture(uTextureSampler_0_Stage4, vTransformedCoords_1_Stage0);
    if (mask_color.w < 0.5) {
        if (color.w > uouterThreshold_Stage4_c0_c0) {
            float scale = uouterThreshold_Stage4_c0_c0 / color.w;
            color.xyz *= scale;
            color.w = uouterThreshold_Stage4_c0_c0;
        }
    } else if (color.w < uinnerThreshold_Stage4_c0_c0) {
        float scale = uinnerThreshold_Stage4_c0_c0 / max(0.0010000000474974513, color.w);
        color.xyz *= scale;
        color.w = uinnerThreshold_Stage4_c0_c0;
    }
    _output = color;
    return _output;
}
vec4 DisplacementMap_Stage4_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 dColor = texture(uTextureSampler_1_Stage4, vTransformedCoords_2_Stage0);
    dColor.xyz = dColor.w < 9.9999999747524271e-07 ? vec3(0.0) : clamp(dColor.xyz / dColor.w, 0.0, 1.0);
    vec2 cCoords = vTransformedCoords_3_Stage0 + uScale_Stage4_c1_c0 * (dColor.yw - vec2(0.5));
    {
        vec2 origCoord = cCoords;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage4_c1_c0.xy, uTexDom_Stage4_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_2_Stage4, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c1_c0.y);
        if (err > uDecalParams_Stage4_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage4_c1_c0.z < 1.0) {
            err = 0.0;
        }
        _output = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    return _output;
}
float perlinnoise_Stage5_c2_c0(float chanCoord, vec2 noiseVec) {
    vec4 floorVal;
    floorVal.xy = floor(noiseVec);
    floorVal.zw = floorVal.xy + vec2(1.0);
    vec2 fractVal = fract(noiseVec);
    vec2 noiseSmooth = (fractVal * fractVal) * (vec2(3.0) - vec2(2.0) * fractVal);
    floorVal = fract(floor(mod(floorVal, 256.0)) / vec4(256.0));
    vec2 latticeIdx;
    latticeIdx.x = texture(uTextureSampler_0_Stage5, vec2(floorVal.x, 0.5)).x;
    latticeIdx.y = texture(uTextureSampler_0_Stage5, vec2(floorVal.z, 0.5)).x;
    vec4 bcoords = fract(latticeIdx.xyxy + floorVal.yyww);
    vec2 uv;
    vec4 lattice = texture(uTextureSampler_1_Stage5, vec2(bcoords.x, chanCoord)).zyxw;
    uv.x = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    fractVal.x -= 1.0;
    lattice = texture(uTextureSampler_1_Stage5, vec2(bcoords.y, chanCoord)).zyxw;
    uv.y = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    vec2 ab;
    ab.x = mix(uv.x, uv.y, noiseSmooth.x);
    fractVal.y -= 1.0;
    lattice = texture(uTextureSampler_1_Stage5, vec2(bcoords.w, chanCoord)).zyxw;
    uv.y = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    fractVal.x += 1.0;
    lattice = texture(uTextureSampler_1_Stage5, vec2(bcoords.z, chanCoord)).zyxw;
    uv.x = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    ab.y = mix(uv.x, uv.y, noiseSmooth.x);
    return mix(ab.x, ab.y, noiseSmooth.y);
}
vec4 PerlinNoise_Stage5_c2_c0(vec4 _input) {
    vec4 _output;
    vec2 noiseVec = floor(vTransformedCoords_4_Stage0) * ubaseFrequency_Stage5_c2_c0;
    _output = vec4(0.0);
    float ratio = 1.0;
    for (int octave = 0;octave < 5; ++octave) {
        _output += abs(vec4(perlinnoise_Stage5_c2_c0(0.125, noiseVec), perlinnoise_Stage5_c2_c0(0.375, noiseVec), perlinnoise_Stage5_c2_c0(0.625, noiseVec), perlinnoise_Stage5_c2_c0(0.875, noiseVec))) * ratio;
        noiseVec *= vec2(2.0);
        ratio *= 0.5;
    }
    _output = clamp(_output, 0.0, 1.0);
    _output = vec4(_output.xyz * _output.www, _output.w);
    return _output;
}
vec4 blend_src_over(vec4 src, vec4 dst) {
    return src + (1.0 - src.w) * dst;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputCoverage_Stage0;
    {
        vec4 circleEdge;
        circleEdge = vinCircleEdge_Stage0;
        vec3 clipPlane;
        clipPlane = vinClipPlane_Stage0;
        float d = length(circleEdge.xy);
        float distanceToOuterEdge = circleEdge.z * (1.0 - d);
        float edgeAlpha = clamp(distanceToOuterEdge, 0.0, 1.0);
        float clip = clamp(circleEdge.z * dot(circleEdge.xy, clipPlane.xy) + clipPlane.z, 0.0, 1.0);
        edgeAlpha *= clip;
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = outputCoverage_Stage0;
        output_Stage1 = um_Stage1 * inputColor + uv_Stage1;
        {
            output_Stage1 = clamp(output_Stage1, 0.0, 1.0);
        }
    }
    vec4 output_Stage3;
    {
        vec2 coord = vTransformedCoords_0_Stage0;
        vec2 zoom_coord = uoffset_Stage3 + coord * vec2(uxInvZoom_Stage3, uyInvZoom_Stage3);
        vec2 delta = (coord - uboundsUniform_Stage3.xy) * uboundsUniform_Stage3.zw;
        delta = min(delta, vec2(1.0, 1.0) - delta);
        delta *= vec2(uxInvInset_Stage3, uyInvInset_Stage3);
        float weight = 0.0;
        if (delta.x < 2.0 && delta.y < 2.0) {
            delta = vec2(2.0, 2.0) - delta;
            float dist = length(delta);
            dist = max(2.0 - dist, 0.0);
            weight = min(dist * dist, 1.0);
        } else {
            vec2 delta_squared = delta * delta;
            weight = min(min(delta_squared.x, delta_squared.y), 1.0);
        }
        output_Stage3 = texture(uTextureSampler_0_Stage3, mix(coord, zoom_coord, weight));
    }
    vec4 output_Stage4;
    {
        vec4 inputColor = vec4(output_Stage3.xyz, 1.0);
        output_Stage4 = blend_src_over(AlphaThresholdFragmentProcessor_Stage4_c0_c0(inputColor), DisplacementMap_Stage4_c1_c0(inputColor));
        output_Stage4 *= output_Stage3.w;
    }
    vec4 output_Stage5;
    {
        output_Stage5 = blend_dst_in(output_Stage4, PerlinNoise_Stage5_c2_c0(vec4(1.0)));
    }
    vec4 output_Stage6;
    {
        float nonZeroAlpha = max(output_Stage5.w, 9.9999997473787516e-05);
        vec4 coord = vec4(output_Stage5.xyz / nonZeroAlpha, nonZeroAlpha);
        coord = coord * 0.9960939884185791 + vec4(0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579);
        output_Stage6.w = texture(uTextureSampler_0_Stage6, vec2(coord.w, 0.125)).w;
        output_Stage6.x = texture(uTextureSampler_0_Stage6, vec2(coord.x, 0.375)).w;
        output_Stage6.y = texture(uTextureSampler_0_Stage6, vec2(coord.y, 0.625)).w;
        output_Stage6.z = texture(uTextureSampler_0_Stage6, vec2(coord.z, 0.875)).w;
        output_Stage6.xyz *= output_Stage6.w;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
uniform mat3 uCoordTransformMatrix_4_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec4 inCircleEdge;
in vec3 inClipPlane;
noperspective out vec4 vinCircleEdge_Stage0;
noperspective out vec3 vinClipPlane_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vTransformedCoords_3_Stage0;
noperspective out vec2 vTransformedCoords_4_Stage0;
void main() {
    vinCircleEdge_Stage0 = inCircleEdge;
    vinClipPlane_Stage0 = inClipPlane;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_4_Stage0 = (uCoordTransformMatrix_4_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

