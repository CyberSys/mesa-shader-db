[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 ucircle_Stage1_c0_c0;
uniform vec4 uinnerRect_Stage1_c1_c0;
uniform vec2 uinvRadiiXY_Stage1_c1_c0;
uniform vec4 uinnerRect_Stage2;
uniform vec4 uinvRadiiLTRB_Stage2;
uniform vec4 uleftBorderColor_Stage3_c2_c0;
uniform vec4 urightBorderColor_Stage3_c2_c0;
uniform float ubias_Stage3_c2_c0_c0_c0;
uniform float uscale_Stage3_c2_c0_c0_c0;
uniform vec4 uscale0_1_Stage3_c2_c0_c1_c0;
uniform vec4 uscale2_3_Stage3_c2_c0_c1_c0;
uniform vec4 uscale4_5_Stage3_c2_c0_c1_c0;
uniform vec4 uscale6_7_Stage3_c2_c0_c1_c0;
uniform vec4 uscale8_9_Stage3_c2_c0_c1_c0;
uniform vec4 ubias0_1_Stage3_c2_c0_c1_c0;
uniform vec4 ubias2_3_Stage3_c2_c0_c1_c0;
uniform vec4 ubias4_5_Stage3_c2_c0_c1_c0;
uniform vec4 ubias6_7_Stage3_c2_c0_c1_c0;
uniform vec4 ubias8_9_Stage3_c2_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage3_c2_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage3_c2_c0_c1_c0;
uniform vec2 ubaseFrequency_Stage4_c3_c0;
uniform sampler2D uTextureSampler_0_Stage4;
uniform sampler2D uTextureSampler_1_Stage4;
noperspective in vec2 vEllipseOffsets_Stage0;
noperspective in vec4 vEllipseRadii_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec3 vTransformedCoords_1_Stage0;
vec4 CircleEffect_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    float d;
    {
        d = (1.0 - length((ucircle_Stage1_c0_c0.xy - gl_FragCoord.xy) * ucircle_Stage1_c0_c0.w)) * ucircle_Stage1_c0_c0.z;
    }
    {
        _output = _input * clamp(d, 0.0, 1.0);
    }
    return _output;
}
vec4 EllipticalRRect_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c1_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c1_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    vec2 Z = dxy * uinvRadiiXY_Stage1_c1_c0;
    float implicit = dot(Z, dxy) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    grad_dot = max(grad_dot, 9.9999997473787516e-05);
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha = clamp(0.5 - approx_dist, 0.0, 1.0);
    _output = _input * alpha;
    return _output;
}
vec4 SweepGradientLayout_Stage3_c2_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float angle;
    {
        angle = atan(-vTransformedCoords_0_Stage0.y, -vTransformedCoords_0_Stage0.x);
    }
    float t = ((angle * 0.15915493667125702 + 0.5) + ubias_Stage3_c2_c0_c0_c0) * uscale_Stage3_c2_c0_c0_c0;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage3_c2_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    if (t < uthresholds1_7_Stage3_c2_c0_c1_c0.w) {
        if (t < uthresholds1_7_Stage3_c2_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage3_c2_c0_c1_c0.x) {
                scale = uscale0_1_Stage3_c2_c0_c1_c0;
                bias = ubias0_1_Stage3_c2_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage3_c2_c0_c1_c0;
                bias = ubias2_3_Stage3_c2_c0_c1_c0;
            }
        } else {
            if (t < uthresholds1_7_Stage3_c2_c0_c1_c0.z) {
                scale = uscale4_5_Stage3_c2_c0_c1_c0;
                bias = ubias4_5_Stage3_c2_c0_c1_c0;
            } else {
                scale = uscale6_7_Stage3_c2_c0_c1_c0;
                bias = ubias6_7_Stage3_c2_c0_c1_c0;
            }
        }
    } else {
        {
            {
                scale = uscale8_9_Stage3_c2_c0_c1_c0;
                bias = ubias8_9_Stage3_c2_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 ClampedGradientEffect_Stage3_c2_c0(vec4 _input) {
    vec4 _output;
    vec4 t = SweepGradientLayout_Stage3_c2_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage3_c2_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage3_c2_c0;
    } else {
        _output = UnrolledBinaryGradientColorizer_Stage3_c2_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
float perlinnoise_Stage4_c3_c0(float chanCoord, vec2 noiseVec) {
    vec4 floorVal;
    floorVal.xy = floor(noiseVec);
    floorVal.zw = floorVal.xy + vec2(1.0);
    vec2 fractVal = fract(noiseVec);
    vec2 noiseSmooth = (fractVal * fractVal) * (vec2(3.0) - vec2(2.0) * fractVal);
    floorVal = fract(floor(mod(floorVal, 256.0)) / vec4(256.0));
    vec2 latticeIdx;
    latticeIdx.x = texture(uTextureSampler_0_Stage4, vec2(floorVal.x, 0.5)).x;
    latticeIdx.y = texture(uTextureSampler_0_Stage4, vec2(floorVal.z, 0.5)).x;
    vec4 bcoords = fract(latticeIdx.xyxy + floorVal.yyww);
    vec2 uv;
    vec4 lattice = texture(uTextureSampler_1_Stage4, vec2(bcoords.x, chanCoord)).zyxw;
    uv.x = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    fractVal.x -= 1.0;
    lattice = texture(uTextureSampler_1_Stage4, vec2(bcoords.y, chanCoord)).zyxw;
    uv.y = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    vec2 ab;
    ab.x = mix(uv.x, uv.y, noiseSmooth.x);
    fractVal.y -= 1.0;
    lattice = texture(uTextureSampler_1_Stage4, vec2(bcoords.w, chanCoord)).zyxw;
    uv.y = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    fractVal.x += 1.0;
    lattice = texture(uTextureSampler_1_Stage4, vec2(bcoords.z, chanCoord)).zyxw;
    uv.x = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    ab.y = mix(uv.x, uv.y, noiseSmooth.x);
    return mix(ab.x, ab.y, noiseSmooth.y);
}
vec4 PerlinNoise_Stage4_c3_c0(vec4 _input) {
    vec4 _output;
    vec2 vTransformedCoords_1_Stage0_ensure2D = vTransformedCoords_1_Stage0.xy / vTransformedCoords_1_Stage0.z;
    vec2 noiseVec = floor(vTransformedCoords_1_Stage0_ensure2D) * ubaseFrequency_Stage4_c3_c0;
    _output = vec4(0.0);
    float ratio = 1.0;
    for (int octave = 0;octave < 5; ++octave) {
        _output += vec4(perlinnoise_Stage4_c3_c0(0.125, noiseVec), perlinnoise_Stage4_c3_c0(0.375, noiseVec), perlinnoise_Stage4_c3_c0(0.625, noiseVec), perlinnoise_Stage4_c3_c0(0.875, noiseVec)) * ratio;
        noiseVec *= vec2(2.0);
        ratio *= 0.5;
    }
    _output = _output * vec4(0.5) + vec4(0.5);
    _output = clamp(_output, 0.0, 1.0);
    _output = vec4(_output.xyz * _output.www, _output.w);
    return _output;
}
float _blend_overlay_component(float sc, float sa, float dc, float da) {
    if (2.0 * dc <= da) {
        return (2.0 * sc) * dc;
    }
    return sa * da - (2.0 * (da - dc)) * (sa - sc);
}
vec4 blend_overlay(vec4 src, vec4 dst) {
    vec4 result = vec4(_blend_overlay_component(src.x, src.w, dst.x, dst.w), _blend_overlay_component(src.y, src.w, dst.y, dst.w), _blend_overlay_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
    result.xyz += dst.xyz * (1.0 - src.w) + src.xyz * (1.0 - dst.w);
    return result;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vinColor_Stage0;
        vec2 offset = vEllipseOffsets_Stage0;
        float test = dot(offset, offset) - 1.0;
        vec2 grad = (2.0 * offset) * vEllipseRadii_Stage0.xy;
        float grad_dot = dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_overlay(CircleEffect_Stage1_c0_c0(inputColor), EllipticalRRect_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    vec4 output_Stage2;
    {
        vec2 dxy0 = uinnerRect_Stage2.xy - gl_FragCoord.xy;
        vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage2.zw;
        vec2 dxy = max(max(dxy0, dxy1), 0.0);
        vec2 Z = max(max(dxy0 * uinvRadiiLTRB_Stage2.xy, dxy1 * uinvRadiiLTRB_Stage2.zw), 0.0);
        float implicit = dot(Z, dxy) - 1.0;
        float grad_dot = 4.0 * dot(Z, Z);
        grad_dot = max(grad_dot, 9.9999997473787516e-05);
        float approx_dist = implicit * inversesqrt(grad_dot);
        float alpha = clamp(0.5 + approx_dist, 0.0, 1.0);
        output_Stage2 = outputCoverage_Stage0 * alpha;
    }
    vec4 output_Stage3;
    {
        output_Stage3 = blend_dst_in(output_Stage2, ClampedGradientEffect_Stage3_c2_c0(vec4(1.0)));
    }
    vec4 output_Stage4;
    {
        output_Stage4 = blend_dst_in(output_Stage3, PerlinNoise_Stage4_c3_c0(vec4(1.0)));
    }
    {
        sk_FragColor = output_Stage4 * output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffset;
in vec4 inEllipseRadii;
noperspective out vec2 vEllipseOffsets_Stage0;
noperspective out vec4 vEllipseRadii_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec3 vTransformedCoords_1_Stage0;
void main() {
    vEllipseOffsets_Stage0 = inEllipseOffset;
    vEllipseRadii_Stage0 = inEllipseRadii;
    vinColor_Stage0 = inColor;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0);
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

