[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
in vec4 vHairQuadEdge_Stage0;
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
        float edgeAlpha;
        vec2 duvdx = dFdx(vHairQuadEdge_Stage0.xy);
        vec2 duvdy = -dFdy(vHairQuadEdge_Stage0.xy);
        vec2 gF = vec2((2.0 * vHairQuadEdge_Stage0.x) * duvdx.x - duvdx.y, (2.0 * vHairQuadEdge_Stage0.x) * duvdy.x - duvdy.y);
        edgeAlpha = vHairQuadEdge_Stage0.x * vHairQuadEdge_Stage0.x - vHairQuadEdge_Stage0.y;
        edgeAlpha = sqrt((edgeAlpha * edgeAlpha) / dot(gF, gF));
        edgeAlpha = max(1.0 - edgeAlpha, 0.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    {
        sk_FragColor = outputColor_Stage0 * outputCoverage_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
in vec2 inPosition;
in vec4 inHairQuadEdge;
out vec4 vHairQuadEdge_Stage0;
void main() {
    vHairQuadEdge_Stage0 = inHairQuadEdge;
    vec3 pos3 = uViewM_Stage0 * vec3(inPosition, 1.0);
    gl_Position = vec4(pos3.x, pos3.y, 0.0, pos3.z);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

