[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
uniform vec2 uScale_Stage1;
uniform vec4 uTexDom_Stage1;
uniform vec3 uDecalParams_Stage1;
uniform vec4 ucircleData_Stage2;
uniform vec2 uImageIncrement_Stage3;
uniform vec2 uBounds_Stage3;
uniform vec4 uKernel_Stage3[4];
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
uniform sampler2D uTextureSampler_0_Stage3;
noperspective in vec4 vcolor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in float vinCoverage_Stage0;
void main() {
    vec4 output_Stage1;
    {
        vec4 dColor = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
        dColor.xyz = dColor.w < 9.9999999747524271e-07 ? vec3(0.0) : clamp(dColor.xyz / dColor.w, 0.0, 1.0);
        vec2 cCoords = vTransformedCoords_1_Stage0 + uScale_Stage1 * (dColor.zy - vec2(0.5));
        {
            vec2 origCoord = cCoords;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1.xy, uTexDom_Stage1.zw);
            vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1.y);
            if (err > uDecalParams_Stage1.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1.z < 1.0) {
                err = 0.0;
            }
            output_Stage1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
    }
    vec4 output_Stage2;
    {
        vec2 vec = vec2((gl_FragCoord.x - ucircleData_Stage2.x) * ucircleData_Stage2.w, (gl_FragCoord.y - ucircleData_Stage2.y) * ucircleData_Stage2.w);
        float dist = length(vec) + (0.5 - ucircleData_Stage2.z) * ucircleData_Stage2.w;
        output_Stage2 = output_Stage1 * texture(uTextureSampler_0_Stage2, vec2(dist, 0.5)).w;
    }
    vec4 output_Stage3;
    {
        output_Stage3 = vec4(0.0, 0.0, 0.0, 0.0);
        vec2 coord = vTransformedCoords_2_Stage0 - 7.0 * uImageIncrement_Stage3;
        vec2 coordSampled = vec2(0.0, 0.0);
        coordSampled = coord;
        if (coord.y >= uBounds_Stage3.x && coord.y <= uBounds_Stage3.y) {
            output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[0].x;
        }
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage3.x && coord.y <= uBounds_Stage3.y) {
            output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[0].y;
        }
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage3.x && coord.y <= uBounds_Stage3.y) {
            output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[0].z;
        }
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage3.x && coord.y <= uBounds_Stage3.y) {
            output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[0].w;
        }
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage3.x && coord.y <= uBounds_Stage3.y) {
            output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[1].x;
        }
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage3.x && coord.y <= uBounds_Stage3.y) {
            output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[1].y;
        }
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage3.x && coord.y <= uBounds_Stage3.y) {
            output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[1].z;
        }
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage3.x && coord.y <= uBounds_Stage3.y) {
            output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[1].w;
        }
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage3.x && coord.y <= uBounds_Stage3.y) {
            output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[2].x;
        }
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage3.x && coord.y <= uBounds_Stage3.y) {
            output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[2].y;
        }
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage3.x && coord.y <= uBounds_Stage3.y) {
            output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[2].z;
        }
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage3.x && coord.y <= uBounds_Stage3.y) {
            output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[2].w;
        }
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage3.x && coord.y <= uBounds_Stage3.y) {
            output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[3].x;
        }
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage3.x && coord.y <= uBounds_Stage3.y) {
            output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[3].y;
        }
        coord += uImageIncrement_Stage3;
        coordSampled = coord;
        if (coord.y >= uBounds_Stage3.x && coord.y <= uBounds_Stage3.y) {
            output_Stage3 += texture(uTextureSampler_0_Stage3, coordSampled) * uKernel_Stage3[3].z;
        }
        coord += uImageIncrement_Stage3;
        output_Stage3 *= output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
in vec4 inColor;
in float inCoverage;
noperspective out vec4 vcolor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out float vinCoverage_Stage0;
void main() {
    vec4 color = inColor;
    vcolor_Stage0 = color;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    vinCoverage_Stage0 = inCoverage;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

