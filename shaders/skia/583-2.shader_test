[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform float uSrcTF_Stage0[7];
uniform mat3 uColorXform_Stage0;
uniform float uDstTF_Stage0[7];
uniform float uinnerThreshold_Stage1;
uniform float uouterThreshold_Stage1;
uniform vec2 uImageIncrement_Stage2;
uniform float uSurfaceScale_Stage2;
uniform vec3 uLightColor_Stage2;
uniform float uKD_Stage2;
uniform vec4 uTexDom_Stage2;
uniform vec3 uDecalParams_Stage2;
uniform vec3 uLightLocation_Stage2;
uniform mat4 um_Stage3;
uniform vec4 uv_Stage3;
uniform vec2 uImageIncrement_Stage4_c0_c0;
uniform float uSurfaceScale_Stage4_c0_c0;
uniform vec3 uLightColor_Stage4_c0_c0;
uniform float uKS_Stage4_c0_c0;
uniform float uShininess_Stage4_c0_c0;
uniform vec4 uTexDom_Stage4_c0_c0;
uniform vec3 uDecalParams_Stage4_c0_c0;
uniform vec3 uLightDirection_Stage4_c0_c0;
uniform vec4 urectUniform_Stage5;
uniform vec2 uDstTextureUpperLeft_Stage6;
uniform vec2 uDstTextureCoordScale_Stage6;
uniform sampler2D uTextureSampler_0_Stage0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
uniform sampler2D uTextureSampler_0_Stage4;
uniform sampler2D uDstTextureSampler_Stage6;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vtextureCoords_Stage0;
flat in vec4 vtextureDomain_Stage0;
flat in vec4 vcolor_Stage0;
float src_tf_Stage0(float x) {
    float G = uSrcTF_Stage0[0];
    float A = uSrcTF_Stage0[1];
    float B = uSrcTF_Stage0[2];
    float C = uSrcTF_Stage0[3];
    float D = uSrcTF_Stage0[4];
    float E = uSrcTF_Stage0[5];
    float F = uSrcTF_Stage0[6];
    float s = sign(x);
    x = abs(x);
    x = x < D ? C * x + F : pow(A * x + B, G) + E;
    return s * x;
}
float dst_tf_Stage0(float x) {
    float G = uDstTF_Stage0[0];
    float A = uDstTF_Stage0[1];
    float B = uDstTF_Stage0[2];
    float C = uDstTF_Stage0[3];
    float D = uDstTF_Stage0[4];
    float E = uDstTF_Stage0[5];
    float F = uDstTF_Stage0[6];
    float s = sign(x);
    x = abs(x);
    x = x < D ? C * x + F : pow(A * x + B, G) + E;
    return s * x;
}
vec4 gamut_xform_Stage0(vec4 color) {
    color.xyz = uColorXform_Stage0 * color.xyz;
    return color;
}
vec4 color_xform_Stage0(vec4 color) {
    float nonZeroAlpha = max(color.w, 9.9999997473787516e-05);
    color = vec4(color.xyz / nonZeroAlpha, nonZeroAlpha);
    color.x = src_tf_Stage0(color.x);
    color.y = src_tf_Stage0(color.y);
    color.z = src_tf_Stage0(color.z);
    color = gamut_xform_Stage0(color);
    color.x = dst_tf_Stage0(color.x);
    color.y = dst_tf_Stage0(color.y);
    color.z = dst_tf_Stage0(color.z);
    color.xyz *= color.w;
    return color;
}
vec4 light_Stage2(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    float colorScale = uKD_Stage2 * dot(normal, surfaceToLight);
    return vec4(lightColor * clamp(colorScale, 0.0, 1.0), 1.0);
}
float sobel_Stage2(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage2(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage2(float m[9], float surfaceScale) {
    return pointToNormal_Stage2(sobel_Stage2(m[1], m[2], m[4], m[5], m[7], m[8], 0.5), sobel_Stage2(0.0, 0.0, m[1], m[7], m[2], m[8], 0.33333298563957214), surfaceScale);
}
vec4 light_Stage4_c0_c0(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    vec3 halfDir = normalize(surfaceToLight + vec3(0.0, 0.0, 1.0));
    float colorScale = uKS_Stage4_c0_c0 * pow(dot(normal, halfDir), uShininess_Stage4_c0_c0);
    vec3 color = lightColor * clamp(colorScale, 0.0, 1.0);
    return vec4(color, max(max(color.x, color.y), color.z));
}
float sobel_Stage4_c0_c0(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage4_c0_c0(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage4_c0_c0(float m[9], float surfaceScale) {
    return pointToNormal_Stage4_c0_c0(sobel_Stage4_c0_c0(m[0], m[1], m[3], m[4], 0.0, 0.0, 0.66666698455810547), sobel_Stage4_c0_c0(m[0], m[3], m[1], m[4], 0.0, 0.0, 0.66666698455810547), surfaceScale);
}
vec4 SpecularLighting_Stage4_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_2_Stage0;
    float m[9];
    vec4 temp0;
    {
        vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage4_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
        if (err > uDecalParams_Stage4_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[0] = temp0.w;
    vec4 temp1;
    {
        vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage4_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
        if (err > uDecalParams_Stage4_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[1] = temp1.w;
    vec4 temp2;
    {
        vec2 origCoord = coord + uImageIncrement_Stage4_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
        if (err > uDecalParams_Stage4_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[2] = temp2.w;
    vec4 temp3;
    {
        vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage4_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
        if (err > uDecalParams_Stage4_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[3] = temp3.w;
    vec4 temp4;
    {
        vec2 origCoord = coord;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
        if (err > uDecalParams_Stage4_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[4] = temp4.w;
    vec4 temp5;
    {
        vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage4_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
        if (err > uDecalParams_Stage4_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[5] = temp5.w;
    vec4 temp6;
    {
        vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage4_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
        if (err > uDecalParams_Stage4_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[6] = temp6.w;
    vec4 temp7;
    {
        vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage4_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
        if (err > uDecalParams_Stage4_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[7] = temp7.w;
    vec4 temp8;
    {
        vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage4_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage4_c0_c0.xy, uTexDom_Stage4_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage4, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage4_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage4_c0_c0.y);
        if (err > uDecalParams_Stage4_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage4_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[8] = temp8.w;
    vec3 surfaceToLight = uLightDirection_Stage4_c0_c0;
    _output = light_Stage4_c0_c0(normal_Stage4_c0_c0(m, uSurfaceScale_Stage4_c0_c0), surfaceToLight, uLightColor_Stage4_c0_c0);
    _output *= _input;
    return _output;
}
float _guarded_divide(float n, float d) {
    return n / d;
}
float _color_burn_component(float sc, float sa, float dc, float da) {
    if (da == dc) {
        return (sa * da + sc * (1.0 - da)) + dc * (1.0 - sa);
    } else if (sc == 0.0) {
        return dc * (1.0 - sa);
    }
    float d = max(0.0, da - _guarded_divide((da - dc) * sa, sc));
    return (d * sa + sc * (1.0 - da)) + dc * (1.0 - sa);
}
vec4 blend_color_burn(vec4 src, vec4 dst) {
    return vec4(_color_burn_component(src.x, src.w, dst.x, dst.w), _color_burn_component(src.y, src.w, dst.y, dst.w), _color_burn_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
void main() {
    vec4 outputColor_Stage0;
    {
        vec2 textureCoords;
        textureCoords = vtextureCoords_Stage0;
        vec4 textureDomain;
        textureDomain = vtextureDomain_Stage0;
        outputColor_Stage0 = vcolor_Stage0;
        outputColor_Stage0 = color_xform_Stage0(texture(uTextureSampler_0_Stage0, clamp(textureCoords, textureDomain.xy, textureDomain.zw))) * outputColor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 color = outputColor_Stage0;
        vec4 mask_color = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
        if (mask_color.w < 0.5) {
            if (color.w > uouterThreshold_Stage1) {
                float scale = uouterThreshold_Stage1 / color.w;
                color.xyz *= scale;
                color.w = uouterThreshold_Stage1;
            }
        } else if (color.w < uinnerThreshold_Stage1) {
            float scale = uinnerThreshold_Stage1 / max(0.0010000000474974513, color.w);
            color.xyz *= scale;
            color.w = uinnerThreshold_Stage1;
        }
        output_Stage1 = color;
    }
    vec4 output_Stage2;
    {
        vec2 coord = vTransformedCoords_1_Stage0;
        float m[9];
        vec4 temp0;
        {
            vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage2;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
            if (err > uDecalParams_Stage2.z) {
                err = 1.0;
            } else if (uDecalParams_Stage2.z < 1.0) {
                err = 0.0;
            }
            temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[0] = temp0.w;
        vec4 temp1;
        {
            vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage2;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
            if (err > uDecalParams_Stage2.z) {
                err = 1.0;
            } else if (uDecalParams_Stage2.z < 1.0) {
                err = 0.0;
            }
            temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[1] = temp1.w;
        vec4 temp2;
        {
            vec2 origCoord = coord + uImageIncrement_Stage2;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
            if (err > uDecalParams_Stage2.z) {
                err = 1.0;
            } else if (uDecalParams_Stage2.z < 1.0) {
                err = 0.0;
            }
            temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[2] = temp2.w;
        vec4 temp3;
        {
            vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage2;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
            if (err > uDecalParams_Stage2.z) {
                err = 1.0;
            } else if (uDecalParams_Stage2.z < 1.0) {
                err = 0.0;
            }
            temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[3] = temp3.w;
        vec4 temp4;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
            if (err > uDecalParams_Stage2.z) {
                err = 1.0;
            } else if (uDecalParams_Stage2.z < 1.0) {
                err = 0.0;
            }
            temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[4] = temp4.w;
        vec4 temp5;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage2;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
            if (err > uDecalParams_Stage2.z) {
                err = 1.0;
            } else if (uDecalParams_Stage2.z < 1.0) {
                err = 0.0;
            }
            temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[5] = temp5.w;
        vec4 temp6;
        {
            vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage2;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
            if (err > uDecalParams_Stage2.z) {
                err = 1.0;
            } else if (uDecalParams_Stage2.z < 1.0) {
                err = 0.0;
            }
            temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[6] = temp6.w;
        vec4 temp7;
        {
            vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage2;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
            if (err > uDecalParams_Stage2.z) {
                err = 1.0;
            } else if (uDecalParams_Stage2.z < 1.0) {
                err = 0.0;
            }
            temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[7] = temp7.w;
        vec4 temp8;
        {
            vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage2;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage2.xy, uTexDom_Stage2.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage2, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage2.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage2.y);
            if (err > uDecalParams_Stage2.z) {
                err = 1.0;
            } else if (uDecalParams_Stage2.z < 1.0) {
                err = 0.0;
            }
            temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        m[8] = temp8.w;
        vec3 surfaceToLight = normalize(uLightLocation_Stage2 - vec3(gl_FragCoord.xy, uSurfaceScale_Stage2 * m[4]));
        output_Stage2 = light_Stage2(normal_Stage2(m, uSurfaceScale_Stage2), surfaceToLight, uLightColor_Stage2);
    }
    vec4 output_Stage3;
    {
        vec4 inputColor = output_Stage2;
        output_Stage3 = um_Stage3 * inputColor + uv_Stage3;
        {
            output_Stage3.w = clamp(output_Stage3.w, 0.0, 1.0);
        }
        {
            output_Stage3.xyz *= output_Stage3.w;
        }
    }
    vec4 output_Stage4;
    {
        output_Stage4 = blend_color_burn(output_Stage3, SpecularLighting_Stage4_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage5;
    {
        float alpha;
        {
            float xSub, ySub;
            xSub = min(gl_FragCoord.x - urectUniform_Stage5.x, 0.0);
            xSub += min(urectUniform_Stage5.z - gl_FragCoord.x, 0.0);
            ySub = min(gl_FragCoord.y - urectUniform_Stage5.y, 0.0);
            ySub += min(urectUniform_Stage5.w - gl_FragCoord.y, 0.0);
            alpha = (1.0 + max(xSub, -1.0)) * (1.0 + max(ySub, -1.0));
        }
        output_Stage5 = output_Stage4 * alpha;
    }
    {
        if (all(lessThanEqual(output_Stage5.xyz, vec3(0.0)))) {
            discard;
        }
        vec2 _dstTexCoord = (gl_FragCoord.xy - uDstTextureUpperLeft_Stage6) * uDstTextureCoordScale_Stage6;
        vec4 _dstColor = texture(uDstTextureSampler_Stage6, _dstTexCoord);
        sk_FragColor = blend_src_in(output_Stage1, _dstColor);
        sk_FragColor = output_Stage5 * sk_FragColor + (vec4(1.0) - output_Stage5) * _dstColor;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 position;
in vec2 textureCoords;
in vec4 textureDomain;
in vec4 color;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vtextureCoords_Stage0;
flat out vec4 vtextureDomain_Stage0;
flat out vec4 vcolor_Stage0;
void main() {
    vec2 pos2 = position;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(textureCoords, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(textureCoords, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(textureCoords, 1.0)).xy;
    vtextureCoords_Stage0 = textureCoords;
    vtextureDomain_Stage0 = textureDomain;
    vcolor_Stage0 = color;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

