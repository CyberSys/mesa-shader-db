[require]
GLSL >= 1.40
GL_KHR_blend_equation_advanced

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uColor_Stage0;
uniform vec4 uboundsUniform_Stage1;
uniform float uxInvZoom_Stage1;
uniform float uyInvZoom_Stage1;
uniform float uxInvInset_Stage1;
uniform float uyInvInset_Stage1;
uniform vec2 uoffset_Stage1;
uniform vec2 ubaseFrequency_Stage2;
uniform float uz_Stage2;
uniform vec4 uellipse_Stage4;
uniform mat4 um_Stage5;
uniform vec4 uv_Stage5;
uniform vec4 uleftBorderColor_Stage6_c0_c0;
uniform vec4 urightBorderColor_Stage6_c0_c0;
uniform vec4 uscale01_Stage6_c0_c0_c1_c0;
uniform vec4 ubias01_Stage6_c0_c0_c1_c0;
uniform vec4 uscale23_Stage6_c0_c0_c1_c0;
uniform vec4 ubias23_Stage6_c0_c0_c1_c0;
uniform float uthreshold_Stage6_c0_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
uniform sampler2D uTextureSampler_1_Stage2;
uniform sampler2D uTextureSampler_0_Stage3;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vTransformedCoords_3_Stage0;
vec3 fade_Stage2(vec3 t) {
    return ((t * t) * t) * (t * (t * 6.0 - 15.0) + 10.0);
}
float perm_Stage2(float x) {
    return texture(uTextureSampler_0_Stage2, vec2(fract(x / 256.0), 0.0)).x * 255.0;
}
float grad_Stage2(float x, vec3 p) {
    return dot(texture(uTextureSampler_1_Stage2, vec2(fract(x / 16.0), 0.0)).xyz * 255.0 - vec3(1.0), p);
}
float lerp_Stage2(float a, float b, float w) {
    return a + w * (b - a);
}
float noise_Stage2(vec3 p) {
    vec3 P = mod(floor(p), 256.0);
    p -= floor(p);
    vec3 f = fade_Stage2(p);
    float A = perm_Stage2(P.x) + P.y;
    float AA = perm_Stage2(A) + P.z;
    float AB = perm_Stage2(A + 1.0) + P.z;
    float B = perm_Stage2(P.x + 1.0) + P.y;
    float BA = perm_Stage2(B) + P.z;
    float BB = perm_Stage2(B + 1.0) + P.z;
    float result = lerp_Stage2(lerp_Stage2(lerp_Stage2(grad_Stage2(perm_Stage2(AA), p), grad_Stage2(perm_Stage2(BA), p + vec3(-1.0, 0.0, 0.0)), f.x), lerp_Stage2(grad_Stage2(perm_Stage2(AB), p + vec3(0.0, -1.0, 0.0)), grad_Stage2(perm_Stage2(BB), p + vec3(-1.0, -1.0, 0.0)), f.x), f.y), lerp_Stage2(lerp_Stage2(grad_Stage2(perm_Stage2(AA + 1.0), p + vec3(0.0, 0.0, -1.0)), grad_Stage2(perm_Stage2(BA + 1.0), p + vec3(-1.0, 0.0, -1.0)), f.x), lerp_Stage2(grad_Stage2(perm_Stage2(AB + 1.0), p + vec3(0.0, -1.0, -1.0)), grad_Stage2(perm_Stage2(BB + 1.0), p + vec3(-1.0, -1.0, -1.0)), f.x), f.y), f.z);
    return result;
}
float noiseOctaves_Stage2(vec3 p) {
    float result = 0.0;
    float ratio = 1.0;
    for (float i = 0.0;i < 5.0; i++) {
        result += noise_Stage2(p) / ratio;
        p *= 2.0;
        ratio *= 2.0;
    }
    return (result + 1.0) / 2.0;
}
vec4 RadialGradientLayout_Stage6_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float t = length(vTransformedCoords_3_Stage0);
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 DualIntervalGradientColorizer_Stage6_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    if (t < uthreshold_Stage6_c0_c0_c1_c0) {
        scale = uscale01_Stage6_c0_c0_c1_c0;
        bias = ubias01_Stage6_c0_c0_c1_c0;
    } else {
        scale = uscale23_Stage6_c0_c0_c1_c0;
        bias = ubias23_Stage6_c0_c0_c1_c0;
    }
    _output = t * scale + bias;
    return _output;
}
vec4 ClampedGradientEffect_Stage6_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 t = RadialGradientLayout_Stage6_c0_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage6_c0_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage6_c0_c0;
    } else {
        _output = DualIntervalGradientColorizer_Stage6_c0_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    {
        vec2 coord = vTransformedCoords_0_Stage0;
        vec2 delta = (coord - uboundsUniform_Stage1.xy) * uboundsUniform_Stage1.zw;
        delta = min(delta, vec2(1.0, 1.0) - delta);
        delta *= vec2(uxInvInset_Stage1, uyInvInset_Stage1);
        if (delta.x < 2.0 && delta.y < 2.0) {
            delta = vec2(2.0, 2.0) - delta;
            float dist = length(delta);
            dist = max(2.0 - dist, 0.0);
        }
    }
    vec4 output_Stage2;
    {
        vec2 coords = vTransformedCoords_1_Stage0 * ubaseFrequency_Stage2;
        float r = noiseOctaves_Stage2(vec3(coords, uz_Stage2));
        float g = noiseOctaves_Stage2(vec3(coords, uz_Stage2));
        float b = noiseOctaves_Stage2(vec3(coords, uz_Stage2));
        float a = noiseOctaves_Stage2(vec3(coords, uz_Stage2));
        output_Stage2 = vec4(r, g, b, a);
        output_Stage2 = clamp(output_Stage2, 0.0, 1.0);
        output_Stage2 = vec4(output_Stage2.xyz * output_Stage2.www, output_Stage2.w);
    }
    vec4 output_Stage3;
    {
        output_Stage3 = texture(uTextureSampler_0_Stage3, vTransformedCoords_2_Stage0) * output_Stage2;
    }
    vec4 output_Stage4;
    {
        vec2 d = gl_FragCoord.xy - uellipse_Stage4.xy;
        vec2 Z = d * uellipse_Stage4.zw;
        float implicit = dot(Z, d) - 1.0;
        float grad_dot = 4.0 * dot(Z, Z);
        {
            grad_dot = max(grad_dot, 1.1754999560161448e-38);
        }
        float approx_dist = implicit * inversesqrt(grad_dot);
        float alpha;
        {
            alpha = approx_dist > 0.0 ? 1.0 : 0.0;
        }
        output_Stage4 = output_Stage3 * alpha;
    }
    vec4 output_Stage5;
    {
        vec4 inputColor = output_Stage4;
        output_Stage5 = um_Stage5 * inputColor + uv_Stage5;
        {
            output_Stage5 = clamp(output_Stage5, 0.0, 1.0);
        }
    }
    vec4 output_Stage6;
    {
        output_Stage6 = blend_dst_in(vec4(1.0), ClampedGradientEffect_Stage6_c0_c0(vec4(1.0)));
    }
    {
        sk_FragColor = output_Stage6 * output_Stage5;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
in vec2 inPosition;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vTransformedCoords_3_Stage0;
void main() {
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

