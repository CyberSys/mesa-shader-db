[require]
GLSL >= 1.40

[fragment shader]
#version 140

out vec4 sk_FragColor;
uniform vec4 uCoordTransformMatrix_2_Stage0;
uniform vec4 uboundsUniform_Stage2_c0_c0;
uniform float uxInvZoom_Stage2_c0_c0;
uniform float uyInvZoom_Stage2_c0_c0;
uniform float uxInvInset_Stage2_c0_c0;
uniform float uyInvInset_Stage2_c0_c0;
uniform vec2 uoffset_Stage2_c0_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec3 vTransformedCoords_1_Stage0;
vec4 MagnifierEffect_Stage2_c0_c0(vec4 _input, vec2 _coords) {
    _coords = _coords * uCoordTransformMatrix_2_Stage0.xz + uCoordTransformMatrix_2_Stage0.yw;
    vec4 _output;
    vec2 coord = _coords;
    vec2 zoom_coord = uoffset_Stage2_c0_c0 + coord * vec2(uxInvZoom_Stage2_c0_c0, uyInvZoom_Stage2_c0_c0);
    vec2 delta = (coord - uboundsUniform_Stage2_c0_c0.xy) * uboundsUniform_Stage2_c0_c0.zw;
    delta = min(delta, vec2(1.0, 1.0) - delta);
    delta *= vec2(uxInvInset_Stage2_c0_c0, uyInvInset_Stage2_c0_c0);
    float weight = 0.0;
    if (delta.x < 2.0 && delta.y < 2.0) {
        delta = vec2(2.0, 2.0) - delta;
        float dist = length(delta);
        dist = max(2.0 - dist, 0.0);
        weight = min(dist * dist, 1.0);
    } else {
        vec2 delta_squared = delta * delta;
        weight = min(min(delta_squared.x, delta_squared.y), 1.0);
    }
    _output = texture(uTextureSampler_0_Stage2, mix(coord, zoom_coord, weight));
    return _output;
}
void main() {
    vec4 output_Stage1;
    {
        output_Stage1 = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
    }
    vec4 output_Stage2;
    {
        vec2 vTransformedCoords_1_Stage0_ensure2D = vTransformedCoords_1_Stage0.xy / vTransformedCoords_1_Stage0.z;
        vec2 coord = vTransformedCoords_1_Stage0_ensure2D - vec2(0.5);
        vec2 f = fract(coord);
        coord += 0.5 - f;
        vec4 wx = mat4(0.055555555555555552, 0.88888888888888884, 0.055555555555555552, 0.0, -0.5, 0.0, 0.5, 0.0, 0.83333333333333337, -2.0, 1.5, -0.33333333333333331, -0.3888888888888889, 1.1666666666666667, -1.1666666666666667, 0.3888888888888889) * vec4(1.0, f.x, f.x * f.x, (f.x * f.x) * f.x);
        vec4 wy = mat4(0.055555555555555552, 0.88888888888888884, 0.055555555555555552, 0.0, -0.5, 0.0, 0.5, 0.0, 0.83333333333333337, -2.0, 1.5, -0.33333333333333331, -0.3888888888888889, 1.1666666666666667, -1.1666666666666667, 0.3888888888888889) * vec4(1.0, f.y, f.y * f.y, (f.y * f.y) * f.y);
        vec4 rowColors[4];
        rowColors[0] = MagnifierEffect_Stage2_c0_c0(vec4(1.0), coord + vec2(-1.0, -1.0));
        rowColors[1] = MagnifierEffect_Stage2_c0_c0(vec4(1.0), coord + vec2(0.0, -1.0));
        rowColors[2] = MagnifierEffect_Stage2_c0_c0(vec4(1.0), coord + vec2(1.0, -1.0));
        rowColors[3] = MagnifierEffect_Stage2_c0_c0(vec4(1.0), coord + vec2(2.0, -1.0));
        vec4 s0 = ((wx.x * rowColors[0] + wx.y * rowColors[1]) + wx.z * rowColors[2]) + wx.w * rowColors[3];
        rowColors[0] = MagnifierEffect_Stage2_c0_c0(vec4(1.0), coord + vec2(-1.0, 0.0));
        rowColors[1] = MagnifierEffect_Stage2_c0_c0(vec4(1.0), coord);
        rowColors[2] = MagnifierEffect_Stage2_c0_c0(vec4(1.0), coord + vec2(1.0, 0.0));
        rowColors[3] = MagnifierEffect_Stage2_c0_c0(vec4(1.0), coord + vec2(2.0, 0.0));
        vec4 s1 = ((wx.x * rowColors[0] + wx.y * rowColors[1]) + wx.z * rowColors[2]) + wx.w * rowColors[3];
        rowColors[0] = MagnifierEffect_Stage2_c0_c0(vec4(1.0), coord + vec2(-1.0, 1.0));
        rowColors[1] = MagnifierEffect_Stage2_c0_c0(vec4(1.0), coord + vec2(0.0, 1.0));
        rowColors[2] = MagnifierEffect_Stage2_c0_c0(vec4(1.0), coord + vec2(1.0, 1.0));
        rowColors[3] = MagnifierEffect_Stage2_c0_c0(vec4(1.0), coord + vec2(2.0, 1.0));
        vec4 s2 = ((wx.x * rowColors[0] + wx.y * rowColors[1]) + wx.z * rowColors[2]) + wx.w * rowColors[3];
        rowColors[0] = MagnifierEffect_Stage2_c0_c0(vec4(1.0), coord + vec2(-1.0, 2.0));
        rowColors[1] = MagnifierEffect_Stage2_c0_c0(vec4(1.0), coord + vec2(0.0, 2.0));
        rowColors[2] = MagnifierEffect_Stage2_c0_c0(vec4(1.0), coord + vec2(1.0, 2.0));
        rowColors[3] = MagnifierEffect_Stage2_c0_c0(vec4(1.0), coord + vec2(2.0, 2.0));
        vec4 s3 = ((wx.x * rowColors[0] + wx.y * rowColors[1]) + wx.z * rowColors[2]) + wx.w * rowColors[3];
        vec4 bicubicColor = ((wy.x * s0 + wy.y * s1) + wy.z * s2) + wy.w * s3;
        bicubicColor = clamp(bicubicColor, 0.0, 1.0);
        output_Stage2 = bicubicColor * output_Stage1;
    }
    {
        sk_FragColor = output_Stage2;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 position;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec3 vTransformedCoords_1_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = uCoordTransformMatrix_1_Stage0 * vec3(localCoord, 1.0);
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

