[require]
GLSL >= 1.40
GL_KHR_blend_equation_advanced

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uColor_Stage0;
uniform vec2 uImageIncrement_Stage1_c0_c0;
uniform float uSurfaceScale_Stage1_c0_c0;
uniform vec3 uLightColor_Stage1_c0_c0;
uniform float uKS_Stage1_c0_c0;
uniform float uShininess_Stage1_c0_c0;
uniform vec4 uTexDom_Stage1_c0_c0;
uniform vec3 uDecalParams_Stage1_c0_c0;
uniform vec3 uLightDirection_Stage1_c0_c0;
uniform vec4 ucolor_Stage1_c1_c0_c0_c0_c0_c0;
uniform vec4 ucolor_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec3 uedges_Stage1_c1_c0_c1_c0_c0_c0[6];
uniform vec2 uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
uniform float uSurfaceScale_Stage1_c1_c0_c1_c0_c1_c0;
uniform vec3 uLightColor_Stage1_c1_c0_c1_c0_c1_c0;
uniform float uKD_Stage1_c1_c0_c1_c0_c1_c0;
uniform vec4 uTexDom_Stage1_c1_c0_c1_c0_c1_c0;
uniform vec3 uDecalParams_Stage1_c1_c0_c1_c0_c1_c0;
uniform vec3 uLightDirection_Stage1_c1_c0_c1_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
in vec2 vTransformedCoords_0_Stage0;
in vec2 vTransformedCoords_1_Stage0;
vec4 light_Stage1_c0_c0(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    vec3 halfDir = normalize(surfaceToLight + vec3(0.0, 0.0, 1.0));
    float colorScale = uKS_Stage1_c0_c0 * pow(dot(normal, halfDir), uShininess_Stage1_c0_c0);
    vec3 color = lightColor * clamp(colorScale, 0.0, 1.0);
    return vec4(color, max(max(color.x, color.y), color.z));
}
float sobel_Stage1_c0_c0(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage1_c0_c0(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage1_c0_c0(float m[9], float surfaceScale) {
    return pointToNormal_Stage1_c0_c0(sobel_Stage1_c0_c0(m[0], m[1], m[3], m[4], m[6], m[7], 0.5), sobel_Stage1_c0_c0(m[0], m[6], m[1], m[7], 0.0, 0.0, 0.33333298563957214), surfaceScale);
}
vec4 SpecularLighting_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_0_Stage0;
    float m[9];
    vec4 temp0;
    {
        vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage1_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0.xy, uTexDom_Stage1_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[0] = temp0.w;
    vec4 temp1;
    {
        vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage1_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0.xy, uTexDom_Stage1_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[1] = temp1.w;
    vec4 temp2;
    {
        vec2 origCoord = coord + uImageIncrement_Stage1_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0.xy, uTexDom_Stage1_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[2] = temp2.w;
    vec4 temp3;
    {
        vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage1_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0.xy, uTexDom_Stage1_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[3] = temp3.w;
    vec4 temp4;
    {
        vec2 origCoord = coord;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0.xy, uTexDom_Stage1_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[4] = temp4.w;
    vec4 temp5;
    {
        vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0.xy, uTexDom_Stage1_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[5] = temp5.w;
    vec4 temp6;
    {
        vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage1_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0.xy, uTexDom_Stage1_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[6] = temp6.w;
    vec4 temp7;
    {
        vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage1_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0.xy, uTexDom_Stage1_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[7] = temp7.w;
    vec4 temp8;
    {
        vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage1_c0_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0.xy, uTexDom_Stage1_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0.z < 1.0) {
            err = 0.0;
        }
        temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[8] = temp8.w;
    vec3 surfaceToLight = uLightDirection_Stage1_c0_c0;
    _output = light_Stage1_c0_c0(normal_Stage1_c0_c0(m, uSurfaceScale_Stage1_c0_c0), surfaceToLight, uLightColor_Stage1_c0_c0);
    _output *= _input;
    return _output;
}
vec4 ConstColorProcessor_Stage1_c1_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    {
        _output = _input * ucolor_Stage1_c1_c0_c0_c0_c0_c0;
    }
    return _output;
}
vec4 ConstColorProcessor_Stage1_c1_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    {
        _output = ucolor_Stage1_c1_c0_c0_c0_c1_c0;
    }
    return _output;
}
float _blend_color_luminance(vec3 color) {
    return dot(vec3(0.30000001192092896, 0.5899999737739563, 0.10999999940395355), color);
}
vec3 _blend_set_color_luminance(vec3 hueSatColor, float alpha, vec3 lumColor) {
    float lum = _blend_color_luminance(lumColor);
    vec3 result = (lum - _blend_color_luminance(hueSatColor)) + hueSatColor;
    float minComp = min(min(result.x, result.y), result.z);
    float maxComp = max(max(result.x, result.y), result.z);
    if (minComp < 0.0 && lum != minComp) {
        result = lum + ((result - lum) * lum) / (lum - minComp);
    }
    if (maxComp > alpha && maxComp != lum) {
        return lum + ((result - lum) * (alpha - lum)) / (maxComp - lum);
    }
    return result;
}
vec4 blend_luminosity(vec4 src, vec4 dst) {
    float alpha = dst.w * src.w;
    vec3 sda = src.xyz * dst.w;
    vec3 dsa = dst.xyz * src.w;
    return vec4((((_blend_set_color_luminance(dsa, alpha, sda) + dst.xyz) - dsa) + src.xyz) - sda, (src.w + dst.w) - alpha);
}
vec4 ComposeTwo_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_luminosity(ConstColorProcessor_Stage1_c1_c0_c0_c0_c0_c0(inputColor), ConstColorProcessor_Stage1_c1_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ConvexPoly_Stage1_c1_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float alpha = 1.0;
    float edge;
    edge = dot(uedges_Stage1_c1_c0_c1_c0_c0_c0[0], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0_c1_c0_c0_c0[1], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0_c1_c0_c0_c0[2], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0_c1_c0_c0_c0[3], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0_c1_c0_c0_c0[4], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0_c1_c0_c0_c0[5], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = edge >= 0.5 ? 1.0 : 0.0;
    alpha *= edge;
    alpha = 1.0 - alpha;
    _output = _input * alpha;
    return _output;
}
vec4 light_Stage1_c1_c0_c1_c0_c1_c0(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    float colorScale = uKD_Stage1_c1_c0_c1_c0_c1_c0 * dot(normal, surfaceToLight);
    return vec4(lightColor * clamp(colorScale, 0.0, 1.0), 1.0);
}
float sobel_Stage1_c1_c0_c1_c0_c1_c0(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage1_c1_c0_c1_c0_c1_c0(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage1_c1_c0_c1_c0_c1_c0(float m[9], float surfaceScale) {
    return pointToNormal_Stage1_c1_c0_c1_c0_c1_c0(sobel_Stage1_c1_c0_c1_c0_c1_c0(m[0], m[2], m[3], m[5], 0.0, 0.0, 0.33333298563957214), sobel_Stage1_c1_c0_c1_c0_c1_c0(m[0], m[3], m[1], m[4], m[2], m[5], 0.5), surfaceScale);
}
vec4 DiffuseLighting_Stage1_c1_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_1_Stage0;
    float m[9];
    vec4 temp0;
    {
        vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[0] = temp0.w;
    vec4 temp1;
    {
        vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[1] = temp1.w;
    vec4 temp2;
    {
        vec2 origCoord = coord + uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[2] = temp2.w;
    vec4 temp3;
    {
        vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[3] = temp3.w;
    vec4 temp4;
    {
        vec2 origCoord = coord;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[4] = temp4.w;
    vec4 temp5;
    {
        vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[5] = temp5.w;
    vec4 temp6;
    {
        vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[6] = temp6.w;
    vec4 temp7;
    {
        vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[7] = temp7.w;
    vec4 temp8;
    {
        vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage1_c1_c0_c1_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.xy, uTexDom_Stage1_c1_c0_c1_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c1_c0_c1_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[8] = temp8.w;
    vec3 surfaceToLight = uLightDirection_Stage1_c1_c0_c1_c0_c1_c0;
    _output = light_Stage1_c1_c0_c1_c0_c1_c0(normal_Stage1_c1_c0_c1_c0_c1_c0(m, uSurfaceScale_Stage1_c1_c0_c1_c0_c1_c0), surfaceToLight, uLightColor_Stage1_c1_c0_c1_c0_c1_c0);
    _output *= _input;
    return _output;
}
vec4 blend_color(vec4 src, vec4 dst) {
    float alpha = dst.w * src.w;
    vec3 sda = src.xyz * dst.w;
    vec3 dsa = dst.xyz * src.w;
    return vec4((((_blend_set_color_luminance(sda, alpha, dsa) + dst.xyz) - dsa) + src.xyz) - sda, (src.w + dst.w) - alpha);
}
vec4 ComposeTwo_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_color(ConvexPoly_Stage1_c1_c0_c1_c0_c0_c0(inputColor), DiffuseLighting_Stage1_c1_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_src_over(vec4 src, vec4 dst) {
    return src + (1.0 - src.w) * dst;
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_over(ComposeTwo_Stage1_c1_c0_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_src_over(SpecularLighting_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
in vec2 inPosition;
in vec2 inLocalCoord;
out vec2 vTransformedCoords_0_Stage0;
out vec2 vTransformedCoords_1_Stage0;
void main() {
    vec3 pos3 = uViewM_Stage0 * vec3(inPosition, 1.0);
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    gl_Position = vec4(pos3.x, pos3.y, 0.0, pos3.z);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

