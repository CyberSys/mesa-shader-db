[require]
GLSL >= 1.40
GL_KHR_blend_equation_advanced

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 ucircle_Stage1_c0_c0_c1_c0;
uniform vec4 uinnerRect_Stage1_c1_c0_c0_c0;
uniform vec2 uradiusPlusHalf_Stage1_c1_c0_c0_c0;
uniform vec4 urectH_Stage1_c1_c0_c1_c0;
uniform float uinvSixSigma_Stage1_c1_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
noperspective in vec2 vEllipseOffsets0_Stage0;
noperspective in vec2 vEllipseOffsets1_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
vec4 TextureEffect_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    _output = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0) * _input;
    return _output;
}
vec4 CircleEffect_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float d;
    {
        d = (1.0 - length((ucircle_Stage1_c0_c0_c1_c0.xy - gl_FragCoord.xy) * ucircle_Stage1_c0_c0_c1_c0.w)) * ucircle_Stage1_c0_c0_c1_c0.z;
    }
    {
        _output = _input * clamp(d, 0.0, 1.0);
    }
    return _output;
}
float _blend_color_saturation(vec3 color) {
    return max(max(color.x, color.y), color.z) - min(min(color.x, color.y), color.z);
}
vec3 _blend_set_color_saturation_helper(vec3 minMidMax, float sat) {
    if (minMidMax.x < minMidMax.z) {
        return vec3(0.0, (sat * (minMidMax.y - minMidMax.x)) / (minMidMax.z - minMidMax.x), sat);
    }
    return vec3(0.0);
}
vec3 _blend_set_color_saturation(vec3 hueLumColor, vec3 satColor) {
    float sat = _blend_color_saturation(satColor);
    if (hueLumColor.x <= hueLumColor.y) {
        if (hueLumColor.y <= hueLumColor.z) {
            hueLumColor.xyz = _blend_set_color_saturation_helper(hueLumColor, sat);
        } else if (hueLumColor.x <= hueLumColor.z) {
            hueLumColor.xzy = _blend_set_color_saturation_helper(hueLumColor.xzy, sat);
        } else {
            hueLumColor.zxy = _blend_set_color_saturation_helper(hueLumColor.zxy, sat);
        }
    } else if (hueLumColor.x <= hueLumColor.z) {
        hueLumColor.yxz = _blend_set_color_saturation_helper(hueLumColor.yxz, sat);
    } else if (hueLumColor.y <= hueLumColor.z) {
        hueLumColor.yzx = _blend_set_color_saturation_helper(hueLumColor.yzx, sat);
    } else {
        hueLumColor.zyx = _blend_set_color_saturation_helper(hueLumColor.zyx, sat);
    }
    return hueLumColor;
}
float _blend_color_luminance(vec3 color) {
    return dot(vec3(0.30000001192092896, 0.5899999737739563, 0.10999999940395355), color);
}
vec3 _blend_set_color_luminance(vec3 hueSatColor, float alpha, vec3 lumColor) {
    float lum = _blend_color_luminance(lumColor);
    vec3 result = (lum - _blend_color_luminance(hueSatColor)) + hueSatColor;
    float minComp = min(min(result.x, result.y), result.z);
    float maxComp = max(max(result.x, result.y), result.z);
    if (minComp < 0.0 && lum != minComp) {
        result = lum + ((result - lum) * lum) / (lum - minComp);
    }
    if (maxComp > alpha && maxComp != lum) {
        return lum + ((result - lum) * (alpha - lum)) / (maxComp - lum);
    }
    return result;
}
vec4 blend_hue(vec4 src, vec4 dst) {
    float alpha = dst.w * src.w;
    vec3 sda = src.xyz * dst.w;
    vec3 dsa = dst.xyz * src.w;
    return vec4((((_blend_set_color_luminance(_blend_set_color_saturation(sda, dsa), alpha, dsa) + dst.xyz) - dsa) + src.xyz) - sda, (src.w + dst.w) - alpha);
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_hue(TextureEffect_Stage1_c0_c0_c0_c0(inputColor), CircleEffect_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 CircularRRect_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c1_c0_c0_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c1_c0_c0_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    float alpha = clamp(uradiusPlusHalf_Stage1_c1_c0_c0_c0.x - length(dxy), 0.0, 1.0);
    alpha = 1.0 - alpha;
    _output = _input * alpha;
    return _output;
}
vec4 RectBlurEffect_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float xCoverage, yCoverage;
    {
        float x, y;
        {
            x = max(urectH_Stage1_c1_c0_c1_c0.x - gl_FragCoord.x, gl_FragCoord.x - urectH_Stage1_c1_c0_c1_c0.z);
            y = max(urectH_Stage1_c1_c0_c1_c0.y - gl_FragCoord.y, gl_FragCoord.y - urectH_Stage1_c1_c0_c1_c0.w);
        }
        xCoverage = texture(uTextureSampler_1_Stage1, vec2(x * uinvSixSigma_Stage1_c1_c0_c1_c0, 0.5)).w;
        yCoverage = texture(uTextureSampler_1_Stage1, vec2(y * uinvSixSigma_Stage1_c1_c0_c1_c0, 0.5)).w;
        _output = (_input * xCoverage) * yCoverage;
    }
    _output = (_input * xCoverage) * yCoverage;
    return _output;
}
float _guarded_divide(float n, float d) {
    return n / d;
}
float _soft_light_component(float sc, float sa, float dc, float da) {
    if (2.0 * sc <= sa) {
        return (_guarded_divide((dc * dc) * (sa - 2.0 * sc), da) + (1.0 - da) * sc) + dc * ((-sa + 2.0 * sc) + 1.0);
    } else if (4.0 * dc <= da) {
        float DSqd = dc * dc;
        float DCub = DSqd * dc;
        float DaSqd = da * da;
        float DaCub = DaSqd * da;
        return _guarded_divide(((DaSqd * (sc - dc * ((3.0 * sa - 6.0 * sc) - 1.0)) + ((12.0 * da) * DSqd) * (sa - 2.0 * sc)) - (16.0 * DCub) * (sa - 2.0 * sc)) - DaCub * sc, DaSqd);
    }
    return ((dc * ((sa - 2.0 * sc) + 1.0) + sc) - sqrt(da * dc) * (sa - 2.0 * sc)) - da * sc;
}
vec4 blend_soft_light(vec4 src, vec4 dst) {
    if (dst.w == 0.0) {
        return src;
    }
    return vec4(_soft_light_component(src.x, src.w, dst.x, dst.w), _soft_light_component(src.y, src.w, dst.y, dst.w), _soft_light_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_soft_light(CircularRRect_Stage1_c1_c0_c0_c0(inputColor), RectBlurEffect_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 blend_difference(vec4 src, vec4 dst) {
    return vec4((src.xyz + dst.xyz) - 2.0 * min(src.xyz * dst.w, dst.xyz * src.w), src.w + (1.0 - src.w) * dst.w);
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vinColor_Stage0;
        vec2 scaledOffset = vEllipseOffsets0_Stage0;
        float test = dot(scaledOffset, scaledOffset) - 1.0;
        vec2 duvdx = dFdx(vEllipseOffsets0_Stage0);
        vec2 duvdy = dFdy(vEllipseOffsets0_Stage0);
        vec2 grad = vec2(vEllipseOffsets0_Stage0.x * duvdx.x + vEllipseOffsets0_Stage0.y * duvdx.y, vEllipseOffsets0_Stage0.x * duvdy.x + vEllipseOffsets0_Stage0.y * duvdy.y);
        float grad_dot = 4.0 * dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_difference(ComposeTwo_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = outputCoverage_Stage0 * output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffsets0;
in vec2 inEllipseOffsets1;
noperspective out vec2 vEllipseOffsets0_Stage0;
noperspective out vec2 vEllipseOffsets1_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vEllipseOffsets0_Stage0 = inEllipseOffsets0;
    vEllipseOffsets1_Stage0 = inEllipseOffsets1;
    vinColor_Stage0 = inColor;
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

