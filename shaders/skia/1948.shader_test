[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uColor_Stage0;
uniform vec2 uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec4 uKernel_Stage1_c0_c0_c0_c0_c0_c0[3];
uniform vec2 uKernelOffset_Stage1_c0_c0_c0_c0_c0_c0;
uniform float uGain_Stage1_c0_c0_c0_c0_c0_c0;
uniform float uBias_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec4 uTexDom_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec3 uDecalParams_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec2 uImageIncrement_Stage1_c0_c0_c1_c0;
uniform float uSurfaceScale_Stage1_c0_c0_c1_c0;
uniform vec3 uLightColor_Stage1_c0_c0_c1_c0;
uniform float uKS_Stage1_c0_c0_c1_c0;
uniform float uShininess_Stage1_c0_c0_c1_c0;
uniform vec4 uTexDom_Stage1_c0_c0_c1_c0;
uniform vec3 uDecalParams_Stage1_c0_c0_c1_c0;
uniform vec3 uLightLocation_Stage1_c0_c0_c1_c0;
uniform float uExponent_Stage1_c0_c0_c1_c0;
uniform float uCosInnerConeAngle_Stage1_c0_c0_c1_c0;
uniform float uCosOuterConeAngle_Stage1_c0_c0_c1_c0;
uniform float uConeScale_Stage1_c0_c0_c1_c0;
uniform vec3 uS_Stage1_c0_c0_c1_c0;
uniform vec3 uedges_Stage1_c1_c0_c0_c0_c0_c0[6];
uniform vec4 uboundsUniform_Stage1_c1_c0_c0_c0_c1_c0;
uniform float uxInvZoom_Stage1_c1_c0_c0_c0_c1_c0;
uniform float uyInvZoom_Stage1_c1_c0_c0_c0_c1_c0;
uniform float uxInvInset_Stage1_c1_c0_c0_c0_c1_c0;
uniform float uyInvInset_Stage1_c1_c0_c0_c0_c1_c0;
uniform vec2 uoffset_Stage1_c1_c0_c0_c0_c1_c0;
uniform mat4 um_Stage1_c1_c0_c1_c0_c0_c0;
uniform vec4 uv_Stage1_c1_c0_c1_c0_c0_c0;
uniform float ucornerRadius_Stage1_c1_c0_c1_c0_c1_c0;
uniform vec4 uproxyRect_Stage1_c1_c0_c1_c0_c1_c0;
uniform float ublurRadius_Stage1_c1_c0_c1_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_2_Stage1;
uniform sampler2D uTextureSampler_3_Stage1;
in vec2 vTransformedCoords_0_Stage0;
in vec2 vTransformedCoords_1_Stage0;
in vec2 vTransformedCoords_2_Stage0;
vec4 MatrixConvolution_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_0_Stage0 - uKernelOffset_Stage1_c0_c0_c0_c0_c0_c0 * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
    vec4 c;
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[0].x;
        {
            vec2 origCoord = coord;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[0].y;
        {
            vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[0].z;
        {
            vec2 origCoord = coord + vec2(2.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[0].w;
        {
            vec2 origCoord = coord + vec2(3.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[1].x;
        {
            vec2 origCoord = coord + vec2(4.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[1].y;
        {
            vec2 origCoord = coord + vec2(5.0, 0.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[1].z;
        {
            vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[1].w;
        {
            vec2 origCoord = coord + uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[2].x;
        {
            vec2 origCoord = coord + vec2(2.0, 1.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[2].y;
        {
            vec2 origCoord = coord + vec2(3.0, 1.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[2].z;
        {
            vec2 origCoord = coord + vec2(4.0, 1.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        float k = uKernel_Stage1_c0_c0_c0_c0_c0_c0[2].w;
        {
            vec2 origCoord = coord + vec2(5.0, 1.0) * uImageIncrement_Stage1_c0_c0_c0_c0_c0_c0;
            vec2 clampedCoord;
            clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.zw);
            vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
            float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.y);
            if (err > uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z) {
                err = 1.0;
            } else if (uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z < 1.0) {
                err = 0.0;
            }
            c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
        }
        c.xyz /= c.w;
        c.xyz = clamp(c.xyz, 0.0, 1.0);
        sum += c * k;
    }
    {
        vec2 origCoord = vTransformedCoords_0_Stage0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.xy, uTexDom_Stage1_c0_c0_c0_c0_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_0_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c0_c0_c0_c0.z < 1.0) {
            err = 0.0;
        }
        c = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    _output.w = c.w;
    _output.xyz = clamp(sum.xyz * uGain_Stage1_c0_c0_c0_c0_c0_c0 + uBias_Stage1_c0_c0_c0_c0_c0_c0, 0.0, 1.0);
    _output.xyz *= _output.w;
    _output *= _input;
    return _output;
}
vec4 Big_Ole_Key_Stage1_c0_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    _output = _input;
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
vec4 ComposeTwo_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_dst_in(MatrixConvolution_Stage1_c0_c0_c0_c0_c0_c0(inputColor), Big_Ole_Key_Stage1_c0_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 light_Stage1_c0_c0_c1_c0(vec3 normal, vec3 surfaceToLight, vec3 lightColor) {
    vec3 halfDir = normalize(surfaceToLight + vec3(0.0, 0.0, 1.0));
    float colorScale = uKS_Stage1_c0_c0_c1_c0 * pow(dot(normal, halfDir), uShininess_Stage1_c0_c0_c1_c0);
    vec3 color = lightColor * clamp(colorScale, 0.0, 1.0);
    return vec4(color, max(max(color.x, color.y), color.z));
}
float sobel_Stage1_c0_c0_c1_c0(float a, float b, float c, float d, float e, float f, float scale) {
    return (((((-a + b) - 2.0 * c) + 2.0 * d) - e) + f) * scale;
}
vec3 pointToNormal_Stage1_c0_c0_c1_c0(float x, float y, float scale) {
    return normalize(vec3(-x * scale, -y * scale, 1.0));
}
vec3 normal_Stage1_c0_c0_c1_c0(float m[9], float surfaceScale) {
    return pointToNormal_Stage1_c0_c0_c1_c0(sobel_Stage1_c0_c0_c1_c0(m[0], m[2], m[3], m[5], m[6], m[8], 0.25), sobel_Stage1_c0_c0_c1_c0(m[0], m[6], m[1], m[7], m[2], m[8], 0.25), surfaceScale);
}
vec3 lightColor_Stage1_c0_c0_c1_c0(vec3 surfaceToLight) {
    float cosAngle = -dot(surfaceToLight, uS_Stage1_c0_c0_c1_c0);
    if (cosAngle < uCosOuterConeAngle_Stage1_c0_c0_c1_c0) {
        return vec3(0.0);
    }
    float scale = pow(cosAngle, uExponent_Stage1_c0_c0_c1_c0);
    if (cosAngle < uCosInnerConeAngle_Stage1_c0_c0_c1_c0) {
        return ((uLightColor_Stage1_c0_c0_c1_c0 * scale) * (cosAngle - uCosOuterConeAngle_Stage1_c0_c0_c1_c0)) * uConeScale_Stage1_c0_c0_c1_c0;
    }
    return uLightColor_Stage1_c0_c0_c1_c0;
}
vec4 SpecularLighting_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_1_Stage0;
    float m[9];
    vec4 temp0;
    {
        vec2 origCoord = coord + vec2(-1.0, 1.0) * uImageIncrement_Stage1_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c1_c0.xy, uTexDom_Stage1_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp0 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[0] = temp0.w;
    vec4 temp1;
    {
        vec2 origCoord = coord + vec2(0.0, 1.0) * uImageIncrement_Stage1_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c1_c0.xy, uTexDom_Stage1_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp1 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[1] = temp1.w;
    vec4 temp2;
    {
        vec2 origCoord = coord + uImageIncrement_Stage1_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c1_c0.xy, uTexDom_Stage1_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp2 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[2] = temp2.w;
    vec4 temp3;
    {
        vec2 origCoord = coord + vec2(-1.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c1_c0.xy, uTexDom_Stage1_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp3 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[3] = temp3.w;
    vec4 temp4;
    {
        vec2 origCoord = coord;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c1_c0.xy, uTexDom_Stage1_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp4 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[4] = temp4.w;
    vec4 temp5;
    {
        vec2 origCoord = coord + vec2(1.0, 0.0) * uImageIncrement_Stage1_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c1_c0.xy, uTexDom_Stage1_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp5 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[5] = temp5.w;
    vec4 temp6;
    {
        vec2 origCoord = coord + vec2(-1.0, -1.0) * uImageIncrement_Stage1_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c1_c0.xy, uTexDom_Stage1_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp6 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[6] = temp6.w;
    vec4 temp7;
    {
        vec2 origCoord = coord + vec2(0.0, -1.0) * uImageIncrement_Stage1_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c1_c0.xy, uTexDom_Stage1_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp7 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[7] = temp7.w;
    vec4 temp8;
    {
        vec2 origCoord = coord + vec2(1.0, -1.0) * uImageIncrement_Stage1_c0_c0_c1_c0;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage1_c0_c0_c1_c0.xy, uTexDom_Stage1_c0_c0_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage1, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage1_c0_c0_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage1_c0_c0_c1_c0.y);
        if (err > uDecalParams_Stage1_c0_c0_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage1_c0_c0_c1_c0.z < 1.0) {
            err = 0.0;
        }
        temp8 = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    m[8] = temp8.w;
    vec3 surfaceToLight = normalize(uLightLocation_Stage1_c0_c0_c1_c0 - vec3(gl_FragCoord.xy, uSurfaceScale_Stage1_c0_c0_c1_c0 * m[4]));
    _output = light_Stage1_c0_c0_c1_c0(normal_Stage1_c0_c0_c1_c0(m, uSurfaceScale_Stage1_c0_c0_c1_c0), surfaceToLight, lightColor_Stage1_c0_c0_c1_c0(surfaceToLight));
    _output *= _input;
    return _output;
}
vec4 blend_src_over(vec4 src, vec4 dst) {
    return src + (1.0 - src.w) * dst;
}
vec4 blend_darken(vec4 src, vec4 dst) {
    vec4 result = blend_src_over(src, dst);
    result.xyz = min(result.xyz, (1.0 - dst.w) * src.xyz + dst.xyz);
    return result;
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_darken(ComposeTwo_Stage1_c0_c0_c0_c0(inputColor), SpecularLighting_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ConvexPoly_Stage1_c1_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float alpha = 1.0;
    float edge;
    edge = dot(uedges_Stage1_c1_c0_c0_c0_c0_c0[0], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = clamp(edge, 0.0, 1.0);
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0_c0_c0_c0_c0[1], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = clamp(edge, 0.0, 1.0);
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0_c0_c0_c0_c0[2], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = clamp(edge, 0.0, 1.0);
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0_c0_c0_c0_c0[3], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = clamp(edge, 0.0, 1.0);
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0_c0_c0_c0_c0[4], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = clamp(edge, 0.0, 1.0);
    alpha *= edge;
    edge = dot(uedges_Stage1_c1_c0_c0_c0_c0_c0[5], vec3(gl_FragCoord.x, gl_FragCoord.y, 1.0));
    edge = clamp(edge, 0.0, 1.0);
    alpha *= edge;
    _output = _input * alpha;
    return _output;
}
vec4 MagnifierEffect_Stage1_c1_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 coord = vTransformedCoords_2_Stage0;
    vec2 zoom_coord = uoffset_Stage1_c1_c0_c0_c0_c1_c0 + coord * vec2(uxInvZoom_Stage1_c1_c0_c0_c0_c1_c0, uyInvZoom_Stage1_c1_c0_c0_c0_c1_c0);
    vec2 delta = (coord - uboundsUniform_Stage1_c1_c0_c0_c0_c1_c0.xy) * uboundsUniform_Stage1_c1_c0_c0_c0_c1_c0.zw;
    delta = min(delta, vec2(1.0, 1.0) - delta);
    delta *= vec2(uxInvInset_Stage1_c1_c0_c0_c0_c1_c0, uyInvInset_Stage1_c1_c0_c0_c0_c1_c0);
    float weight = 0.0;
    if (delta.x < 2.0 && delta.y < 2.0) {
        delta = vec2(2.0, 2.0) - delta;
        float dist = length(delta);
        dist = max(2.0 - dist, 0.0);
        weight = min(dist * dist, 1.0);
    } else {
        vec2 delta_squared = delta * delta;
        weight = min(min(delta_squared.x, delta_squared.y), 1.0);
    }
    _output = texture(uTextureSampler_2_Stage1, mix(coord, zoom_coord, weight));
    return _output;
}
vec4 blend_multiply(vec4 src, vec4 dst) {
    return vec4(((1.0 - src.w) * dst.xyz + (1.0 - dst.w) * src.xyz) + src.xyz * dst.xyz, src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_multiply(ConvexPoly_Stage1_c1_c0_c0_c0_c0_c0(inputColor), MagnifierEffect_Stage1_c1_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 ColorMatrixFragmentProcessor_Stage1_c1_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = _input;
    _output = um_Stage1_c1_c0_c1_c0_c0_c0 * inputColor + uv_Stage1_c1_c0_c1_c0_c0_c0;
    {
        _output = clamp(_output, 0.0, 1.0);
    }
    return _output;
}
vec4 RRectBlurEffect_Stage1_c1_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 translatedFragPos = gl_FragCoord.xy - uproxyRect_Stage1_c1_c0_c1_c0_c1_c0.xy;
    float threshold = ucornerRadius_Stage1_c1_c0_c1_c0_c1_c0 + 2.0 * ublurRadius_Stage1_c1_c0_c1_c0_c1_c0;
    vec2 middle = (uproxyRect_Stage1_c1_c0_c1_c0_c1_c0.zw - uproxyRect_Stage1_c1_c0_c1_c0_c1_c0.xy) - 2.0 * threshold;
    if (translatedFragPos.x >= threshold && translatedFragPos.x < middle.x + threshold) {
        translatedFragPos.x = threshold;
    } else if (translatedFragPos.x >= middle.x + threshold) {
        translatedFragPos.x -= middle.x - 1.0;
    }
    if (translatedFragPos.y > threshold && translatedFragPos.y < middle.y + threshold) {
        translatedFragPos.y = threshold;
    } else if (translatedFragPos.y >= middle.y + threshold) {
        translatedFragPos.y -= middle.y - 1.0;
    }
    vec2 proxyDims = vec2(2.0 * threshold + 1.0);
    vec2 texCoord = translatedFragPos / proxyDims;
    _output = _input * texture(uTextureSampler_3_Stage1, texCoord);
    return _output;
}
vec4 ComposeTwo_Stage1_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_src_in(ColorMatrixFragmentProcessor_Stage1_c1_c0_c1_c0_c0_c0(inputColor), RRectBlurEffect_Stage1_c1_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
float _guarded_divide(float n, float d) {
    return n / d;
}
float _soft_light_component(float sc, float sa, float dc, float da) {
    if (2.0 * sc <= sa) {
        return (_guarded_divide((dc * dc) * (sa - 2.0 * sc), da) + (1.0 - da) * sc) + dc * ((-sa + 2.0 * sc) + 1.0);
    } else if (4.0 * dc <= da) {
        float DSqd = dc * dc;
        float DCub = DSqd * dc;
        float DaSqd = da * da;
        float DaCub = DaSqd * da;
        return _guarded_divide(((DaSqd * (sc - dc * ((3.0 * sa - 6.0 * sc) - 1.0)) + ((12.0 * da) * DSqd) * (sa - 2.0 * sc)) - (16.0 * DCub) * (sa - 2.0 * sc)) - DaCub * sc, DaSqd);
    }
    return ((dc * ((sa - 2.0 * sc) + 1.0) + sc) - sqrt(da * dc) * (sa - 2.0 * sc)) - da * sc;
}
vec4 blend_soft_light(vec4 src, vec4 dst) {
    if (dst.w == 0.0) {
        return src;
    }
    return vec4(_soft_light_component(src.x, src.w, dst.x, dst.w), _soft_light_component(src.y, src.w, dst.y, dst.w), _soft_light_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_soft_light(ComposeTwo_Stage1_c1_c0_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
float _color_dodge_component(float sc, float sa, float dc, float da) {
    if (dc == 0.0) {
        return sc * (1.0 - da);
    } else {
        float d = sa - sc;
        if (d == 0.0) {
            return (sa * da + sc * (1.0 - da)) + dc * (1.0 - sa);
        }
        d = min(da, _guarded_divide(dc * sa, d));
        return (d * sa + sc * (1.0 - da)) + dc * (1.0 - sa);
    }
}
vec4 blend_color_dodge(vec4 src, vec4 dst) {
    return vec4(_color_dodge_component(src.x, src.w, dst.x, dst.w), _color_dodge_component(src.y, src.w, dst.y, dst.w), _color_dodge_component(src.z, src.w, dst.z, dst.w), src.w + (1.0 - src.w) * dst.w);
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_color_dodge(ComposeTwo_Stage1_c0_c0(inputColor), ComposeTwo_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
in vec2 inPosition;
out vec2 vTransformedCoords_0_Stage0;
out vec2 vTransformedCoords_1_Stage0;
out vec2 vTransformedCoords_2_Stage0;
void main() {
    vec3 pos3 = uViewM_Stage0 * vec3(inPosition, 1.0);
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos3.x, pos3.y, 0.0, pos3.z);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

