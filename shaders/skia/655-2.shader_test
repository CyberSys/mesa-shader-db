[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 ucircle_Stage1_c0_c0_c0_c0_c0_c0;
uniform vec4 ucircle_Stage1_c0_c0_c0_c0_c1_c0;
uniform vec2 uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec2 uBounds_Stage1_c0_c0_c1_c0_c0_c0;
uniform vec4 uKernel_Stage1_c0_c0_c1_c0_c0_c0[3];
uniform vec4 ucircle_Stage1_c0_c0_c1_c0_c1_c0;
uniform vec4 uinnerRect_Stage1_c1_c0;
uniform vec2 uinvRadiiXY_Stage1_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
noperspective in vec2 vEllipseOffsets0_Stage0;
noperspective in vec2 vEllipseOffsets1_Stage0;
noperspective in vec4 vinColor_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
vec4 CircleEffect_Stage1_c0_c0_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float d;
    {
        d = (length((ucircle_Stage1_c0_c0_c0_c0_c0_c0.xy - gl_FragCoord.xy) * ucircle_Stage1_c0_c0_c0_c0_c0_c0.w) - 1.0) * ucircle_Stage1_c0_c0_c0_c0_c0_c0.z;
    }
    {
        _output = _input * clamp(d, 0.0, 1.0);
    }
    return _output;
}
vec4 CircleEffect_Stage1_c0_c0_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float d;
    {
        d = (1.0 - length((ucircle_Stage1_c0_c0_c0_c0_c1_c0.xy - gl_FragCoord.xy) * ucircle_Stage1_c0_c0_c0_c0_c1_c0.w)) * ucircle_Stage1_c0_c0_c0_c0_c1_c0.z;
    }
    {
        _output = _input * clamp(d, 0.0, 1.0);
    }
    return _output;
}
vec4 blend_exclusion(vec4 src, vec4 dst) {
    return vec4((dst.xyz + src.xyz) - (2.0 * dst.xyz) * src.xyz, src.w + (1.0 - src.w) * dst.w);
}
vec4 ComposeTwo_Stage1_c0_c0_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_exclusion(CircleEffect_Stage1_c0_c0_c0_c0_c0_c0(inputColor), CircleEffect_Stage1_c0_c0_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 GaussianConvolution_Stage1_c0_c0_c1_c0_c0_c0(vec4 _input) {
    vec4 _output;
    _output = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 coord = vTransformedCoords_0_Stage0 - 4.0 * uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    vec2 coordSampled = vec2(0.0, 0.0);
    coordSampled = coord;
    if (coord.x >= uBounds_Stage1_c0_c0_c1_c0_c0_c0.x && coord.x <= uBounds_Stage1_c0_c0_c1_c0_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[0].x;
    }
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage1_c0_c0_c1_c0_c0_c0.x && coord.x <= uBounds_Stage1_c0_c0_c1_c0_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[0].y;
    }
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage1_c0_c0_c1_c0_c0_c0.x && coord.x <= uBounds_Stage1_c0_c0_c1_c0_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[0].z;
    }
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage1_c0_c0_c1_c0_c0_c0.x && coord.x <= uBounds_Stage1_c0_c0_c1_c0_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[0].w;
    }
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage1_c0_c0_c1_c0_c0_c0.x && coord.x <= uBounds_Stage1_c0_c0_c1_c0_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[1].x;
    }
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage1_c0_c0_c1_c0_c0_c0.x && coord.x <= uBounds_Stage1_c0_c0_c1_c0_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[1].y;
    }
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage1_c0_c0_c1_c0_c0_c0.x && coord.x <= uBounds_Stage1_c0_c0_c1_c0_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[1].z;
    }
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage1_c0_c0_c1_c0_c0_c0.x && coord.x <= uBounds_Stage1_c0_c0_c1_c0_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[1].w;
    }
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    coordSampled = coord;
    if (coord.x >= uBounds_Stage1_c0_c0_c1_c0_c0_c0.x && coord.x <= uBounds_Stage1_c0_c0_c1_c0_c0_c0.y) {
        _output += texture(uTextureSampler_0_Stage1, coordSampled) * uKernel_Stage1_c0_c0_c1_c0_c0_c0[2].x;
    }
    coord += uImageIncrement_Stage1_c0_c0_c1_c0_c0_c0;
    _output *= _input;
    return _output;
}
vec4 CircleEffect_Stage1_c0_c0_c1_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float d;
    {
        d = (length((ucircle_Stage1_c0_c0_c1_c0_c1_c0.xy - gl_FragCoord.xy) * ucircle_Stage1_c0_c0_c1_c0_c1_c0.w) - 1.0) * ucircle_Stage1_c0_c0_c1_c0_c1_c0.z;
    }
    {
        _output = _input * clamp(d, 0.0, 1.0);
    }
    return _output;
}
vec4 blend_xor(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src + (1.0 - src.w) * dst;
}
vec4 ComposeTwo_Stage1_c0_c0_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_xor(GaussianConvolution_Stage1_c0_c0_c1_c0_c0_c0(inputColor), CircleEffect_Stage1_c0_c0_c1_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
float _blend_color_saturation(vec3 color) {
    return max(max(color.x, color.y), color.z) - min(min(color.x, color.y), color.z);
}
vec3 _blend_set_color_saturation_helper(vec3 minMidMax, float sat) {
    if (minMidMax.x < minMidMax.z) {
        return vec3(0.0, (sat * (minMidMax.y - minMidMax.x)) / (minMidMax.z - minMidMax.x), sat);
    }
    return vec3(0.0);
}
vec3 _blend_set_color_saturation(vec3 hueLumColor, vec3 satColor) {
    float sat = _blend_color_saturation(satColor);
    if (hueLumColor.x <= hueLumColor.y) {
        if (hueLumColor.y <= hueLumColor.z) {
            hueLumColor.xyz = _blend_set_color_saturation_helper(hueLumColor, sat);
        } else if (hueLumColor.x <= hueLumColor.z) {
            hueLumColor.xzy = _blend_set_color_saturation_helper(hueLumColor.xzy, sat);
        } else {
            hueLumColor.zxy = _blend_set_color_saturation_helper(hueLumColor.zxy, sat);
        }
    } else if (hueLumColor.x <= hueLumColor.z) {
        hueLumColor.yxz = _blend_set_color_saturation_helper(hueLumColor.yxz, sat);
    } else if (hueLumColor.y <= hueLumColor.z) {
        hueLumColor.yzx = _blend_set_color_saturation_helper(hueLumColor.yzx, sat);
    } else {
        hueLumColor.zyx = _blend_set_color_saturation_helper(hueLumColor.zyx, sat);
    }
    return hueLumColor;
}
float _blend_color_luminance(vec3 color) {
    return dot(vec3(0.30000001192092896, 0.5899999737739563, 0.10999999940395355), color);
}
vec3 _blend_set_color_luminance(vec3 hueSatColor, float alpha, vec3 lumColor) {
    float lum = _blend_color_luminance(lumColor);
    vec3 result = (lum - _blend_color_luminance(hueSatColor)) + hueSatColor;
    float minComp = min(min(result.x, result.y), result.z);
    float maxComp = max(max(result.x, result.y), result.z);
    if (minComp < 0.0 && lum != minComp) {
        result = lum + ((result - lum) * lum) / (lum - minComp);
    }
    if (maxComp > alpha && maxComp != lum) {
        return lum + ((result - lum) * (alpha - lum)) / (maxComp - lum);
    }
    return result;
}
vec4 blend_hue(vec4 src, vec4 dst) {
    float alpha = dst.w * src.w;
    vec3 sda = src.xyz * dst.w;
    vec3 dsa = dst.xyz * src.w;
    return vec4((((_blend_set_color_luminance(_blend_set_color_saturation(sda, dsa), alpha, dsa) + dst.xyz) - dsa) + src.xyz) - sda, (src.w + dst.w) - alpha);
}
vec4 ComposeTwo_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 inputColor = vec4(_input.xyz, 1.0);
    _output = blend_hue(ComposeTwo_Stage1_c0_c0_c0_c0(inputColor), ComposeTwo_Stage1_c0_c0_c1_c0(inputColor));
    _output *= _input.w;
    return _output;
}
vec4 EllipticalRRect_Stage1_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage1_c1_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage1_c1_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    vec2 Z = dxy * uinvRadiiXY_Stage1_c1_c0;
    float implicit = dot(Z, dxy) - 1.0;
    float grad_dot = 4.0 * dot(Z, Z);
    grad_dot = max(grad_dot, 9.9999997473787516e-05);
    float approx_dist = implicit * inversesqrt(grad_dot);
    float alpha = clamp(0.5 + approx_dist, 0.0, 1.0);
    _output = _input * alpha;
    return _output;
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = vinColor_Stage0;
        vec2 scaledOffset = vEllipseOffsets0_Stage0;
        float test = dot(scaledOffset, scaledOffset) - 1.0;
        vec2 duvdx = dFdx(vEllipseOffsets0_Stage0);
        vec2 duvdy = dFdy(vEllipseOffsets0_Stage0);
        vec2 grad = vec2(vEllipseOffsets0_Stage0.x * duvdx.x + vEllipseOffsets0_Stage0.y * duvdx.y, vEllipseOffsets0_Stage0.x * duvdy.x + vEllipseOffsets0_Stage0.y * duvdy.y);
        float grad_dot = 4.0 * dot(grad, grad);
        grad_dot = max(grad_dot, 1.1754999560161448e-38);
        float invlen = inversesqrt(grad_dot);
        float edgeAlpha = clamp(0.5 - test * invlen, 0.0, 1.0);
        scaledOffset = vEllipseOffsets1_Stage0;
        test = dot(scaledOffset, scaledOffset) - 1.0;
        duvdx = dFdx(vEllipseOffsets1_Stage0);
        duvdy = dFdy(vEllipseOffsets1_Stage0);
        grad = vec2(vEllipseOffsets1_Stage0.x * duvdx.x + vEllipseOffsets1_Stage0.y * duvdx.y, vEllipseOffsets1_Stage0.x * duvdy.x + vEllipseOffsets1_Stage0.y * duvdy.y);
        grad_dot = 4.0 * dot(grad, grad);
        invlen = inversesqrt(grad_dot);
        edgeAlpha *= clamp(0.5 + test * invlen, 0.0, 1.0);
        outputCoverage_Stage0 = vec4(edgeAlpha);
    }
    vec4 output_Stage1;
    {
        vec4 inputColor = vec4(outputColor_Stage0.xyz, 1.0);
        output_Stage1 = blend_exclusion(ComposeTwo_Stage1_c0_c0(inputColor), EllipticalRRect_Stage1_c1_c0(inputColor));
        output_Stage1 *= outputColor_Stage0.w;
    }
    {
        sk_FragColor = outputCoverage_Stage0 * output_Stage1;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uViewM_Stage0;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec4 inColor;
in vec2 inEllipseOffsets0;
in vec2 inEllipseOffsets1;
noperspective out vec2 vEllipseOffsets0_Stage0;
noperspective out vec2 vEllipseOffsets1_Stage0;
noperspective out vec4 vinColor_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vEllipseOffsets0_Stage0 = inEllipseOffsets0;
    vEllipseOffsets1_Stage0 = inEllipseOffsets1;
    vinColor_Stage0 = inColor;
    vec2 pos2 = (uViewM_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

