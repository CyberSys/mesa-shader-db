[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform float uinnerThreshold_Stage1;
uniform float uouterThreshold_Stage1;
uniform vec4 urectUniform_Stage2;
uniform vec2 uScale_Stage3_c0_c0;
uniform vec4 uTexDom_Stage3_c0_c0;
uniform vec3 uDecalParams_Stage3_c0_c0;
uniform vec2 uScale_Stage3_c1_c0;
uniform vec4 uTexDom_Stage3_c1_c0;
uniform vec3 uDecalParams_Stage3_c1_c0;
uniform vec4 uscale0_1_Stage4_c2_c0_c1_c0;
uniform vec4 uscale2_3_Stage4_c2_c0_c1_c0;
uniform vec4 uscale4_5_Stage4_c2_c0_c1_c0;
uniform vec4 ubias0_1_Stage4_c2_c0_c1_c0;
uniform vec4 ubias2_3_Stage4_c2_c0_c1_c0;
uniform vec4 ubias4_5_Stage4_c2_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage4_c2_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage4_c2_c0_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_0_Stage3;
uniform sampler2D uTextureSampler_1_Stage3;
uniform sampler2D uTextureSampler_2_Stage3;
uniform sampler2D uTextureSampler_3_Stage3;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_2_Stage0;
noperspective in vec2 vTransformedCoords_3_Stage0;
noperspective in vec2 vTransformedCoords_4_Stage0;
noperspective in vec2 vTransformedCoords_5_Stage0;
noperspective in float vinCoverage_Stage0;
vec4 DisplacementMap_Stage3_c0_c0(vec4 _input) {
    vec4 _output;
    vec4 dColor = texture(uTextureSampler_0_Stage3, vTransformedCoords_1_Stage0);
    dColor.xyz = dColor.w < 9.9999999747524271e-07 ? vec3(0.0) : clamp(dColor.xyz / dColor.w, 0.0, 1.0);
    vec2 cCoords = vTransformedCoords_2_Stage0 + uScale_Stage3_c0_c0 * (dColor.ww - vec2(0.5));
    {
        vec2 origCoord = cCoords;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage3_c0_c0.xy, uTexDom_Stage3_c0_c0.zw);
        vec4 textureColor = texture(uTextureSampler_1_Stage3, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3_c0_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3_c0_c0.y);
        if (err > uDecalParams_Stage3_c0_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage3_c0_c0.z < 1.0) {
            err = 0.0;
        }
        _output = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    return _output;
}
vec4 DisplacementMap_Stage3_c1_c0(vec4 _input) {
    vec4 _output;
    vec4 dColor = texture(uTextureSampler_2_Stage3, vTransformedCoords_3_Stage0);
    dColor.xyz = dColor.w < 9.9999999747524271e-07 ? vec3(0.0) : clamp(dColor.xyz / dColor.w, 0.0, 1.0);
    vec2 cCoords = vTransformedCoords_4_Stage0 + uScale_Stage3_c1_c0 * (dColor.yw - vec2(0.5));
    {
        vec2 origCoord = cCoords;
        vec2 clampedCoord;
        clampedCoord = clamp(origCoord, uTexDom_Stage3_c1_c0.xy, uTexDom_Stage3_c1_c0.zw);
        vec4 textureColor = texture(uTextureSampler_3_Stage3, clampedCoord);
        float err = max(abs(clampedCoord.x - origCoord.x) * uDecalParams_Stage3_c1_c0.x, abs(clampedCoord.y - origCoord.y) * uDecalParams_Stage3_c1_c0.y);
        if (err > uDecalParams_Stage3_c1_c0.z) {
            err = 1.0;
        } else if (uDecalParams_Stage3_c1_c0.z < 1.0) {
            err = 0.0;
        }
        _output = mix(textureColor, vec4(0.0, 0.0, 0.0, 0.0), err);
    }
    return _output;
}
vec4 LinearGradientLayout_Stage4_c2_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float t = vTransformedCoords_5_Stage0.x + 9.9999997473787516e-06;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage4_c2_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    {
        if (t < uthresholds1_7_Stage4_c2_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage4_c2_c0_c1_c0.x) {
                scale = uscale0_1_Stage4_c2_c0_c1_c0;
                bias = ubias0_1_Stage4_c2_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage4_c2_c0_c1_c0;
                bias = ubias2_3_Stage4_c2_c0_c1_c0;
            }
        } else {
            {
                scale = uscale4_5_Stage4_c2_c0_c1_c0;
                bias = ubias4_5_Stage4_c2_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 TiledGradientEffect_Stage4_c2_c0(vec4 _input) {
    vec4 _output;
    vec4 t = LinearGradientLayout_Stage4_c2_c0_c0_c0(vec4(1.0));
    {
        {
            float t_1 = t.x - 1.0;
            float tiled_t = (t_1 - 2.0 * floor(t_1 * 0.5)) - 1.0;
            t.x = abs(tiled_t);
        }
        _output = UnrolledBinaryGradientColorizer_Stage4_c2_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 blend_difference(vec4 src, vec4 dst) {
    return vec4((src.xyz + dst.xyz) - 2.0 * min(src.xyz * dst.w, dst.xyz * src.w), src.w + (1.0 - src.w) * dst.w);
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputCoverage_Stage0;
    {
        float alpha = 1.0;
        alpha = vinCoverage_Stage0;
        outputCoverage_Stage0 = vec4(alpha);
    }
    vec4 output_Stage1;
    {
        vec4 color = outputCoverage_Stage0;
        vec4 mask_color = texture(uTextureSampler_0_Stage1, vTransformedCoords_0_Stage0);
        if (mask_color.w < 0.5) {
            if (color.w > uouterThreshold_Stage1) {
                float scale = uouterThreshold_Stage1 / color.w;
                color.xyz *= scale;
                color.w = uouterThreshold_Stage1;
            }
        } else if (color.w < uinnerThreshold_Stage1) {
            float scale = uinnerThreshold_Stage1 / max(0.0010000000474974513, color.w);
            color.xyz *= scale;
            color.w = uinnerThreshold_Stage1;
        }
        output_Stage1 = color;
    }
    vec4 output_Stage2;
    {
        float alpha;
        {
            float xSub, ySub;
            xSub = min(gl_FragCoord.x - urectUniform_Stage2.x, 0.0);
            xSub += min(urectUniform_Stage2.z - gl_FragCoord.x, 0.0);
            ySub = min(gl_FragCoord.y - urectUniform_Stage2.y, 0.0);
            ySub += min(urectUniform_Stage2.w - gl_FragCoord.y, 0.0);
            alpha = (1.0 + max(xSub, -1.0)) * (1.0 + max(ySub, -1.0));
        }
        output_Stage2 = output_Stage1 * alpha;
    }
    vec4 output_Stage3;
    {
        vec4 inputColor = vec4(output_Stage2.xyz, 1.0);
        output_Stage3 = blend_difference(DisplacementMap_Stage3_c0_c0(inputColor), DisplacementMap_Stage3_c1_c0(inputColor));
        output_Stage3 *= output_Stage2.w;
    }
    vec4 output_Stage4;
    {
        output_Stage4 = blend_dst_in(output_Stage3, TiledGradientEffect_Stage4_c2_c0(vec4(1.0)));
    }
    {
        sk_FragColor = output_Stage4;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_2_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
uniform mat3 uCoordTransformMatrix_4_Stage0;
uniform mat3 uCoordTransformMatrix_5_Stage0;
in vec2 inPosition;
in float inCoverage;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_2_Stage0;
noperspective out vec2 vTransformedCoords_3_Stage0;
noperspective out vec2 vTransformedCoords_4_Stage0;
noperspective out vec2 vTransformedCoords_5_Stage0;
noperspective out float vinCoverage_Stage0;
void main() {
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_2_Stage0 = (uCoordTransformMatrix_2_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_4_Stage0 = (uCoordTransformMatrix_4_Stage0 * vec3(inPosition, 1.0)).xy;
    vTransformedCoords_5_Stage0 = (uCoordTransformMatrix_5_Stage0 * vec3(inPosition, 1.0)).xy;
    vinCoverage_Stage0 = inCoverage;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

