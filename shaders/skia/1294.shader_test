[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 uCoordTransformMatrix_2_Stage0;
uniform vec2 ubaseFrequency_Stage1_c0_c0;
uniform vec2 ustitchData_Stage1_c0_c0;
uniform vec2 ubaseFrequency_Stage2_c1_c0;
uniform vec2 ustitchData_Stage2_c1_c0;
uniform vec4 uboundsUniform_Stage3_c2_c0;
uniform float uxInvZoom_Stage3_c2_c0;
uniform float uyInvZoom_Stage3_c2_c0;
uniform float uxInvInset_Stage3_c2_c0;
uniform float uyInvInset_Stage3_c2_c0;
uniform vec2 uoffset_Stage3_c2_c0;
uniform vec4 uleftBorderColor_Stage4_c3_c0;
uniform vec4 urightBorderColor_Stage4_c3_c0;
uniform float ubias_Stage4_c3_c0_c0_c0;
uniform float uscale_Stage4_c3_c0_c0_c0;
uniform vec4 uscale0_1_Stage4_c3_c0_c1_c0;
uniform vec4 uscale2_3_Stage4_c3_c0_c1_c0;
uniform vec4 uscale4_5_Stage4_c3_c0_c1_c0;
uniform vec4 uscale6_7_Stage4_c3_c0_c1_c0;
uniform vec4 uscale8_9_Stage4_c3_c0_c1_c0;
uniform vec4 ubias0_1_Stage4_c3_c0_c1_c0;
uniform vec4 ubias2_3_Stage4_c3_c0_c1_c0;
uniform vec4 ubias4_5_Stage4_c3_c0_c1_c0;
uniform vec4 ubias6_7_Stage4_c3_c0_c1_c0;
uniform vec4 ubias8_9_Stage4_c3_c0_c1_c0;
uniform vec4 uthresholds1_7_Stage4_c3_c0_c1_c0;
uniform vec4 uthresholds9_13_Stage4_c3_c0_c1_c0;
uniform float uinnerThreshold_Stage5;
uniform float uouterThreshold_Stage5;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
uniform sampler2D uTextureSampler_1_Stage2;
uniform sampler2D uTextureSampler_0_Stage3;
uniform sampler2D uTextureSampler_0_Stage5;
noperspective in vec2 vTransformedCoords_0_Stage0;
noperspective in vec2 vTransformedCoords_1_Stage0;
noperspective in vec2 vTransformedCoords_3_Stage0;
noperspective in vec2 vTransformedCoords_4_Stage0;
flat in vec4 vcolor_Stage0;
float perlinnoise_Stage1_c0_c0(float chanCoord, vec2 noiseVec, vec2 stitchData) {
    vec4 floorVal;
    floorVal.xy = floor(noiseVec);
    floorVal.zw = floorVal.xy + vec2(1.0);
    vec2 fractVal = fract(noiseVec);
    vec2 noiseSmooth = (fractVal * fractVal) * (vec2(3.0) - vec2(2.0) * fractVal);
    if (floorVal.x >= stitchData.x) {
        floorVal.x -= stitchData.x;
    }
    if (floorVal.y >= stitchData.y) {
        floorVal.y -= stitchData.y;
    }
    if (floorVal.z >= stitchData.x) {
        floorVal.z -= stitchData.x;
    }
    if (floorVal.w >= stitchData.y) {
        floorVal.w -= stitchData.y;
    }
    floorVal = fract(floor(mod(floorVal, 256.0)) / vec4(256.0));
    vec2 latticeIdx;
    latticeIdx.x = texture(uTextureSampler_0_Stage1, vec2(floorVal.x, 0.5)).x;
    latticeIdx.y = texture(uTextureSampler_0_Stage1, vec2(floorVal.z, 0.5)).x;
    vec4 bcoords = fract(latticeIdx.xyxy + floorVal.yyww);
    vec2 uv;
    vec4 lattice = texture(uTextureSampler_1_Stage1, vec2(bcoords.x, chanCoord)).zyxw;
    uv.x = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    fractVal.x -= 1.0;
    lattice = texture(uTextureSampler_1_Stage1, vec2(bcoords.y, chanCoord)).zyxw;
    uv.y = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    vec2 ab;
    ab.x = mix(uv.x, uv.y, noiseSmooth.x);
    fractVal.y -= 1.0;
    lattice = texture(uTextureSampler_1_Stage1, vec2(bcoords.w, chanCoord)).zyxw;
    uv.y = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    fractVal.x += 1.0;
    lattice = texture(uTextureSampler_1_Stage1, vec2(bcoords.z, chanCoord)).zyxw;
    uv.x = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    ab.y = mix(uv.x, uv.y, noiseSmooth.x);
    return mix(ab.x, ab.y, noiseSmooth.y);
}
vec4 PerlinNoise_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 noiseVec = floor(vTransformedCoords_0_Stage0) * ubaseFrequency_Stage1_c0_c0;
    _output = vec4(0.0);
    vec2 stitchData = ustitchData_Stage1_c0_c0;
    float ratio = 1.0;
    for (int octave = 0;octave < 5; ++octave) {
        _output += abs(vec4(perlinnoise_Stage1_c0_c0(0.125, noiseVec, stitchData), perlinnoise_Stage1_c0_c0(0.375, noiseVec, stitchData), perlinnoise_Stage1_c0_c0(0.625, noiseVec, stitchData), perlinnoise_Stage1_c0_c0(0.875, noiseVec, stitchData))) * ratio;
        noiseVec *= vec2(2.0);
        ratio *= 0.5;
        stitchData *= vec2(2.0);
    }
    _output = clamp(_output, 0.0, 1.0);
    _output = vec4(_output.xyz * _output.www, _output.w);
    return _output;
}
float perlinnoise_Stage2_c1_c0(float chanCoord, vec2 noiseVec, vec2 stitchData) {
    vec4 floorVal;
    floorVal.xy = floor(noiseVec);
    floorVal.zw = floorVal.xy + vec2(1.0);
    vec2 fractVal = fract(noiseVec);
    vec2 noiseSmooth = (fractVal * fractVal) * (vec2(3.0) - vec2(2.0) * fractVal);
    if (floorVal.x >= stitchData.x) {
        floorVal.x -= stitchData.x;
    }
    if (floorVal.y >= stitchData.y) {
        floorVal.y -= stitchData.y;
    }
    if (floorVal.z >= stitchData.x) {
        floorVal.z -= stitchData.x;
    }
    if (floorVal.w >= stitchData.y) {
        floorVal.w -= stitchData.y;
    }
    floorVal = fract(floor(mod(floorVal, 256.0)) / vec4(256.0));
    vec2 latticeIdx;
    latticeIdx.x = texture(uTextureSampler_0_Stage2, vec2(floorVal.x, 0.5)).x;
    latticeIdx.y = texture(uTextureSampler_0_Stage2, vec2(floorVal.z, 0.5)).x;
    vec4 bcoords = fract(latticeIdx.xyxy + floorVal.yyww);
    vec2 uv;
    vec4 lattice = texture(uTextureSampler_1_Stage2, vec2(bcoords.x, chanCoord)).zyxw;
    uv.x = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    fractVal.x -= 1.0;
    lattice = texture(uTextureSampler_1_Stage2, vec2(bcoords.y, chanCoord)).zyxw;
    uv.y = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    vec2 ab;
    ab.x = mix(uv.x, uv.y, noiseSmooth.x);
    fractVal.y -= 1.0;
    lattice = texture(uTextureSampler_1_Stage2, vec2(bcoords.w, chanCoord)).zyxw;
    uv.y = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    fractVal.x += 1.0;
    lattice = texture(uTextureSampler_1_Stage2, vec2(bcoords.z, chanCoord)).zyxw;
    uv.x = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    ab.y = mix(uv.x, uv.y, noiseSmooth.x);
    return mix(ab.x, ab.y, noiseSmooth.y);
}
vec4 PerlinNoise_Stage2_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 noiseVec = floor(vTransformedCoords_1_Stage0) * ubaseFrequency_Stage2_c1_c0;
    _output = vec4(0.0);
    vec2 stitchData = ustitchData_Stage2_c1_c0;
    float ratio = 1.0;
    for (int octave = 0;octave < 9; ++octave) {
        _output += vec4(perlinnoise_Stage2_c1_c0(0.125, noiseVec, stitchData), perlinnoise_Stage2_c1_c0(0.375, noiseVec, stitchData), perlinnoise_Stage2_c1_c0(0.625, noiseVec, stitchData), perlinnoise_Stage2_c1_c0(0.875, noiseVec, stitchData)) * ratio;
        noiseVec *= vec2(2.0);
        ratio *= 0.5;
        stitchData *= vec2(2.0);
    }
    _output = _output * vec4(0.5) + vec4(0.5);
    _output = clamp(_output, 0.0, 1.0);
    _output = vec4(_output.xyz * _output.www, _output.w);
    return _output;
}
vec4 MagnifierEffect_Stage3_c2_c0(vec4 _input, vec2 _coords) {
    _coords = _coords * uCoordTransformMatrix_2_Stage0.xz + uCoordTransformMatrix_2_Stage0.yw;
    vec4 _output;
    vec2 coord = _coords;
    vec2 zoom_coord = uoffset_Stage3_c2_c0 + coord * vec2(uxInvZoom_Stage3_c2_c0, uyInvZoom_Stage3_c2_c0);
    vec2 delta = (coord - uboundsUniform_Stage3_c2_c0.xy) * uboundsUniform_Stage3_c2_c0.zw;
    delta = min(delta, vec2(1.0, 1.0) - delta);
    delta *= vec2(uxInvInset_Stage3_c2_c0, uyInvInset_Stage3_c2_c0);
    float weight = 0.0;
    if (delta.x < 2.0 && delta.y < 2.0) {
        delta = vec2(2.0, 2.0) - delta;
        float dist = length(delta);
        dist = max(2.0 - dist, 0.0);
        weight = min(dist * dist, 1.0);
    } else {
        vec2 delta_squared = delta * delta;
        weight = min(min(delta_squared.x, delta_squared.y), 1.0);
    }
    _output = texture(uTextureSampler_0_Stage3, mix(coord, zoom_coord, weight));
    return _output;
}
vec4 SweepGradientLayout_Stage4_c3_c0_c0_c0(vec4 _input) {
    vec4 _output;
    float angle;
    {
        angle = atan(-vTransformedCoords_3_Stage0.y, -vTransformedCoords_3_Stage0.x);
    }
    float t = ((angle * 0.15915493667125702 + 0.5) + ubias_Stage4_c3_c0_c0_c0) * uscale_Stage4_c3_c0_c0_c0;
    _output = vec4(t, 1.0, 0.0, 0.0);
    return _output;
}
vec4 UnrolledBinaryGradientColorizer_Stage4_c3_c0_c1_c0(vec4 _input) {
    vec4 _output;
    float t = _input.x;
    vec4 scale, bias;
    if (t < uthresholds1_7_Stage4_c3_c0_c1_c0.w) {
        if (t < uthresholds1_7_Stage4_c3_c0_c1_c0.y) {
            if (t < uthresholds1_7_Stage4_c3_c0_c1_c0.x) {
                scale = uscale0_1_Stage4_c3_c0_c1_c0;
                bias = ubias0_1_Stage4_c3_c0_c1_c0;
            } else {
                scale = uscale2_3_Stage4_c3_c0_c1_c0;
                bias = ubias2_3_Stage4_c3_c0_c1_c0;
            }
        } else {
            if (t < uthresholds1_7_Stage4_c3_c0_c1_c0.z) {
                scale = uscale4_5_Stage4_c3_c0_c1_c0;
                bias = ubias4_5_Stage4_c3_c0_c1_c0;
            } else {
                scale = uscale6_7_Stage4_c3_c0_c1_c0;
                bias = ubias6_7_Stage4_c3_c0_c1_c0;
            }
        }
    } else {
        {
            {
                scale = uscale8_9_Stage4_c3_c0_c1_c0;
                bias = ubias8_9_Stage4_c3_c0_c1_c0;
            }
        }
    }
    _output = t * scale + bias;
    return _output;
}
vec4 ClampedGradientEffect_Stage4_c3_c0(vec4 _input) {
    vec4 _output;
    vec4 t = SweepGradientLayout_Stage4_c3_c0_c0_c0(vec4(1.0));
    if (t.x < 0.0) {
        _output = uleftBorderColor_Stage4_c3_c0;
    } else if (t.x > 1.0) {
        _output = urightBorderColor_Stage4_c3_c0;
    } else {
        _output = UnrolledBinaryGradientColorizer_Stage4_c3_c0_c1_c0(t);
    }
    {
        _output.xyz *= _output.w;
    }
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = vcolor_Stage0;
    }
    vec4 output_Stage1;
    {
        output_Stage1 = blend_dst_in(outputColor_Stage0, PerlinNoise_Stage1_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage2;
    {
        output_Stage2 = blend_dst_in(output_Stage1, PerlinNoise_Stage2_c1_c0(vec4(1.0)));
    }
    vec4 output_Stage3;
    {
        output_Stage3 = MagnifierEffect_Stage3_c2_c0(output_Stage2, gl_FragCoord.xy);
    }
    vec4 output_Stage4;
    {
        output_Stage4 = blend_dst_in(output_Stage3, ClampedGradientEffect_Stage4_c3_c0(vec4(1.0)));
    }
    vec4 output_Stage5;
    {
        vec4 color = output_Stage4;
        vec4 mask_color = texture(uTextureSampler_0_Stage5, vTransformedCoords_4_Stage0);
        if (mask_color.w < 0.5) {
            if (color.w > uouterThreshold_Stage5) {
                float scale = uouterThreshold_Stage5 / color.w;
                color.xyz *= scale;
                color.w = uouterThreshold_Stage5;
            }
        } else if (color.w < uinnerThreshold_Stage5) {
            float scale = uinnerThreshold_Stage5 / max(0.0010000000474974513, color.w);
            color.xyz *= scale;
            color.w = uinnerThreshold_Stage5;
        }
        output_Stage5 = color;
    }
    {
        sk_FragColor = output_Stage5;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
uniform mat3 uCoordTransformMatrix_1_Stage0;
uniform mat3 uCoordTransformMatrix_3_Stage0;
uniform mat3 uCoordTransformMatrix_4_Stage0;
in vec2 position;
in vec4 color;
in vec2 localCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
noperspective out vec2 vTransformedCoords_1_Stage0;
noperspective out vec2 vTransformedCoords_3_Stage0;
noperspective out vec2 vTransformedCoords_4_Stage0;
flat out vec4 vcolor_Stage0;
void main() {
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_1_Stage0 = (uCoordTransformMatrix_1_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_3_Stage0 = (uCoordTransformMatrix_3_Stage0 * vec3(localCoord, 1.0)).xy;
    vTransformedCoords_4_Stage0 = (uCoordTransformMatrix_4_Stage0 * vec3(localCoord, 1.0)).xy;
    vcolor_Stage0 = color;
    gl_Position = vec4(position.x, position.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

