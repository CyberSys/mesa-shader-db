[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_KHR_blend_equation_advanced : require
out vec4 sk_FragColor;
layout (blend_support_all_equations) out ;
uniform vec4 uColor_Stage0;
uniform vec4 uCoordTransformMatrix_1_Stage0;
uniform vec4 uellipse_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
noperspective in vec3 vDashParam_Stage0;
noperspective in vec2 vCircleParams_Stage0;
noperspective in vec2 vTransformedCoords_0_Stage0;
vec4 TextureEffect_Stage2_c0_c0(vec4 _input, vec2 _coords) {
    _coords = _coords * uCoordTransformMatrix_1_Stage0.xz + uCoordTransformMatrix_1_Stage0.yw;
    vec4 _output;
    _output = texture(uTextureSampler_0_Stage2, _coords) * _input;
    return _output;
}
void main() {
    vec4 outputColor_Stage0;
    vec4 outputCoverage_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
        float xShifted = vDashParam_Stage0.x - floor(vDashParam_Stage0.x / vDashParam_Stage0.z) * vDashParam_Stage0.z;
        vec2 fragPosShifted = vec2(xShifted, vDashParam_Stage0.y);
        vec2 center = vec2(vCircleParams_Stage0.y, 0.0);
        float dist = length(center - fragPosShifted);
        float alpha = 1.0;
        alpha *= dist < vCircleParams_Stage0.x + 0.5 ? 1.0 : 0.0;
        outputCoverage_Stage0 = vec4(alpha);
    }
    vec4 output_Stage1;
    {
        vec2 d = gl_FragCoord.xy - uellipse_Stage1.xy;
        vec2 Z = d * uellipse_Stage1.zw;
        float implicit = dot(Z, d) - 1.0;
        float grad_dot = 4.0 * dot(Z, Z);
        {
            grad_dot = max(grad_dot, 1.1754999560161448e-38);
        }
        float approx_dist = implicit * inversesqrt(grad_dot);
        float alpha;
        {
            alpha = approx_dist > 0.0 ? 1.0 : 0.0;
        }
        output_Stage1 = outputCoverage_Stage0 * alpha;
    }
    vec4 output_Stage2;
    {
        float coord = vTransformedCoords_0_Stage0.x - 0.5;
        float f = fract(coord);
        coord += 0.5 - f;
        float f2 = f * f;
        vec4 w = mat4(0.055555555555555552, 0.88888888888888884, 0.055555555555555552, 0.0, -0.5, 0.0, 0.5, 0.0, 0.83333333333333337, -2.0, 1.5, -0.33333333333333331, -0.3888888888888889, 1.1666666666666667, -1.1666666666666667, 0.3888888888888889) * vec4(1.0, f, f2, f2 * f);
        vec4 c[4];
        c[0] = TextureEffect_Stage2_c0_c0(vec4(1.0), vec2(coord + -1.0, vTransformedCoords_0_Stage0.y));
        c[1] = TextureEffect_Stage2_c0_c0(vec4(1.0), vec2(coord, vTransformedCoords_0_Stage0.y));
        c[2] = TextureEffect_Stage2_c0_c0(vec4(1.0), vec2(coord + 1.0, vTransformedCoords_0_Stage0.y));
        c[3] = TextureEffect_Stage2_c0_c0(vec4(1.0), vec2(coord + 2.0, vTransformedCoords_0_Stage0.y));
        vec4 bicubicColor = ((c[0] * w.x + c[1] * w.y) + c[2] * w.z) + c[3] * w.w;
        bicubicColor.xyz = max(vec3(0.0), min(bicubicColor.xyz, bicubicColor.www));
        output_Stage2 = bicubicColor * output_Stage1;
    }
    {
        sk_FragColor = output_Stage2 * outputColor_Stage0;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec3 inDashParams;
in vec2 inCircleParams;
noperspective out vec3 vDashParam_Stage0;
noperspective out vec2 vCircleParams_Stage0;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vDashParam_Stage0 = inDashParams;
    vCircleParams_Stage0 = inCircleParams;
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inPosition, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

