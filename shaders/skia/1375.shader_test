[require]
GLSL >= 1.40

[fragment shader]
#version 140

#extension GL_ARB_fragment_coord_conventions : require
layout(origin_upper_left) in vec4 gl_FragCoord;
out vec4 sk_FragColor;
uniform vec4 uColor_Stage0;
uniform vec2 ubaseFrequency_Stage1_c0_c0;
uniform vec2 ustitchData_Stage1_c0_c0;
uniform vec4 uinnerRect_Stage3_c1_c0;
uniform vec2 uradiusPlusHalf_Stage3_c1_c0;
uniform sampler2D uTextureSampler_0_Stage1;
uniform sampler2D uTextureSampler_1_Stage1;
uniform sampler2D uTextureSampler_0_Stage2;
noperspective in vec2 vTransformedCoords_0_Stage0;
float perlinnoise_Stage1_c0_c0(float chanCoord, vec2 noiseVec, vec2 stitchData) {
    vec4 floorVal;
    floorVal.xy = floor(noiseVec);
    floorVal.zw = floorVal.xy + vec2(1.0);
    vec2 fractVal = fract(noiseVec);
    vec2 noiseSmooth = (fractVal * fractVal) * (vec2(3.0) - vec2(2.0) * fractVal);
    if (floorVal.x >= stitchData.x) {
        floorVal.x -= stitchData.x;
    }
    if (floorVal.y >= stitchData.y) {
        floorVal.y -= stitchData.y;
    }
    if (floorVal.z >= stitchData.x) {
        floorVal.z -= stitchData.x;
    }
    if (floorVal.w >= stitchData.y) {
        floorVal.w -= stitchData.y;
    }
    floorVal = fract(floor(mod(floorVal, 256.0)) / vec4(256.0));
    vec2 latticeIdx;
    latticeIdx.x = texture(uTextureSampler_0_Stage1, vec2(floorVal.x, 0.5)).x;
    latticeIdx.y = texture(uTextureSampler_0_Stage1, vec2(floorVal.z, 0.5)).x;
    vec4 bcoords = fract(latticeIdx.xyxy + floorVal.yyww);
    vec2 uv;
    vec4 lattice = texture(uTextureSampler_1_Stage1, vec2(bcoords.x, chanCoord)).zyxw;
    uv.x = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    fractVal.x -= 1.0;
    lattice = texture(uTextureSampler_1_Stage1, vec2(bcoords.y, chanCoord)).zyxw;
    uv.y = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    vec2 ab;
    ab.x = mix(uv.x, uv.y, noiseSmooth.x);
    fractVal.y -= 1.0;
    lattice = texture(uTextureSampler_1_Stage1, vec2(bcoords.w, chanCoord)).zyxw;
    uv.y = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    fractVal.x += 1.0;
    lattice = texture(uTextureSampler_1_Stage1, vec2(bcoords.z, chanCoord)).zyxw;
    uv.x = dot((lattice.yw + lattice.xz * vec2(0.00390625)) * vec2(2.0) - vec2(1.0), fractVal);
    ab.y = mix(uv.x, uv.y, noiseSmooth.x);
    return mix(ab.x, ab.y, noiseSmooth.y);
}
vec4 PerlinNoise_Stage1_c0_c0(vec4 _input) {
    vec4 _output;
    vec2 noiseVec = floor(vTransformedCoords_0_Stage0) * ubaseFrequency_Stage1_c0_c0;
    _output = vec4(0.0);
    vec2 stitchData = ustitchData_Stage1_c0_c0;
    float ratio = 1.0;
    for (int octave = 0;octave < 10; ++octave) {
        _output += abs(vec4(perlinnoise_Stage1_c0_c0(0.125, noiseVec, stitchData), perlinnoise_Stage1_c0_c0(0.375, noiseVec, stitchData), perlinnoise_Stage1_c0_c0(0.625, noiseVec, stitchData), perlinnoise_Stage1_c0_c0(0.875, noiseVec, stitchData))) * ratio;
        noiseVec *= vec2(2.0);
        ratio *= 0.5;
        stitchData *= vec2(2.0);
    }
    _output = clamp(_output, 0.0, 1.0);
    _output = vec4(_output.xyz * _output.www, _output.w);
    return _output;
}
vec4 CircularRRect_Stage3_c1_c0(vec4 _input) {
    vec4 _output;
    vec2 dxy0 = uinnerRect_Stage3_c1_c0.xy - gl_FragCoord.xy;
    vec2 dxy1 = gl_FragCoord.xy - uinnerRect_Stage3_c1_c0.zw;
    vec2 dxy = max(max(dxy0, dxy1), 0.0);
    float alpha = clamp(uradiusPlusHalf_Stage3_c1_c0.x - length(dxy), 0.0, 1.0);
    alpha = 1.0 - alpha;
    _output = _input * alpha;
    return _output;
}
vec4 ClampFragmentProcessor_Stage3_c2_c0(vec4 _input) {
    vec4 _output;
    {
        _output = clamp(_input, 0.0, 1.0);
    }
    return _output;
}
vec4 blend_src_in(vec4 src, vec4 dst) {
    return src * dst.w;
}
vec4 blend_dst_in(vec4 src, vec4 dst) {
    return blend_src_in(dst, src);
}
vec4 blend_src_out(vec4 src, vec4 dst) {
    return (1.0 - dst.w) * src;
}
void main() {
    vec4 outputColor_Stage0;
    {
        outputColor_Stage0 = uColor_Stage0;
    }
    vec4 output_Stage1;
    {
        output_Stage1 = blend_dst_in(outputColor_Stage0, PerlinNoise_Stage1_c0_c0(vec4(1.0)));
    }
    vec4 output_Stage2;
    {
        float nonZeroAlpha = max(output_Stage1.w, 9.9999997473787516e-05);
        vec4 coord = vec4(output_Stage1.xyz / nonZeroAlpha, nonZeroAlpha);
        coord = coord * 0.9960939884185791 + vec4(0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579, 0.0019529999699443579);
        output_Stage2.w = texture(uTextureSampler_0_Stage2, vec2(coord.w, 0.125)).w;
        output_Stage2.x = texture(uTextureSampler_0_Stage2, vec2(coord.x, 0.375)).w;
        output_Stage2.y = texture(uTextureSampler_0_Stage2, vec2(coord.y, 0.625)).w;
        output_Stage2.z = texture(uTextureSampler_0_Stage2, vec2(coord.z, 0.875)).w;
        output_Stage2.xyz *= output_Stage2.w;
    }
    vec4 output_Stage3;
    {
        vec4 inputColor = vec4(output_Stage2.xyz, 1.0);
        output_Stage3 = blend_src_out(CircularRRect_Stage3_c1_c0(inputColor), ClampFragmentProcessor_Stage3_c2_c0(inputColor));
        output_Stage3 *= output_Stage2.w;
    }
    {
        sk_FragColor = output_Stage3;
    }
}

[vertex shader]
#version 140

uniform vec4 sk_RTAdjust;
uniform mat3 uCoordTransformMatrix_0_Stage0;
in vec2 inPosition;
in vec2 inLocalCoord;
noperspective out vec2 vTransformedCoords_0_Stage0;
void main() {
    vec2 pos2 = inPosition;
    vTransformedCoords_0_Stage0 = (uCoordTransformMatrix_0_Stage0 * vec3(inLocalCoord, 1.0)).xy;
    gl_Position = vec4(pos2.x, pos2.y, 0.0, 1.0);
    gl_Position = vec4(gl_Position.xy * sk_RTAdjust.xz + gl_Position.ww * sk_RTAdjust.yw, 0.0, gl_Position.w);
}

