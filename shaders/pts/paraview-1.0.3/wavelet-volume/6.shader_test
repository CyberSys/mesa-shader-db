[require]
GLSL >= 1.50

[vertex shader]
#version 150
#ifdef GL_ES
#if __VERSION__ == 300
#define attribute in
#define varying out
#endif // 300
#else // GL_ES
#define highp
#define mediump
#define lowp
#if __VERSION__ == 150
#define attribute in
#define varying out
#endif
#endif // GL_ES


/*=========================================================================

  Program:   Visualization Toolkit
  Module:    raycastervs.glsl

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/

/// Needed to enable inverse function
#extension GL_ARB_gpu_shader5 : enable

//////////////////////////////////////////////////////////////////////////////
///
/// Uniforms, attributes, and globals
///
//////////////////////////////////////////////////////////////////////////////
      
  uniform bool in_cellFlag;      
  uniform vec3 in_cellSpacing;      
  uniform mat4 in_modelViewMatrix;      
  uniform mat4 in_projectionMatrix;      
  uniform mat4 in_volumeMatrix;      
      
  uniform vec3 in_volumeExtentsMin;      
  uniform vec3 in_volumeExtentsMax;      
      
  uniform mat4 in_inverseTextureDatasetMatrix;      
  uniform mat4 in_cellToPoint;      
  uniform vec3 in_textureExtentsMax;      
  uniform vec3 in_textureExtentsMin;      
      
  //This variable could be 'invariant varying' but it is declared      
  //as 'varying' to avoid compiler compatibility issues.      
  varying mat4 ip_inverseTextureDataAdjusted;

//VTK::Termination::Dec

//VTK::Cropping::Dec

//VTK::Shading::Dec

//////////////////////////////////////////////////////////////////////////////
///
/// Inputs
///
//////////////////////////////////////////////////////////////////////////////
attribute vec3 in_vertexPos;

//////////////////////////////////////////////////////////////////////////////
///
/// Outputs
///
//////////////////////////////////////////////////////////////////////////////
/// 3D texture coordinates for texture lookup in the fragment shader
varying vec3 ip_textureCoords;
varying vec3 ip_vertexPos;

void main()
{
  /// Get clipspace position
        
  vec4 pos = in_projectionMatrix * in_modelViewMatrix *      
             in_volumeMatrix * vec4(in_vertexPos.xyz, 1.0);      
  gl_Position = pos;

  /// Compute texture coordinates
  
  // For point dataset, we offset the texture coordinate       
  // to account for OpenGL treating voxel at the center of the cell.       
  vec3 uvx = sign(in_cellSpacing) * (in_vertexPos - in_volumeExtentsMin) /       
               (in_volumeExtentsMax - in_volumeExtentsMin);       
       
  if (in_cellFlag)       
    {       
    ip_textureCoords = uvx;       
    ip_inverseTextureDataAdjusted = in_inverseTextureDatasetMatrix;       
    }       
  else       
    {       
    // Transform cell tex-coordinates to point tex-coordinates       
    ip_textureCoords = (in_cellToPoint * vec4(uvx, 1.0)).xyz;       
    ip_inverseTextureDataAdjusted = in_cellToPoint * in_inverseTextureDatasetMatrix;       
    }

  /// Copy incoming vertex position for the fragment shader
  ip_vertexPos = in_vertexPos;
}


[fragment shader]
#version 150
#ifdef GL_ES
#if __VERSION__ == 300
#define varying in
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
precision highp sampler2D;
precision highp sampler3D;
#else
precision mediump float;
precision mediump sampler2D;
precision mediump sampler3D;
#endif
#define texelFetchBuffer texelFetch
#define texture1D texture
#define texture2D texture
#define texture3D texture
#endif // 300
#if __VERSION__ == 100
#extension GL_OES_standard_derivatives : enable
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#endif // 100
#else // GL_ES
#define highp
#define mediump
#define lowp
#if __VERSION__ == 150
#define varying in
#define texelFetchBuffer texelFetch
#define texture1D texture
#define texture2D texture
#define texture3D texture
#endif
#if __VERSION__ == 120
#extension GL_EXT_gpu_shader4 : require
#endif
#endif // GL_ES


/*=========================================================================

  Program:   Visualization Toolkit
  Module:    raycasterfs.glsl

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/

//////////////////////////////////////////////////////////////////////////////
///
/// Inputs
///
//////////////////////////////////////////////////////////////////////////////

/// 3D texture coordinates form vertex shader
varying vec3 ip_textureCoords;
varying vec3 ip_vertexPos;

//////////////////////////////////////////////////////////////////////////////
///
/// Outputs
///
//////////////////////////////////////////////////////////////////////////////

vec4 g_fragColor = vec4(0.0);

//////////////////////////////////////////////////////////////////////////////
///
/// Uniforms, attributes, and globals
///
//////////////////////////////////////////////////////////////////////////////
vec3 g_dataPos;
vec3 g_dirStep;
vec4 g_srcColor;
vec4 g_eyePosObj;
bool g_exit;
bool g_skip;
float g_currentT;
float g_terminatePointMax;

uniform vec4 in_volume_scale;
uniform vec4 in_volume_bias;

out vec4 fragOutput0;


      
// Volume dataset      
uniform sampler3D in_volume;      
uniform int in_noOfComponents;      
uniform int in_independentComponents;      
      
uniform sampler2D in_noiseSampler;      
#ifndef GL_ES      
uniform sampler2D in_depthSampler;      
#endif      
      
// Camera position      
uniform vec3 in_cameraPos;      
      
// view and model matrices      
uniform mat4 in_volumeMatrix;      
uniform mat4 in_inverseVolumeMatrix;      
uniform mat4 in_projectionMatrix;      
uniform mat4 in_inverseProjectionMatrix;      
uniform mat4 in_modelViewMatrix;      
uniform mat4 in_inverseModelViewMatrix;      
uniform mat4 in_textureDatasetMatrix;      
uniform mat4 in_inverseTextureDatasetMatrix;      
varying mat4 ip_inverseTextureDataAdjusted;      
uniform vec3 in_texMin;      
uniform vec3 in_texMax;      
uniform mat4 in_textureToEye;      
      
// Ray step size      
uniform vec3 in_cellStep;      
uniform vec2 in_scalarsRange[4];      
uniform vec3 in_cellSpacing;      
      
// Sample distance      
uniform float in_sampleDistance;      
      
// Scales      
uniform vec3 in_cellScale;      
uniform vec2 in_windowLowerLeftCorner;      
uniform vec2 in_inverseOriginalWindowSize;      
uniform vec2 in_inverseWindowSize;      
uniform vec3 in_textureExtentsMax;      
uniform vec3 in_textureExtentsMin;      
      
// Material and lighting      
uniform vec3 in_diffuse[4];      
uniform vec3 in_ambient[4];      
uniform vec3 in_specular[4];      
uniform float in_shininess[4];      
      
// Others      
uniform bool in_cellFlag;      
uniform bool in_useJittering;      
vec3 g_rayJitter = vec3(0.0);      
uniform bool in_clampDepthToBackface;      
      
uniform vec2 in_averageIPRange;        
uniform vec3 in_lightAmbientColor[1];        
uniform vec3 in_lightDiffuseColor[1];        
uniform vec3 in_lightSpecularColor[1];        
vec4 g_lightPosObj;        
vec3 g_ldir;        
vec3 g_vdir;        
vec3 g_h;

      
 const float g_opacityThreshold = 1.0 - 1.0 / 255.0;

//VTK::Cropping::Dec

      
 int clippingPlanesSize;      
 vec3 objRayDir;      
 mat4 textureToObjMat;

//VTK::Shading::Dec

//VTK::BinaryMask::Dec

//VTK::CompositeMask::Dec

        
uniform sampler2D in_opacityTransferFunc;        
float computeOpacity(vec4 scalar)        
  {        
  return texture2D(in_opacityTransferFunc, vec2(scalar.w, 0)).r;        
  }

        
vec4 computeGradient(int component)        
  {        
  return vec4(0.0);        
  }

      
vec4 computeLighting(vec4 color, int component)      
  {      
  vec4 finalColor = vec4(0.0);
  finalColor = vec4(color.rgb, 0.0);      
  finalColor.a = color.a;      
  return finalColor;      
  }

          
uniform sampler2D in_colorTransferFunc;          
vec4 computeColor(vec4 scalar, float opacity)          
  {          
  return computeLighting(vec4(texture2D(in_colorTransferFunc,          
                         vec2(scalar.w, 0.0)).xyz, opacity), 0);          
  }

        
vec3 computeRayDirection()        
  {        
  return normalize(ip_vertexPos.xyz - g_eyePosObj.xyz);        
  }

//VTK::Picking::Dec

//VTK::RenderToImage::Dec

//VTK::DepthPeeling::Dec

/// We support only 8 clipping planes for now
/// The first value is the size of the data array for clipping
/// planes (origin, normal)
uniform float in_clippingPlanes[49];
uniform float in_scale;
uniform float in_bias;

//////////////////////////////////////////////////////////////////////////////
///
/// Helper functions
///
//////////////////////////////////////////////////////////////////////////////

/**
 * Transform window coordinate to NDC.
 */
vec4 WindowToNDC(const float xCoord, const float yCoord, const float zCoord)
{
  vec4 NDCCoord = vec4(0.0, 0.0, 0.0, 1.0);

  NDCCoord.x = (xCoord - in_windowLowerLeftCorner.x) * 2.0 *
    in_inverseWindowSize.x - 1.0;
  NDCCoord.y = (yCoord - in_windowLowerLeftCorner.y) * 2.0 *
    in_inverseWindowSize.y - 1.0;
  NDCCoord.z = (2.0 * zCoord - (gl_DepthRange.near + gl_DepthRange.far)) /
    gl_DepthRange.diff;

  return NDCCoord;
}

/**
 * Transform NDC coordinate to window coordinates.
 */
vec4 NDCToWindow(const float xNDC, const float yNDC, const float zNDC)
{
  vec4 WinCoord = vec4(0.0, 0.0, 0.0, 1.0);

  WinCoord.x = (xNDC + 1.f) / (2.f * in_inverseWindowSize.x) +
    in_windowLowerLeftCorner.x;
  WinCoord.y = (yNDC + 1.f) / (2.f * in_inverseWindowSize.y) +
    in_windowLowerLeftCorner.y;
  WinCoord.z = (zNDC * gl_DepthRange.diff +
    (gl_DepthRange.near + gl_DepthRange.far)) / 2.f;

  return WinCoord;
}

//////////////////////////////////////////////////////////////////////////////
///
/// Ray-casting
///
//////////////////////////////////////////////////////////////////////////////

/**
 * Global initialization. This method should only be called once per shader
 * invocation regardless of whether castRay() is called several times (e.g.
 * vtkDualDepthPeelingPass). Any castRay() specific initialization should be
 * placed within that function.
 */
void initializeRayCast()
{
  /// Initialize g_fragColor (output) to 0
  g_fragColor = vec4(0.0);
  g_dirStep = vec3(0.0);
  g_srcColor = vec4(0.0);
  g_exit = false;

        
  bool l_adjustTextureExtents =  !in_cellFlag;        
  // Get the 3D texture coordinates for lookup into the in_volume dataset        
  g_dataPos = ip_textureCoords.xyz;        
        
  // Eye position in dataset space        
  g_eyePosObj = (in_inverseVolumeMatrix * vec4(in_cameraPos, 1.0));        
  if (g_eyePosObj.w != 0.0)        
    {        
    g_eyePosObj.x /= g_eyePosObj.w;        
    g_eyePosObj.y /= g_eyePosObj.w;        
    g_eyePosObj.z /= g_eyePosObj.w;        
    g_eyePosObj.w = 1.0;        
    }        
        
  // Getting the ray marching direction (in dataset space);        
  vec3 rayDir = computeRayDirection();        
        
  // Multiply the raymarching direction with the step size to get the        
  // sub-step size we need to take at each raymarching step        
  g_dirStep = (ip_inverseTextureDataAdjusted *        
              vec4(rayDir, 0.0)).xyz * in_sampleDistance;        
        
  // 2D Texture fragment coordinates [0,1] from fragment coordinates.        
  // The frame buffer texture has the size of the plain buffer but         
  // we use a fraction of it. The texture coordinate is less than 1 if        
  // the reduction factor is less than 1.        
  // Device coordinates are between -1 and 1. We need texture        
  // coordinates between 0 and 1. The in_noiseSampler and in_depthSampler        
  // buffers have the original size buffer.        
  vec2 fragTexCoord = (gl_FragCoord.xy - in_windowLowerLeftCorner) *        
                      in_inverseWindowSize;        
        
  if (in_useJittering)        
  {        
    float jitterValue = texture2D(in_noiseSampler, fragTexCoord).x;        
    g_rayJitter = g_dirStep * jitterValue;        
    g_dataPos += g_rayJitter;        
  }        
  else        
  {        
    g_dataPos += g_dirStep;        
  }        
        
  // Flag to deternmine if voxel should be considered for the rendering        
  g_skip = false;

        
  // Flag to indicate if the raymarch loop should terminate       
  bool stop = false;      
      
  g_terminatePointMax = 0.0;      
      
#ifdef GL_ES      
  vec4 l_depthValue = vec4(1.0,1.0,1.0,1.0);      
#else      
  vec4 l_depthValue = texture2D(in_depthSampler, fragTexCoord);      
#endif      
  // Depth test      
  if(gl_FragCoord.z >= l_depthValue.x)      
    {      
    discard;      
    }      
      
  // color buffer or max scalar buffer have a reduced size.      
  fragTexCoord = (gl_FragCoord.xy - in_windowLowerLeftCorner) *      
                 in_inverseOriginalWindowSize;      
      
  // Compute max number of iterations it will take before we hit      
  // the termination point      
      
  // Abscissa of the point on the depth buffer along the ray.      
  // point in texture coordinates      
  vec4 terminatePoint = WindowToNDC(gl_FragCoord.x, gl_FragCoord.y, l_depthValue.x);      
      
  // From normalized device coordinates to eye coordinates.      
  // in_projectionMatrix is inversed because of way VT      
  // From eye coordinates to texture coordinates      
  terminatePoint = ip_inverseTextureDataAdjusted *      
                   in_inverseVolumeMatrix *      
                   in_inverseModelViewMatrix *      
                   in_inverseProjectionMatrix *      
                   terminatePoint;      
  terminatePoint /= terminatePoint.w;      
      
  g_terminatePointMax = length(terminatePoint.xyz - g_dataPos.xyz) /      
                        length(g_dirStep);      
  g_currentT = 0.0;

  //VTK::Cropping::Init

  //VTK::Clipping::Init

  //VTK::RenderToImage::Init

  //VTK::DepthPass::Init
}

/**
 * March along the ray direction sampling the volume texture.  This function
 * takes a start and end point as arguments but it is up to the specific render
 * pass implementation to use these values (e.g. vtkDualDepthPeelingPass). The
 * mapper does not use these values by default, instead it uses the number of
 * steps defined by g_terminatePointMax.
 */
vec4 castRay(const float zStart, const float zEnd)
{
  //VTK::DepthPeeling::Ray::Init

  //VTK::DepthPeeling::Ray::PathCheck

  //VTK::Shading::Init

  /// For all samples along the ray
  while (!g_exit)
  {
          
    g_skip = false;

    //VTK::Cropping::Impl

    //VTK::Clipping::Impl

    //VTK::BinaryMask::Impl

    //VTK::CompositeMask::Impl

          
    if (!g_skip)      
      {      
      vec4 scalar = texture3D(in_volume, g_dataPos);        
      scalar.r = scalar.r*in_volume_scale.r + in_volume_bias.r;        
      scalar = vec4(scalar.r,scalar.r,scalar.r,scalar.r);             
      g_srcColor = vec4(0.0);             
      g_srcColor.a = computeOpacity(scalar);             
      if (g_srcColor.a > 0.0)             
        {             
        g_srcColor = computeColor(scalar, g_srcColor.a);           
        // Opacity calculation using compositing:           
        // Here we use front to back compositing scheme whereby           
        // the current sample value is multiplied to the           
        // currently accumulated alpha and then this product           
        // is subtracted from the sample value to get the           
        // alpha from the previous steps. Next, this alpha is           
        // multiplied with the current sample colour           
        // and accumulated to the composited colour. The alpha           
        // value from the previous steps is then accumulated           
        // to the composited colour alpha.           
        g_srcColor.rgb *= g_srcColor.a;           
        g_fragColor = (1.0f - g_fragColor.a) * g_srcColor + g_fragColor;             
        }        
      }

    //VTK::RenderToImage::Impl

    //VTK::DepthPass::Impl

    /// Advance ray
    g_dataPos += g_dirStep;

          
    if(any(greaterThan(g_dataPos, in_texMax)) ||      
      any(lessThan(g_dataPos, in_texMin)))      
      {      
      break;      
      }      
      
    // Early ray termination      
    // if the currently composited colour alpha is already fully saturated      
    // we terminated the loop or if we have hit an obstacle in the      
    // direction of they ray (using depth buffer) we terminate as well.      
    if((g_fragColor.a > g_opacityThreshold) ||       
       g_currentT >= g_terminatePointMax)      
      {      
      break;      
      }      
    ++g_currentT;
  }

  //VTK::Shading::Exit

  return g_fragColor;
}

/**
 * Finalize specific modes and set output data.
 */
void finalizeRayCast()
{
  //VTK::Base::Exit

  //VTK::Terminate::Exit

  //VTK::Cropping::Exit

  //VTK::Clipping::Exit

  //VTK::Picking::Exit

  g_fragColor.r = g_fragColor.r * in_scale + in_bias * g_fragColor.a;
  g_fragColor.g = g_fragColor.g * in_scale + in_bias * g_fragColor.a;
  g_fragColor.b = g_fragColor.b * in_scale + in_bias * g_fragColor.a;
  fragOutput0 = g_fragColor;

  //VTK::RenderToImage::Exit

  //VTK::DepthPass::Exit
}

//////////////////////////////////////////////////////////////////////////////
///
/// Main
///
//////////////////////////////////////////////////////////////////////////////
void main()
{
      
  initializeRayCast();    
  castRay(-1.0, -1.0);    
  finalizeRayCast();
}


